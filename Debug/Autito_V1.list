
Autito_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800c970  0800c970  0000d970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9e0  0800c9e0  0000e07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9e0  0800c9e0  0000d9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9e8  0800c9e8  0000e07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9e8  0800c9e8  0000d9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c9ec  0800c9ec  0000d9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800c9f0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e07c  2**0
                  CONTENTS
 10 .bss          00000dbc  2000007c  2000007c  0000e07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e38  20000e38  0000e07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d32c  00000000  00000000  0000e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004053  00000000  00000000  0002b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a0  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001403  00000000  00000000  00030dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026304  00000000  00000000  000321d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002072a  00000000  00000000  000584d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1a84  00000000  00000000  00078c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015a685  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007338  00000000  00000000  0015a6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00161a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c958 	.word	0x0800c958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800c958 	.word	0x0800c958

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Transmision>:
//mayonesa
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Transmision() { //Envia un mensaje a través de la UART
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
strcat(mensaje, "\r\n"); //Agrega instrucciones de retorno de carro y avance de línea al mensaje
 8000574:	480b      	ldr	r0, [pc, #44]	@ (80005a4 <Transmision+0x34>)
 8000576:	f7ff fe2b 	bl	80001d0 <strlen>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <Transmision+0x34>)
 8000580:	4413      	add	r3, r2
 8000582:	4a09      	ldr	r2, [pc, #36]	@ (80005a8 <Transmision+0x38>)
 8000584:	8811      	ldrh	r1, [r2, #0]
 8000586:	7892      	ldrb	r2, [r2, #2]
 8000588:	8019      	strh	r1, [r3, #0]
 800058a:	709a      	strb	r2, [r3, #2]
HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, strlen(mensaje), delay); //Transmisión del mensaje
 800058c:	4805      	ldr	r0, [pc, #20]	@ (80005a4 <Transmision+0x34>)
 800058e:	f7ff fe1f 	bl	80001d0 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	b29a      	uxth	r2, r3
 8000596:	2332      	movs	r3, #50	@ 0x32
 8000598:	4902      	ldr	r1, [pc, #8]	@ (80005a4 <Transmision+0x34>)
 800059a:	4804      	ldr	r0, [pc, #16]	@ (80005ac <Transmision+0x3c>)
 800059c:	f007 f860 	bl	8007660 <HAL_UART_Transmit>

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000514 	.word	0x20000514
 80005a8:	0800c970 	.word	0x0800c970
 80005ac:	20000324 	.word	0x20000324

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f001 fe4c 	bl	8002250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f8bc 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fb24 	bl	8000c08 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 fafa 	bl	8000bb8 <MX_DMA_Init>
  MX_I2C1_Init();
 80005c4:	f000 f9c4 	bl	8000950 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005c8:	f000 f9f0 	bl	80009ac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005cc:	f00b fa0a 	bl	800b9e4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80005d0:	f000 f91a 	bl	8000808 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005d4:	f000 f96a 	bl	80008ac <MX_ADC2_Init>
  MX_TIM14_Init();
 80005d8:	f000 faa0 	bl	8000b1c <MX_TIM14_Init>
  MX_TIM3_Init();
 80005dc:	f000 fa1c 	bl	8000a18 <MX_TIM3_Init>
  MX_UART5_Init();
 80005e0:	f000 fac0 	bl	8000b64 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	Inicio(); // Probamos los LED e Inicializamos
 80005e4:	f000 fc58 	bl	8000e98 <Inicio>
	Inicio_Motores();
 80005e8:	f000 fce6 	bl	8000fb8 <Inicio_Motores>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ec:	f00b fa20 	bl	800ba30 <MX_USB_HOST_Process>
    while(pos==15){
		Bailar();
	}
*/

    while (pos==0){
 80005f0:	e001      	b.n	80005f6 <main+0x46>
    				Frenar();
 80005f2:	f000 fe49 	bl	8001288 <Frenar>
    while (pos==0){
 80005f6:	4b43      	ldr	r3, [pc, #268]	@ (8000704 <main+0x154>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f9      	beq.n	80005f2 <main+0x42>
    			}


// CONTROL FINAL -------------------------------------

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET) {
 80005fe:	2140      	movs	r1, #64	@ 0x40
 8000600:	4841      	ldr	r0, [pc, #260]	@ (8000708 <main+0x158>)
 8000602:	f003 f96d 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d106      	bne.n	800061a <main+0x6a>
					paredprueba = 0;
 800060c:	4b3f      	ldr	r3, [pc, #252]	@ (800070c <main+0x15c>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
					EncenderLed(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f001 fa70 	bl	8001af8 <EncenderLed>
 8000618:	e00c      	b.n	8000634 <main+0x84>
			}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET){
 800061a:	2140      	movs	r1, #64	@ 0x40
 800061c:	483a      	ldr	r0, [pc, #232]	@ (8000708 <main+0x158>)
 800061e:	f003 f95f 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d105      	bne.n	8000634 <main+0x84>
				paredprueba = 1;
 8000628:	4b38      	ldr	r3, [pc, #224]	@ (800070c <main+0x15c>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
				ApagarLed(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f001 fa90 	bl	8001b54 <ApagarLed>
			}

    		if (linea == 1) {
 8000634:	4b36      	ldr	r3, [pc, #216]	@ (8000710 <main+0x160>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d124      	bne.n	8000686 <main+0xd6>

			cont_posible_linea++;
 800063c:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <main+0x164>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <main+0x164>)
 8000644:	6013      	str	r3, [r2, #0]

			if (antirebote()) {
 8000646:	f000 fd31 	bl	80010ac <antirebote>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d017      	beq.n	8000680 <main+0xd0>
				contlinea++;
 8000650:	4b31      	ldr	r3, [pc, #196]	@ (8000718 <main+0x168>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	3301      	adds	r3, #1
 8000658:	b29a      	uxth	r2, r3
 800065a:	4b2f      	ldr	r3, [pc, #188]	@ (8000718 <main+0x168>)
 800065c:	801a      	strh	r2, [r3, #0]
				posicion();
 800065e:	f000 feef 	bl	8001440 <posicion>
				dir_min = DirMin(mapa);
 8000662:	482e      	ldr	r0, [pc, #184]	@ (800071c <main+0x16c>)
 8000664:	f001 f900 	bl	8001868 <DirMin>
 8000668:	4603      	mov	r3, r0
 800066a:	4a2d      	ldr	r2, [pc, #180]	@ (8000720 <main+0x170>)
 800066c:	6013      	str	r3, [r2, #0]
				linea = 0;
 800066e:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <main+0x160>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
				Avanzar();
 8000674:	f000 fdea 	bl	800124c <Avanzar>
				HAL_Delay(100);
 8000678:	2064      	movs	r0, #100	@ 0x64
 800067a:	f001 fe5b 	bl	8002334 <HAL_Delay>
 800067e:	e002      	b.n	8000686 <main+0xd6>

			}
			else
				linea = 0;
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <main+0x160>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]

		}
		if (pared == 1) {
 8000686:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <main+0x174>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d115      	bne.n	80006ba <main+0x10a>
			contpared++;
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <main+0x178>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b29b      	uxth	r3, r3
 8000694:	3301      	adds	r3, #1
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <main+0x178>)
 800069a:	801a      	strh	r2, [r3, #0]
			detectorParedes(mapa);                              //mayonesa
 800069c:	481f      	ldr	r0, [pc, #124]	@ (800071c <main+0x16c>)
 800069e:	f000 ff25 	bl	80014ec <detectorParedes>
			ActualizarPesos10(mapa);
 80006a2:	481e      	ldr	r0, [pc, #120]	@ (800071c <main+0x16c>)
 80006a4:	f001 f84c 	bl	8001740 <ActualizarPesos10>
			dir_min = DirMin(mapa);
 80006a8:	481c      	ldr	r0, [pc, #112]	@ (800071c <main+0x16c>)
 80006aa:	f001 f8dd 	bl	8001868 <DirMin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000720 <main+0x170>)
 80006b2:	6013      	str	r3, [r2, #0]
			pared = 0;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <main+0x174>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
		}

		if (orientacion == dir_min)
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <main+0x17c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <main+0x170>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d102      	bne.n	80006cc <main+0x11c>
			Centrado();
 80006c6:	f000 fd35 	bl	8001134 <Centrado>
 80006ca:	e78f      	b.n	80005ec <main+0x3c>
		else {
			direccion_de_giro = PrioridadDeGiro(dir_min);
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <main+0x170>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 f84b 	bl	800176c <PrioridadDeGiro>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <main+0x180>)
 80006dc:	701a      	strb	r2, [r3, #0]
			Girar(direccion_de_giro);
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <main+0x180>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fdee 	bl	80012c4 <Girar>
			calcular_orientacion(direccion_de_giro);
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <main+0x180>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fe6b 	bl	80013c8 <calcular_orientacion>
			pared = 0;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <main+0x174>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
			Frenar();
 80006f8:	f000 fdc6 	bl	8001288 <Frenar>
			HAL_Delay(200);
 80006fc:	20c8      	movs	r0, #200	@ 0xc8
 80006fe:	f001 fe19 	bl	8002334 <HAL_Delay>
    MX_USB_HOST_Process();
 8000702:	e773      	b.n	80005ec <main+0x3c>
 8000704:	2000047c 	.word	0x2000047c
 8000708:	40020000 	.word	0x40020000
 800070c:	20000528 	.word	0x20000528
 8000710:	20000470 	.word	0x20000470
 8000714:	2000050c 	.word	0x2000050c
 8000718:	20000526 	.word	0x20000526
 800071c:	20000488 	.word	0x20000488
 8000720:	20000508 	.word	0x20000508
 8000724:	20000474 	.word	0x20000474
 8000728:	20000524 	.word	0x20000524
 800072c:	20000480 	.word	0x20000480
 8000730:	20000484 	.word	0x20000484

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	@ 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f00b fd36 	bl	800c1b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a27      	ldr	r2, [pc, #156]	@ (8000800 <SystemClock_Config+0xcc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <SystemClock_Config+0xd0>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b2:	2307      	movs	r3, #7
 80007b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fb52 	bl	8005e64 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007c6:	f001 f9f3 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2105      	movs	r1, #5
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 fdb3 	bl	8006354 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f4:	f001 f9dc 	bl	8001bb0 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	@ 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081a:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800081c:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800081e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000822:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000826:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000830:	2201      	movs	r2, #1
 8000832:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000834:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000836:	2201      	movs	r2, #1
 8000838:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <MX_ADC1_Init+0xa0>)
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000856:	2201      	movs	r2, #1
 8000858:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800085c:	2201      	movs	r2, #1
 800085e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000868:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800086a:	f001 fd87 	bl	800237c <HAL_ADC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000874:	f001 f99c 	bl	8001bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000878:	2308      	movs	r3, #8
 800087a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000880:	2303      	movs	r3, #3
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800088a:	f001 fed9 	bl	8002640 <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000894:	f001 f98c 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000098 	.word	0x20000098
 80008a4:	40012000 	.word	0x40012000
 80008a8:	0f000001 	.word	0x0f000001

080008ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008c0:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <MX_ADC2_Init+0x9c>)
 80008c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008c6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008da:	2201      	movs	r2, #1
 80008dc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008ee:	4a17      	ldr	r2, [pc, #92]	@ (800094c <MX_ADC2_Init+0xa0>)
 80008f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_ADC2_Init+0x98>)
 8000900:	2201      	movs	r2, #1
 8000902:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_ADC2_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800090c:	480d      	ldr	r0, [pc, #52]	@ (8000944 <MX_ADC2_Init+0x98>)
 800090e:	f001 fd35 	bl	800237c <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000918:	f001 f94a 	bl	8001bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800091c:	2309      	movs	r3, #9
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000924:	2303      	movs	r3, #3
 8000926:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_ADC2_Init+0x98>)
 800092e:	f001 fe87 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000938:	f001 f93a 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000e0 	.word	0x200000e0
 8000948:	40012100 	.word	0x40012100
 800094c:	0f000001 	.word	0x0f000001

08000950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <MX_I2C1_Init+0x54>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800095c:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <MX_I2C1_Init+0x58>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800096e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800098e:	f005 f925 	bl	8005bdc <HAL_I2C_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000998:	f001 f90a 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200001e8 	.word	0x200001e8
 80009a4:	40005400 	.word	0x40005400
 80009a8:	000186a0 	.word	0x000186a0

080009ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b0:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009b2:	4a18      	ldr	r2, [pc, #96]	@ (8000a14 <MX_SPI1_Init+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009f8:	220a      	movs	r2, #10
 80009fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_SPI1_Init+0x64>)
 80009fe:	f005 fec9 	bl	8006794 <HAL_SPI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a08:	f001 f8d2 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000023c 	.word	0x2000023c
 8000a14:	40013000 	.word	0x40013000

08000a18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	@ 0x38
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a48:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000a4a:	4a33      	ldr	r2, [pc, #204]	@ (8000b18 <MX_TIM3_Init+0x100>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a4e:	4b31      	ldr	r3, [pc, #196]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b2f      	ldr	r3, [pc, #188]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000a5c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a6e:	4829      	ldr	r0, [pc, #164]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000a70:	f005 ff19 	bl	80068a6 <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a7a:	f001 f899 	bl	8001bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4822      	ldr	r0, [pc, #136]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000a8c:	f006 f93e 	bl	8006d0c <HAL_TIM_ConfigClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a96:	f001 f88b 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a9a:	481e      	ldr	r0, [pc, #120]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000a9c:	f005 ff52 	bl	8006944 <HAL_TIM_PWM_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000aa6:	f001 f883 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4816      	ldr	r0, [pc, #88]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000aba:	f006 fd05 	bl	80074c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ac4:	f001 f874 	bl	8001bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac8:	2360      	movs	r3, #96	@ 0x60
 8000aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2208      	movs	r2, #8
 8000adc:	4619      	mov	r1, r3
 8000ade:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000ae0:	f006 f852 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000aea:	f001 f861 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	220c      	movs	r2, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000af6:	f006 f847 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000b00:	f001 f856 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b04:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <MX_TIM3_Init+0xfc>)
 8000b06:	f001 fa25 	bl	8001f54 <HAL_TIM_MspPostInit>

}
 8000b0a:	bf00      	nop
 8000b0c:	3738      	adds	r7, #56	@ 0x38
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000294 	.word	0x20000294
 8000b18:	40000400 	.word	0x40000400

08000b1c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_TIM14_Init+0x40>)
 8000b22:	4a0f      	ldr	r2, [pc, #60]	@ (8000b60 <MX_TIM14_Init+0x44>)
 8000b24:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 41999;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <MX_TIM14_Init+0x40>)
 8000b28:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000b2c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_TIM14_Init+0x40>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 199;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_TIM14_Init+0x40>)
 8000b36:	22c7      	movs	r2, #199	@ 0xc7
 8000b38:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_TIM14_Init+0x40>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_TIM14_Init+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_TIM14_Init+0x40>)
 8000b48:	f005 fead 	bl	80068a6 <HAL_TIM_Base_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000b52:	f001 f82d 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200002dc 	.word	0x200002dc
 8000b60:	40002000 	.word	0x40002000

08000b64 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <MX_UART5_Init+0x4c>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <MX_UART5_Init+0x50>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <MX_UART5_Init+0x4c>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_UART5_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_UART5_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <MX_UART5_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_UART5_Init+0x4c>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <MX_UART5_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_UART5_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <MX_UART5_Init+0x4c>)
 8000b9c:	f006 fd10 	bl	80075c0 <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000ba6:	f001 f803 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000324 	.word	0x20000324
 8000bb4:	40005000 	.word	0x40005000

08000bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <MX_DMA_Init+0x4c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <MX_DMA_Init+0x4c>)
 8000bc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <MX_DMA_Init+0x4c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2038      	movs	r0, #56	@ 0x38
 8000be0:	f002 f8a9 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000be4:	2038      	movs	r0, #56	@ 0x38
 8000be6:	f002 f8c2 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	203a      	movs	r0, #58	@ 0x3a
 8000bf0:	f002 f8a1 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bf4:	203a      	movs	r0, #58	@ 0x3a
 8000bf6:	f002 f8ba 	bl	8002d6e <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	@ 0x30
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	4b97      	ldr	r3, [pc, #604]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a96      	ldr	r2, [pc, #600]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b94      	ldr	r3, [pc, #592]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	4b90      	ldr	r3, [pc, #576]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a8f      	ldr	r2, [pc, #572]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b89      	ldr	r3, [pc, #548]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a88      	ldr	r2, [pc, #544]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b86      	ldr	r3, [pc, #536]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b82      	ldr	r3, [pc, #520]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a81      	ldr	r2, [pc, #516]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b7f      	ldr	r3, [pc, #508]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b7b      	ldr	r3, [pc, #492]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a7a      	ldr	r2, [pc, #488]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b78      	ldr	r3, [pc, #480]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b74      	ldr	r3, [pc, #464]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a73      	ldr	r2, [pc, #460]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b71      	ldr	r3, [pc, #452]	@ (8000e80 <MX_GPIO_Init+0x278>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2108      	movs	r1, #8
 8000cca:	486e      	ldr	r0, [pc, #440]	@ (8000e84 <MX_GPIO_Init+0x27c>)
 8000ccc:	f002 fe20 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	486c      	ldr	r0, [pc, #432]	@ (8000e88 <MX_GPIO_Init+0x280>)
 8000cd6:	f002 fe1b 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mi0_Pin|mi1_Pin|md0_Pin|md1_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000ce0:	486a      	ldr	r0, [pc, #424]	@ (8000e8c <MX_GPIO_Init+0x284>)
 8000ce2:	f002 fe15 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|LED_VERDE_Pin|LD3_Pin|LED_ROJO_Pin
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f64f 0110 	movw	r1, #63504	@ 0xf810
 8000cec:	4868      	ldr	r0, [pc, #416]	@ (8000e90 <MX_GPIO_Init+0x288>)
 8000cee:	f002 fe0f 	bl	8003910 <HAL_GPIO_WritePin>
                          |LED_AZUL_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	485e      	ldr	r0, [pc, #376]	@ (8000e84 <MX_GPIO_Init+0x27c>)
 8000d0a:	f002 fc4d 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4858      	ldr	r0, [pc, #352]	@ (8000e88 <MX_GPIO_Init+0x280>)
 8000d26:	f002 fc3f 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4850      	ldr	r0, [pc, #320]	@ (8000e88 <MX_GPIO_Init+0x280>)
 8000d46:	f002 fc2f 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : boton_azul_Pin */
  GPIO_InitStruct.Pin = boton_azul_Pin;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(boton_azul_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	484d      	ldr	r0, [pc, #308]	@ (8000e94 <MX_GPIO_Init+0x28c>)
 8000d5e:	f002 fc23 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d62:	2310      	movs	r3, #16
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d72:	2306      	movs	r3, #6
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4845      	ldr	r0, [pc, #276]	@ (8000e94 <MX_GPIO_Init+0x28c>)
 8000d7e:	f002 fc13 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d82:	2304      	movs	r3, #4
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	483d      	ldr	r0, [pc, #244]	@ (8000e8c <MX_GPIO_Init+0x284>)
 8000d96:	f002 fc07 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dac:	2305      	movs	r3, #5
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4835      	ldr	r0, [pc, #212]	@ (8000e8c <MX_GPIO_Init+0x284>)
 8000db8:	f002 fbf6 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : mi0_Pin mi1_Pin md0_Pin md1_Pin */
  GPIO_InitStruct.Pin = mi0_Pin|mi1_Pin|md0_Pin|md1_Pin;
 8000dbc:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	482d      	ldr	r0, [pc, #180]	@ (8000e8c <MX_GPIO_Init+0x284>)
 8000dd6:	f002 fbe7 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 LED_VERDE_Pin LD3_Pin LED_ROJO_Pin
                           LED_AZUL_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|LED_VERDE_Pin|LD3_Pin|LED_ROJO_Pin
 8000dda:	f64f 0310 	movw	r3, #63504	@ 0xf810
 8000dde:	61fb      	str	r3, [r7, #28]
                          |LED_AZUL_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4827      	ldr	r0, [pc, #156]	@ (8000e90 <MX_GPIO_Init+0x288>)
 8000df4:	f002 fbd8 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : pared_delante_Pin sensor_linea_Pin */
  GPIO_InitStruct.Pin = pared_delante_Pin|sensor_linea_Pin;
 8000df8:	23c0      	movs	r3, #192	@ 0xc0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dfc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481e      	ldr	r0, [pc, #120]	@ (8000e88 <MX_GPIO_Init+0x280>)
 8000e0e:	f002 fbcb 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 8000e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e24:	2306      	movs	r3, #6
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4816      	ldr	r0, [pc, #88]	@ (8000e88 <MX_GPIO_Init+0x280>)
 8000e30:	f002 fbba 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e34:	2320      	movs	r3, #32
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <MX_GPIO_Init+0x288>)
 8000e48:	f002 fbae 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4808      	ldr	r0, [pc, #32]	@ (8000e84 <MX_GPIO_Init+0x27c>)
 8000e62:	f002 fba1 	bl	80035a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f001 ff63 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e70:	2017      	movs	r0, #23
 8000e72:	f001 ff7c 	bl	8002d6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e76:	bf00      	nop
 8000e78:	3730      	adds	r7, #48	@ 0x30
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40020400 	.word	0x40020400
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	40020000 	.word	0x40020000

08000e98 <Inicio>:

/* USER CODE BEGIN 4 */

void Inicio(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
// Encendemos todos los LED y esperamos un tiempo
	EncenderTodos();
 8000e9c:	f000 fdfc 	bl	8001a98 <EncenderTodos>
	HAL_Delay(TENCENDIDO);
 8000ea0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea4:	f001 fa46 	bl	8002334 <HAL_Delay>
// Apagamos todos los LED y esperamos un tiempo
	ApagarTodos();
 8000ea8:	f000 fe0e 	bl	8001ac8 <ApagarTodos>
	HAL_Delay(TAPAGADO);
 8000eac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb0:	f001 fa40 	bl	8002334 <HAL_Delay>
// Iniciamos las conversiones
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer1, BUFFER_TOTAL);
 8000eb4:	2240      	movs	r2, #64	@ 0x40
 8000eb6:	492f      	ldr	r1, [pc, #188]	@ (8000f74 <Inicio+0xdc>)
 8000eb8:	482f      	ldr	r0, [pc, #188]	@ (8000f78 <Inicio+0xe0>)
 8000eba:	f001 faa3 	bl	8002404 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) dma_buffer2, BUFFER_TOTAL);
 8000ebe:	2240      	movs	r2, #64	@ 0x40
 8000ec0:	492e      	ldr	r1, [pc, #184]	@ (8000f7c <Inicio+0xe4>)
 8000ec2:	482f      	ldr	r0, [pc, #188]	@ (8000f80 <Inicio+0xe8>)
 8000ec4:	f001 fa9e 	bl	8002404 <HAL_ADC_Start_DMA>
// Setea los PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PC8 - Velocidad izquierda
 8000ec8:	2108      	movs	r1, #8
 8000eca:	482e      	ldr	r0, [pc, #184]	@ (8000f84 <Inicio+0xec>)
 8000ecc:	f005 fd94 	bl	80069f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PC9 - Velocidad derecha
 8000ed0:	210c      	movs	r1, #12
 8000ed2:	482c      	ldr	r0, [pc, #176]	@ (8000f84 <Inicio+0xec>)
 8000ed4:	f005 fd90 	bl	80069f8 <HAL_TIM_PWM_Start>
	setVelocidadIzquierda(75);  // 75% al motor izquierdo
 8000ed8:	204b      	movs	r0, #75	@ 0x4b
 8000eda:	f000 f88b 	bl	8000ff4 <setVelocidadIzquierda>
	setVelocidadDerecha(75);    // 75% al motor derecho
 8000ede:	204b      	movs	r0, #75	@ 0x4b
 8000ee0:	f000 f8ae 	bl	8001040 <setVelocidadDerecha>
	InicializarMapa(mapa);     // Inicializa la matriz de pesos y paredes
 8000ee4:	4828      	ldr	r0, [pc, #160]	@ (8000f88 <Inicio+0xf0>)
 8000ee6:	f000 fb77 	bl	80015d8 <InicializarMapa>
	ActualizarPesos(mapa);
 8000eea:	4827      	ldr	r0, [pc, #156]	@ (8000f88 <Inicio+0xf0>)
 8000eec:	f000 fbd0 	bl	8001690 <ActualizarPesos>
	linea = 0;
 8000ef0:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <Inicio+0xf4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
	pared = 0; //inicializar variables de interrupcion
 8000ef6:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <Inicio+0xf8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
	orientacion = 0;
 8000efc:	4b25      	ldr	r3, [pc, #148]	@ (8000f94 <Inicio+0xfc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
	pos = 15;
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <Inicio+0x100>)
 8000f04:	220f      	movs	r2, #15
 8000f06:	601a      	str	r2, [r3, #0]
	dir_min = 0;
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <Inicio+0x104>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
	UMBRAL_DERECHO=1700;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <Inicio+0x108>)
 8000f10:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000f14:	801a      	strh	r2, [r3, #0]
	UMBRAL_IZQUIERDO=3700;
 8000f16:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <Inicio+0x10c>)
 8000f18:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000f1c:	801a      	strh	r2, [r3, #0]
	Calibrar_Sensores();
 8000f1e:	f000 fc5b 	bl	80017d8 <Calibrar_Sensores>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000f22:	e00b      	b.n	8000f3c <Inicio+0xa4>
		EncenderLed(1);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f000 fde7 	bl	8001af8 <EncenderLed>
	HAL_Delay(100);
 8000f2a:	2064      	movs	r0, #100	@ 0x64
 8000f2c:	f001 fa02 	bl	8002334 <HAL_Delay>
	ApagarLed(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f000 fe0f 	bl	8001b54 <ApagarLed>
	HAL_Delay(100);
 8000f36:	2064      	movs	r0, #100	@ 0x64
 8000f38:	f001 f9fc 	bl	8002334 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	481a      	ldr	r0, [pc, #104]	@ (8000fa8 <Inicio+0x110>)
 8000f40:	f002 fcce 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0ec      	beq.n	8000f24 <Inicio+0x8c>
	}
	HAL_Delay(1000);
 8000f4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f4e:	f001 f9f1 	bl	8002334 <HAL_Delay>
	linea=0;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <Inicio+0xf4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
	pared=0;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <Inicio+0xf8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
	contpared = 0;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <Inicio+0x114>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	801a      	strh	r2, [r3, #0]
	contlinea = 0;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <Inicio+0x118>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	801a      	strh	r2, [r3, #0]
	paredprueba = 0;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <Inicio+0x11c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000036c 	.word	0x2000036c
 8000f78:	20000098 	.word	0x20000098
 8000f7c:	200003ec 	.word	0x200003ec
 8000f80:	200000e0 	.word	0x200000e0
 8000f84:	20000294 	.word	0x20000294
 8000f88:	20000488 	.word	0x20000488
 8000f8c:	20000470 	.word	0x20000470
 8000f90:	20000474 	.word	0x20000474
 8000f94:	20000480 	.word	0x20000480
 8000f98:	2000047c 	.word	0x2000047c
 8000f9c:	20000508 	.word	0x20000508
 8000fa0:	20000510 	.word	0x20000510
 8000fa4:	20000512 	.word	0x20000512
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	20000524 	.word	0x20000524
 8000fb0:	20000526 	.word	0x20000526
 8000fb4:	20000528 	.word	0x20000528

08000fb8 <Inicio_Motores>:

void Inicio_Motores(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fc2:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <Inicio_Motores+0x38>)
 8000fc4:	f002 fca4 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fce:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <Inicio_Motores+0x38>)
 8000fd0:	f002 fc9e 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <Inicio_Motores+0x38>)
 8000fdc:	f002 fc98 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe6:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <Inicio_Motores+0x38>)
 8000fe8:	f002 fc92 	bl	8003910 <HAL_GPIO_WritePin>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <setVelocidadIzquierda>:
/**
 * @brief Establece la velocidad del motor izquierdo (PC8 - TIM3_CH3)
 * @param duty Duty cycle (0 a 100%)
 */

void setVelocidadIzquierda(int duty) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if (duty > 100)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b64      	cmp	r3, #100	@ 0x64
 8001000:	dd01      	ble.n	8001006 <setVelocidadIzquierda+0x12>
		duty = 100;
 8001002:	2364      	movs	r3, #100	@ 0x64
 8001004:	607b      	str	r3, [r7, #4]

	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3) + 1;
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <setVelocidadIzquierda+0x44>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100c:	3301      	adds	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
	uint32_t pulse = (duty * arr) / 100;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	fb02 f303 	mul.w	r3, r2, r3
 8001018:	4a08      	ldr	r2, [pc, #32]	@ (800103c <setVelocidadIzquierda+0x48>)
 800101a:	fba2 2303 	umull	r2, r3, r2, r3
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse); // Motor izquierdo
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <setVelocidadIzquierda+0x44>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000294 	.word	0x20000294
 800103c:	51eb851f 	.word	0x51eb851f

08001040 <setVelocidadDerecha>:
/**
 * @brief Establece la velocidad del motor derecho (PC9 - TIM3_CH4)
 * @param duty Duty cycle (0 a 100%)
 */

void setVelocidadDerecha(int duty) {
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	if (duty > 100)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b64      	cmp	r3, #100	@ 0x64
 800104c:	dd01      	ble.n	8001052 <setVelocidadDerecha+0x12>
		duty = 100;
 800104e:	2364      	movs	r3, #100	@ 0x64
 8001050:	607b      	str	r3, [r7, #4]

	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3) + 1;
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <setVelocidadDerecha+0x44>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001058:	3301      	adds	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
	uint32_t pulse = (duty * arr) / 100;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <setVelocidadDerecha+0x48>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pulse); // Motor derecho
 800106e:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <setVelocidadDerecha+0x44>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000294 	.word	0x20000294
 8001088:	51eb851f 	.word	0x51eb851f

0800108c <Sensor_Linea>:

int Sensor_Linea(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin)
 8001090:	2180      	movs	r1, #128	@ 0x80
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <Sensor_Linea+0x1c>)
 8001094:	f002 fc24 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
			== GPIO_PIN_SET) ? 1 : 0;
 800109a:	2b01      	cmp	r3, #1
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020800 	.word	0x40020800

080010ac <antirebote>:

bool antirebote(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	int es_linea = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]

	HAL_Delay(5); //5ms de delay
 80010b6:	2005      	movs	r0, #5
 80010b8:	f001 f93c 	bl	8002334 <HAL_Delay>
	if (Sensor_Linea() == 1)
 80010bc:	f7ff ffe6 	bl	800108c <Sensor_Linea>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d101      	bne.n	80010ca <antirebote+0x1e>
		return false;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e030      	b.n	800112c <antirebote+0x80>
	HAL_Delay(5); //5ms de delay
 80010ca:	2005      	movs	r0, #5
 80010cc:	f001 f932 	bl	8002334 <HAL_Delay>
	if (Sensor_Linea() == 1)
 80010d0:	f7ff ffdc 	bl	800108c <Sensor_Linea>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <antirebote+0x32>
		return false;
 80010da:	2300      	movs	r3, #0
 80010dc:	e026      	b.n	800112c <antirebote+0x80>
	HAL_Delay(5); //5ms de delay
 80010de:	2005      	movs	r0, #5
 80010e0:	f001 f928 	bl	8002334 <HAL_Delay>
	if (Sensor_Linea() == 1)
 80010e4:	f7ff ffd2 	bl	800108c <Sensor_Linea>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <antirebote+0x46>
		return false;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e01c      	b.n	800112c <antirebote+0x80>
	es_linea = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]

	while (es_linea == 1) {
 80010f6:	e015      	b.n	8001124 <antirebote+0x78>
		while (Sensor_Linea() == 0)
			Avanzar();
 80010f8:	f000 f8a8 	bl	800124c <Avanzar>
		while (Sensor_Linea() == 0)
 80010fc:	f7ff ffc6 	bl	800108c <Sensor_Linea>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f8      	beq.n	80010f8 <antirebote+0x4c>

		if (Sensor_Linea() == 1)
 8001106:	f7ff ffc1 	bl	800108c <Sensor_Linea>
 800110a:	4603      	mov	r3, r0
 800110c:	2b01      	cmp	r3, #1
 800110e:	d102      	bne.n	8001116 <antirebote+0x6a>
			HAL_Delay(5); //5ms de delay
 8001110:	2005      	movs	r0, #5
 8001112:	f001 f90f 	bl	8002334 <HAL_Delay>
		if (Sensor_Linea() == 1)
 8001116:	f7ff ffb9 	bl	800108c <Sensor_Linea>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <antirebote+0x78>
			return true;
 8001120:	2301      	movs	r3, #1
 8001122:	e003      	b.n	800112c <antirebote+0x80>
	while (es_linea == 1) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d0e8      	beq.n	80010fc <antirebote+0x50>
	}
	return false; //no deberia pasar nunca, en caso de falla
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <Centrado>:

void Centrado(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

	if ((sensor_der_avg < UMBRAL_DERECHO)
 8001138:	4b3f      	ldr	r3, [pc, #252]	@ (8001238 <Centrado+0x104>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <Centrado+0x108>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	429a      	cmp	r2, r3
 8001146:	d226      	bcs.n	8001196 <Centrado+0x62>
			&& (sensor_izq_avg > UMBRAL_IZQUIERDO)) {
 8001148:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <Centrado+0x10c>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b3d      	ldr	r3, [pc, #244]	@ (8001244 <Centrado+0x110>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	429a      	cmp	r2, r3
 8001156:	d91e      	bls.n	8001196 <Centrado+0x62>
		EncenderLed(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f000 fccd 	bl	8001af8 <EncenderLed>
		ApagarLed(2);
 800115e:	2002      	movs	r0, #2
 8001160:	f000 fcf8 	bl	8001b54 <ApagarLed>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800116a:	4837      	ldr	r0, [pc, #220]	@ (8001248 <Centrado+0x114>)
 800116c:	f002 fbd0 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001176:	4834      	ldr	r0, [pc, #208]	@ (8001248 <Centrado+0x114>)
 8001178:	f002 fbca 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001182:	4831      	ldr	r0, [pc, #196]	@ (8001248 <Centrado+0x114>)
 8001184:	f002 fbc4 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800118e:	482e      	ldr	r0, [pc, #184]	@ (8001248 <Centrado+0x114>)
 8001190:	f002 fbbe 	bl	8003910 <HAL_GPIO_WritePin>
 8001194:	e04d      	b.n	8001232 <Centrado+0xfe>
	} else if ((sensor_der_avg > UMBRAL_DERECHO)
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <Centrado+0x104>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <Centrado+0x108>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d926      	bls.n	80011f4 <Centrado+0xc0>
			&& (sensor_izq_avg < UMBRAL_IZQUIERDO)) {
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <Centrado+0x10c>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <Centrado+0x110>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d21e      	bcs.n	80011f4 <Centrado+0xc0>
		EncenderLed(2);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f000 fc9e 	bl	8001af8 <EncenderLed>
		ApagarLed(1);
 80011bc:	2001      	movs	r0, #1
 80011be:	f000 fcc9 	bl	8001b54 <ApagarLed>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c8:	481f      	ldr	r0, [pc, #124]	@ (8001248 <Centrado+0x114>)
 80011ca:	f002 fba1 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d4:	481c      	ldr	r0, [pc, #112]	@ (8001248 <Centrado+0x114>)
 80011d6:	f002 fb9b 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);   // MD0
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e0:	4819      	ldr	r0, [pc, #100]	@ (8001248 <Centrado+0x114>)
 80011e2:	f002 fb95 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ec:	4816      	ldr	r0, [pc, #88]	@ (8001248 <Centrado+0x114>)
 80011ee:	f002 fb8f 	bl	8003910 <HAL_GPIO_WritePin>
 80011f2:	e01e      	b.n	8001232 <Centrado+0xfe>

	} else {
		ApagarLed(2);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f000 fcad 	bl	8001b54 <ApagarLed>
		ApagarLed(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 fcaa 	bl	8001b54 <ApagarLed>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001206:	4810      	ldr	r0, [pc, #64]	@ (8001248 <Centrado+0x114>)
 8001208:	f002 fb82 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001212:	480d      	ldr	r0, [pc, #52]	@ (8001248 <Centrado+0x114>)
 8001214:	f002 fb7c 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800121e:	480a      	ldr	r0, [pc, #40]	@ (8001248 <Centrado+0x114>)
 8001220:	f002 fb76 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800122a:	4807      	ldr	r0, [pc, #28]	@ (8001248 <Centrado+0x114>)
 800122c:	f002 fb70 	bl	8003910 <HAL_GPIO_WritePin>
	}
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000046c 	.word	0x2000046c
 800123c:	20000510 	.word	0x20000510
 8001240:	2000046e 	.word	0x2000046e
 8001244:	20000512 	.word	0x20000512
 8001248:	40020400 	.word	0x40020400

0800124c <Avanzar>:
	GirarDer();
	HAL_Delay(150);
	}
}

void Avanzar(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001256:	480b      	ldr	r0, [pc, #44]	@ (8001284 <Avanzar+0x38>)
 8001258:	f002 fb5a 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001262:	4808      	ldr	r0, [pc, #32]	@ (8001284 <Avanzar+0x38>)
 8001264:	f002 fb54 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <Avanzar+0x38>)
 8001270:	f002 fb4e 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800127a:	4802      	ldr	r0, [pc, #8]	@ (8001284 <Avanzar+0x38>)
 800127c:	f002 fb48 	bl	8003910 <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020400 	.word	0x40020400

08001288 <Frenar>:

void Frenar(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001292:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <Frenar+0x38>)
 8001294:	f002 fb3c 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800129e:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <Frenar+0x38>)
 80012a0:	f002 fb36 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);   // MD0
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <Frenar+0x38>)
 80012ac:	f002 fb30 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012b6:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <Frenar+0x38>)
 80012b8:	f002 fb2a 	bl	8003910 <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40020400 	.word	0x40020400

080012c4 <Girar>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // MI1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // MD0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // MD1
}

uint16_t Girar(dir_giro giro) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	uint16_t duracion_ms = 525;
 80012ce:	f240 230d 	movw	r3, #525	@ 0x20d
 80012d2:	81fb      	strh	r3, [r7, #14]

	if ((giro) == (dir_giro) (izq)) {
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <Girar+0x48>
		// Girar a la izquierda
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012e0:	4838      	ldr	r0, [pc, #224]	@ (80013c4 <Girar+0x100>)
 80012e2:	f002 fb15 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // MI1
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ec:	4835      	ldr	r0, [pc, #212]	@ (80013c4 <Girar+0x100>)
 80012ee:	f002 fb0f 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012f8:	4832      	ldr	r0, [pc, #200]	@ (80013c4 <Girar+0x100>)
 80012fa:	f002 fb09 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001304:	482f      	ldr	r0, [pc, #188]	@ (80013c4 <Girar+0x100>)
 8001306:	f002 fb03 	bl	8003910 <HAL_GPIO_WritePin>
 800130a:	e039      	b.n	8001380 <Girar+0xbc>

		//duracion_ms = 700;

	} else if ((giro) == (dir_giro) (der)) {
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d118      	bne.n	8001344 <Girar+0x80>
		// Girar a la derecha
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   // MI0
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001318:	482a      	ldr	r0, [pc, #168]	@ (80013c4 <Girar+0x100>)
 800131a:	f002 faf9 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // MI1
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001324:	4827      	ldr	r0, [pc, #156]	@ (80013c4 <Girar+0x100>)
 8001326:	f002 faf3 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // MD0
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001330:	4824      	ldr	r0, [pc, #144]	@ (80013c4 <Girar+0x100>)
 8001332:	f002 faed 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // MD1
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800133c:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <Girar+0x100>)
 800133e:	f002 fae7 	bl	8003910 <HAL_GPIO_WritePin>
 8001342:	e01d      	b.n	8001380 <Girar+0xbc>

		//duracion_ms = 700;

	} else if ((giro) == (dir_giro) (atras)) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d118      	bne.n	800137c <Girar+0xb8>
		// Girar 180°
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001350:	481c      	ldr	r0, [pc, #112]	@ (80013c4 <Girar+0x100>)
 8001352:	f002 fadd 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // MI1
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800135c:	4819      	ldr	r0, [pc, #100]	@ (80013c4 <Girar+0x100>)
 800135e:	f002 fad7 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001368:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <Girar+0x100>)
 800136a:	f002 fad1 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001374:	4813      	ldr	r0, [pc, #76]	@ (80013c4 <Girar+0x100>)
 8001376:	f002 facb 	bl	8003910 <HAL_GPIO_WritePin>
 800137a:	e001      	b.n	8001380 <Girar+0xbc>
		//duracion_ms = 800;

	} else {
		return 1; // Comando inválido
 800137c:	2301      	movs	r3, #1
 800137e:	e01c      	b.n	80013ba <Girar+0xf6>
	}

	HAL_Delay(duracion_ms); // Espera el tiempo necesario
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 ffd6 	bl	8002334 <HAL_Delay>

	// Desactiva todos los pines (frena)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800138e:	480d      	ldr	r0, [pc, #52]	@ (80013c4 <Girar+0x100>)
 8001390:	f002 fabe 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // MI1
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800139a:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <Girar+0x100>)
 800139c:	f002 fab8 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // MD0
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a6:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <Girar+0x100>)
 80013a8:	f002 fab2 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013b2:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <Girar+0x100>)
 80013b4:	f002 faac 	bl	8003910 <HAL_GPIO_WritePin>

	return 0; // Éxito
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40020400 	.word	0x40020400

080013c8 <calcular_orientacion>:

void calcular_orientacion(dir_giro girohecho) {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]

	if (girohecho == izq)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10c      	bne.n	80013f2 <calcular_orientacion+0x2a>
		orientacion = (orientacion + 3) % 4;
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <calcular_orientacion+0x74>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3303      	adds	r3, #3
 80013de:	425a      	negs	r2, r3
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	f002 0203 	and.w	r2, r2, #3
 80013e8:	bf58      	it	pl
 80013ea:	4253      	negpl	r3, r2
 80013ec:	4a13      	ldr	r2, [pc, #76]	@ (800143c <calcular_orientacion+0x74>)
 80013ee:	6013      	str	r3, [r2, #0]
		orientacion = (orientacion + 1) % 4;
	else if (girohecho == atras) {
		orientacion = (orientacion + 2) % 4;

	}
}
 80013f0:	e01e      	b.n	8001430 <calcular_orientacion+0x68>
	else if (girohecho == der)
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10c      	bne.n	8001412 <calcular_orientacion+0x4a>
		orientacion = (orientacion + 1) % 4;
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <calcular_orientacion+0x74>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	425a      	negs	r2, r3
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	f002 0203 	and.w	r2, r2, #3
 8001408:	bf58      	it	pl
 800140a:	4253      	negpl	r3, r2
 800140c:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <calcular_orientacion+0x74>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	e00e      	b.n	8001430 <calcular_orientacion+0x68>
	else if (girohecho == atras) {
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d10b      	bne.n	8001430 <calcular_orientacion+0x68>
		orientacion = (orientacion + 2) % 4;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <calcular_orientacion+0x74>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3302      	adds	r3, #2
 800141e:	425a      	negs	r2, r3
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	bf58      	it	pl
 800142a:	4253      	negpl	r3, r2
 800142c:	4a03      	ldr	r2, [pc, #12]	@ (800143c <calcular_orientacion+0x74>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000480 	.word	0x20000480

08001440 <posicion>:

void posicion(void) { //norte=0, este=1, sur=2, oeste=
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

	if (orientacion == 0 && pos > 3)
 8001444:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <posicion+0x9c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d109      	bne.n	8001460 <posicion+0x20>
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <posicion+0xa0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b03      	cmp	r3, #3
 8001452:	dd05      	ble.n	8001460 <posicion+0x20>
		pos = (pos - 4);
 8001454:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <posicion+0xa0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3b04      	subs	r3, #4
 800145a:	4a21      	ldr	r2, [pc, #132]	@ (80014e0 <posicion+0xa0>)
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e031      	b.n	80014c4 <posicion+0x84>
	else if (orientacion == 1 && (pos % 4 != 3))
 8001460:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <posicion+0x9c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d110      	bne.n	800148a <posicion+0x4a>
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <posicion+0xa0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	425a      	negs	r2, r3
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	bf58      	it	pl
 8001478:	4253      	negpl	r3, r2
 800147a:	2b03      	cmp	r3, #3
 800147c:	d005      	beq.n	800148a <posicion+0x4a>
		pos = (pos + 1);
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <posicion+0xa0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	4a16      	ldr	r2, [pc, #88]	@ (80014e0 <posicion+0xa0>)
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e01c      	b.n	80014c4 <posicion+0x84>
	else if (orientacion == 2 && pos < 12)
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <posicion+0x9c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d109      	bne.n	80014a6 <posicion+0x66>
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <posicion+0xa0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b0b      	cmp	r3, #11
 8001498:	dc05      	bgt.n	80014a6 <posicion+0x66>
		pos = (pos + 4);
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <posicion+0xa0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3304      	adds	r3, #4
 80014a0:	4a0f      	ldr	r2, [pc, #60]	@ (80014e0 <posicion+0xa0>)
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e00e      	b.n	80014c4 <posicion+0x84>
	else if (orientacion == 3 && (pos % 4 != 0))
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <posicion+0x9c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d10a      	bne.n	80014c4 <posicion+0x84>
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <posicion+0xa0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <posicion+0x84>
		pos = (pos - 1);
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <posicion+0xa0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <posicion+0xa0>)
 80014c2:	6013      	str	r3, [r2, #0]
	sprintf(mensaje, "%d", pos); //Convierte la variable numérica contador en un string
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <posicion+0xa0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4906      	ldr	r1, [pc, #24]	@ (80014e4 <posicion+0xa4>)
 80014cc:	4806      	ldr	r0, [pc, #24]	@ (80014e8 <posicion+0xa8>)
 80014ce:	f00a fe51 	bl	800c174 <siprintf>
	Transmision(); //Ejecuta la función de transmisión
 80014d2:	f7ff f84d 	bl	8000570 <Transmision>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000480 	.word	0x20000480
 80014e0:	2000047c 	.word	0x2000047c
 80014e4:	0800c974 	.word	0x0800c974
 80014e8:	20000514 	.word	0x20000514

080014ec <detectorParedes>:

void detectorParedes(celda *mapa) {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

	mapa[pos].pared[orientacion] = true;
 80014f4:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <detectorParedes+0xe4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	441a      	add	r2, r3
 80014fe:	4b35      	ldr	r3, [pc, #212]	@ (80015d4 <detectorParedes+0xe8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	2201      	movs	r2, #1
 8001506:	711a      	strb	r2, [r3, #4]

	if (orientacion == 0 && pos > 3)
 8001508:	4b32      	ldr	r3, [pc, #200]	@ (80015d4 <detectorParedes+0xe8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d111      	bne.n	8001534 <detectorParedes+0x48>
 8001510:	4b2f      	ldr	r3, [pc, #188]	@ (80015d0 <detectorParedes+0xe4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b03      	cmp	r3, #3
 8001516:	dd0d      	ble.n	8001534 <detectorParedes+0x48>
		mapa[pos - 4].pared[orientacion + 2] = true;
 8001518:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <detectorParedes+0xe4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001520:	3b04      	subs	r3, #4
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	441a      	add	r2, r3
 8001528:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <detectorParedes+0xe8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3302      	adds	r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	2201      	movs	r2, #1
 8001532:	711a      	strb	r2, [r3, #4]

	if (orientacion == 2 && pos < 12)
 8001534:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <detectorParedes+0xe8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d10f      	bne.n	800155c <detectorParedes+0x70>
 800153c:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <detectorParedes+0xe4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b0b      	cmp	r3, #11
 8001542:	dc0b      	bgt.n	800155c <detectorParedes+0x70>
		mapa[pos + 4].pared[orientacion - 2] = true;
 8001544:	4b22      	ldr	r3, [pc, #136]	@ (80015d0 <detectorParedes+0xe4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3304      	adds	r3, #4
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	441a      	add	r2, r3
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <detectorParedes+0xe8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3b02      	subs	r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	2201      	movs	r2, #1
 800155a:	711a      	strb	r2, [r3, #4]

	if (orientacion == 3 && (pos % 4 != 0))
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <detectorParedes+0xe8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d113      	bne.n	800158c <detectorParedes+0xa0>
 8001564:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <detectorParedes+0xe4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00d      	beq.n	800158c <detectorParedes+0xa0>
		mapa[pos - 1].pared[orientacion - 2] = true;
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <detectorParedes+0xe4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001578:	3b01      	subs	r3, #1
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	441a      	add	r2, r3
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <detectorParedes+0xe8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3b02      	subs	r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	2201      	movs	r2, #1
 800158a:	711a      	strb	r2, [r3, #4]

	if (orientacion == 1 && (pos % 4 != 3))
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <detectorParedes+0xe8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d116      	bne.n	80015c2 <detectorParedes+0xd6>
 8001594:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <detectorParedes+0xe4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	425a      	negs	r2, r3
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	bf58      	it	pl
 80015a4:	4253      	negpl	r3, r2
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d00b      	beq.n	80015c2 <detectorParedes+0xd6>
		mapa[pos + 1].pared[orientacion + 2] = true;
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <detectorParedes+0xe4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	441a      	add	r2, r3
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <detectorParedes+0xe8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3302      	adds	r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	2201      	movs	r2, #1
 80015c0:	711a      	strb	r2, [r3, #4]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	2000047c 	.word	0x2000047c
 80015d4:	20000480 	.word	0x20000480

080015d8 <InicializarMapa>:

void InicializarMapa(celda *mapa) {
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

	for (int x = 0; x < 16; x++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e047      	b.n	8001676 <InicializarMapa+0x9e>

		mapa[x].peso = 15;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	220f      	movs	r2, #15
 80015f0:	601a      	str	r2, [r3, #0]
		for (int d = 0; d < 4; d++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	e038      	b.n	800166a <InicializarMapa+0x92>
			mapa[x].pared[d] = false;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	441a      	add	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4413      	add	r3, r2
 8001604:	3304      	adds	r3, #4
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]

			if (x < 4)                          // estoy en borde superior
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b03      	cmp	r3, #3
 800160e:	dc05      	bgt.n	800161c <InicializarMapa+0x44>
				mapa[x].pared[0] = true;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	2201      	movs	r2, #1
 800161a:	711a      	strb	r2, [r3, #4]
			if (x > 11)                         // estoy en borde inferior
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b0b      	cmp	r3, #11
 8001620:	dd05      	ble.n	800162e <InicializarMapa+0x56>
				mapa[x].pared[2] = true;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	2201      	movs	r2, #1
 800162c:	719a      	strb	r2, [r3, #6]
			if (x % 4 == 3)                  // estoy en borde derecho
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	425a      	negs	r2, r3
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	f002 0203 	and.w	r2, r2, #3
 800163a:	bf58      	it	pl
 800163c:	4253      	negpl	r3, r2
 800163e:	2b03      	cmp	r3, #3
 8001640:	d105      	bne.n	800164e <InicializarMapa+0x76>
				mapa[x].pared[1] = true;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	2201      	movs	r2, #1
 800164c:	715a      	strb	r2, [r3, #5]
			if (x % 4 == 0)                  // estoy en borde izquierdo
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <InicializarMapa+0x8c>
				mapa[x].pared[3] = true;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	2201      	movs	r2, #1
 8001662:	71da      	strb	r2, [r3, #7]
		for (int d = 0; d < 4; d++) {
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3301      	adds	r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b03      	cmp	r3, #3
 800166e:	ddc3      	ble.n	80015f8 <InicializarMapa+0x20>
	for (int x = 0; x < 16; x++) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	ddb4      	ble.n	80015e6 <InicializarMapa+0xe>
		}

	}
	mapa[0].peso = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <ActualizarPesos>:

void ActualizarPesos(celda *mapa) {
 8001690:	b490      	push	{r4, r7}
 8001692:	b08a      	sub	sp, #40	@ 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	int peso_min_vecino = INF;
 8001698:	2311      	movs	r3, #17
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
	int offset[4] = { -4, 1, +4, -1 }; // norte=0 offset con el vecino -4, este=0 offset con el vecino +1
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <ActualizarPesos+0xac>)
 800169e:	f107 040c 	add.w	r4, r7, #12
 80016a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int i = 1; i < 16; i++) {           //elijo casilla
 80016a8:	2301      	movs	r3, #1
 80016aa:	623b      	str	r3, [r7, #32]
 80016ac:	e03d      	b.n	800172a <ActualizarPesos+0x9a>
		for (int j = 0; j < 4; j++) {          //elijo dir
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e02b      	b.n	800170c <ActualizarPesos+0x7c>
			if (!mapa[i].pared[j] && peso_min_vecino > mapa[i + offset[j]].peso) { // si no hay pared en esa dir y peso en esa dir es menor que el minimo actual de los vecinos
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	441a      	add	r2, r3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	3304      	adds	r3, #4
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	f083 0301 	eor.w	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01b      	beq.n	8001706 <ActualizarPesos+0x76>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	3328      	adds	r3, #40	@ 0x28
 80016d4:	443b      	add	r3, r7
 80016d6:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dd0c      	ble.n	8001706 <ActualizarPesos+0x76>
				peso_min_vecino = mapa[i + offset[j]].peso;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	3328      	adds	r3, #40	@ 0x28
 80016f2:	443b      	add	r3, r7
 80016f4:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < 4; j++) {          //elijo dir
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b03      	cmp	r3, #3
 8001710:	ddd0      	ble.n	80016b4 <ActualizarPesos+0x24>
			}

		}
		mapa[i].peso = peso_min_vecino + 1;
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800171c:	3201      	adds	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
		peso_min_vecino = INF;
 8001720:	2311      	movs	r3, #17
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 1; i < 16; i++) {           //elijo casilla
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	3301      	adds	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	ddbe      	ble.n	80016ae <ActualizarPesos+0x1e>
	}
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bc90      	pop	{r4, r7}
 800173a:	4770      	bx	lr
 800173c:	0800c978 	.word	0x0800c978

08001740 <ActualizarPesos10>:

void ActualizarPesos10(celda *mapa) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
	while (i < 6) {
 800174c:	e005      	b.n	800175a <ActualizarPesos10+0x1a>
		ActualizarPesos(mapa);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff9e 	bl	8001690 <ActualizarPesos>
		i++;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3301      	adds	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
	while (i < 6) {
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b05      	cmp	r3, #5
 800175e:	ddf6      	ble.n	800174e <ActualizarPesos10+0xe>
	}
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <PrioridadDeGiro>:

dir_giro PrioridadDeGiro(int dir_min1) {
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	dir_giro aux;//inicializo auxiliar
	if (orientacion == 0 && dir_min == 3)
 8001774:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <PrioridadDeGiro+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d106      	bne.n	800178a <PrioridadDeGiro+0x1e>
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <PrioridadDeGiro+0x68>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d102      	bne.n	800178a <PrioridadDeGiro+0x1e>
		aux = izq;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e01b      	b.n	80017c2 <PrioridadDeGiro+0x56>
	else if (orientacion == 3 && dir_min == 0)
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <PrioridadDeGiro+0x64>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d106      	bne.n	80017a0 <PrioridadDeGiro+0x34>
 8001792:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <PrioridadDeGiro+0x68>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <PrioridadDeGiro+0x34>
		aux = der;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e010      	b.n	80017c2 <PrioridadDeGiro+0x56>
	else if (orientacion < dir_min)
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <PrioridadDeGiro+0x64>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <PrioridadDeGiro+0x68>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	da02      	bge.n	80017b2 <PrioridadDeGiro+0x46>
		aux = der;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e007      	b.n	80017c2 <PrioridadDeGiro+0x56>
	else if (orientacion > dir_min)
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <PrioridadDeGiro+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <PrioridadDeGiro+0x68>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	dd01      	ble.n	80017c2 <PrioridadDeGiro+0x56>
		aux = izq;
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]
	return aux;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	20000480 	.word	0x20000480
 80017d4:	20000508 	.word	0x20000508

080017d8 <Calibrar_Sensores>:


void Calibrar_Sensores(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	                                      //caca

while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80017dc:	e00b      	b.n	80017f6 <Calibrar_Sensores+0x1e>
	EncenderLed(2);
 80017de:	2002      	movs	r0, #2
 80017e0:	f000 f98a 	bl	8001af8 <EncenderLed>
HAL_Delay(100);
 80017e4:	2064      	movs	r0, #100	@ 0x64
 80017e6:	f000 fda5 	bl	8002334 <HAL_Delay>
ApagarLed(2);
 80017ea:	2002      	movs	r0, #2
 80017ec:	f000 f9b2 	bl	8001b54 <ApagarLed>
HAL_Delay(100);
 80017f0:	2064      	movs	r0, #100	@ 0x64
 80017f2:	f000 fd9f 	bl	8002334 <HAL_Delay>
while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80017f6:	2101      	movs	r1, #1
 80017f8:	4816      	ldr	r0, [pc, #88]	@ (8001854 <Calibrar_Sensores+0x7c>)
 80017fa:	f002 f871 	bl	80038e0 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ec      	beq.n	80017de <Calibrar_Sensores+0x6>
}


UMBRAL_DERECHO=sensor_der_avg;
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <Calibrar_Sensores+0x80>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <Calibrar_Sensores+0x84>)
 800180c:	801a      	strh	r2, [r3, #0]
HAL_Delay(3000);
 800180e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001812:	f000 fd8f 	bl	8002334 <HAL_Delay>


while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001816:	e00b      	b.n	8001830 <Calibrar_Sensores+0x58>
	EncenderLed(2);
 8001818:	2002      	movs	r0, #2
 800181a:	f000 f96d 	bl	8001af8 <EncenderLed>
HAL_Delay(100);
 800181e:	2064      	movs	r0, #100	@ 0x64
 8001820:	f000 fd88 	bl	8002334 <HAL_Delay>
ApagarLed(2);
 8001824:	2002      	movs	r0, #2
 8001826:	f000 f995 	bl	8001b54 <ApagarLed>
HAL_Delay(100);
 800182a:	2064      	movs	r0, #100	@ 0x64
 800182c:	f000 fd82 	bl	8002334 <HAL_Delay>
while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001830:	2101      	movs	r1, #1
 8001832:	4808      	ldr	r0, [pc, #32]	@ (8001854 <Calibrar_Sensores+0x7c>)
 8001834:	f002 f854 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0ec      	beq.n	8001818 <Calibrar_Sensores+0x40>
}

UMBRAL_IZQUIERDO=sensor_izq_avg;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <Calibrar_Sensores+0x88>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <Calibrar_Sensores+0x8c>)
 8001846:	801a      	strh	r2, [r3, #0]

HAL_Delay(2000);
 8001848:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800184c:	f000 fd72 	bl	8002334 <HAL_Delay>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40020000 	.word	0x40020000
 8001858:	2000046c 	.word	0x2000046c
 800185c:	20000510 	.word	0x20000510
 8001860:	2000046e 	.word	0x2000046e
 8001864:	20000512 	.word	0x20000512

08001868 <DirMin>:



int DirMin(celda *mapa) {
 8001868:	b480      	push	{r7}
 800186a:	b08b      	sub	sp, #44	@ 0x2c
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	int minimo = 0;   //orientacion final
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
	int pesos[4];   //orden intermedio antes de fijar muros
	int i;   //variable auxiliar

	////sujeto a variar con eleccion
	pesos[0] = mapa[pos - 4].peso;   //inicializo variable peso norte
 8001874:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <DirMin+0xc8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800187c:	3b04      	subs	r3, #4
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60fb      	str	r3, [r7, #12]
	pesos[1] = mapa[pos + 1].peso;   //inicializo variable peso este
 8001888:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <DirMin+0xc8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
	pesos[2] = mapa[pos + 4].peso;   //inicializo variable peso sur
 8001898:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <DirMin+0xc8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3304      	adds	r3, #4
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	617b      	str	r3, [r7, #20]
	pesos[3] = mapa[pos - 1].peso;   //inicializo variable peso oeste
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <DirMin+0xc8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80018b0:	3b01      	subs	r3, #1
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	61bb      	str	r3, [r7, #24]
	for (i = 0; i <= 3; i++)   //miro paredes
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	e014      	b.n	80018ec <DirMin+0x84>
		if (mapa[pos].pared[i])
 80018c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <DirMin+0xc8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	441a      	add	r2, r3
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	4413      	add	r3, r2
 80018d0:	3304      	adds	r3, #4
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <DirMin+0x7e>
			pesos[i] = 15;
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	3328      	adds	r3, #40	@ 0x28
 80018de:	443b      	add	r3, r7
 80018e0:	220f      	movs	r2, #15
 80018e2:	f843 2c1c 	str.w	r2, [r3, #-28]
	for (i = 0; i <= 3; i++)   //miro paredes
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	3301      	adds	r3, #1
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	dde7      	ble.n	80018c2 <DirMin+0x5a>
	//////////////////
	int pesominimo = pesos[0];
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 3; i++) //para buscar el peso minimo (se puede invertir la prioridad de NESO a OSEN con cambiar de > a >=)
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
 80018fa:	e00f      	b.n	800191c <DirMin+0xb4>
		if (pesominimo > pesos[i + 1])
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	3301      	adds	r3, #1
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	3328      	adds	r3, #40	@ 0x28
 8001904:	443b      	add	r3, r7
 8001906:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	429a      	cmp	r2, r3
 800190e:	dd02      	ble.n	8001916 <DirMin+0xae>
			minimo = i + 1;
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	3301      	adds	r3, #1
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0; i < 3; i++) //para buscar el peso minimo (se puede invertir la prioridad de NESO a OSEN con cambiar de > a >=)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	3301      	adds	r3, #1
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	2b02      	cmp	r3, #2
 8001920:	ddec      	ble.n	80018fc <DirMin+0x94>

	return minimo;
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001924:	4618      	mov	r0, r3
 8001926:	372c      	adds	r7, #44	@ 0x2c
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	2000047c 	.word	0x2000047c

08001934 <HAL_GPIO_EXTI_Callback>:

// rutina de atencion de interrupciones

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
	ENTRE_INT=1;
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_GPIO_EXTI_Callback+0x38>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_6) {
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	2b40      	cmp	r3, #64	@ 0x40
 8001948:	d103      	bne.n	8001952 <HAL_GPIO_EXTI_Callback+0x1e>

		pared = 1;
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x3c>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_7) {

		linea = 1;

}
}
 8001950:	e005      	b.n	800195e <HAL_GPIO_EXTI_Callback+0x2a>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	2b80      	cmp	r3, #128	@ 0x80
 8001956:	d102      	bne.n	800195e <HAL_GPIO_EXTI_Callback+0x2a>
		linea = 1;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x40>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000478 	.word	0x20000478
 8001970:	20000474 	.word	0x20000474
 8001974:	20000470 	.word	0x20000470

08001978 <HAL_ADC_ConvHalfCpltCallback>:

// Rutina de antención a la interrupción de buffer a mitad
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	if (hadc->Instance == ADC1) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a09      	ldr	r2, [pc, #36]	@ (80019ac <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d103      	bne.n	8001992 <HAL_ADC_ConvHalfCpltCallback+0x1a>
		Promediar1(&dma_buffer1[0]);
 800198a:	4809      	ldr	r0, [pc, #36]	@ (80019b0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800198c:	f000 f838 	bl	8001a00 <Promediar1>
	} else if (hadc->Instance == ADC2) {
		Promediar2(&dma_buffer2[0]);
	}
}
 8001990:	e007      	b.n	80019a2 <HAL_ADC_ConvHalfCpltCallback+0x2a>
	} else if (hadc->Instance == ADC2) {
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a07      	ldr	r2, [pc, #28]	@ (80019b4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d102      	bne.n	80019a2 <HAL_ADC_ConvHalfCpltCallback+0x2a>
		Promediar2(&dma_buffer2[0]);
 800199c:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 800199e:	f000 f855 	bl	8001a4c <Promediar2>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40012000 	.word	0x40012000
 80019b0:	2000036c 	.word	0x2000036c
 80019b4:	40012100 	.word	0x40012100
 80019b8:	200003ec 	.word	0x200003ec

080019bc <HAL_ADC_ConvCpltCallback>:
// Rutina de antención a la interrupción de buffer a tope
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	if (hadc->Instance == ADC1) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <HAL_ADC_ConvCpltCallback+0x34>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d103      	bne.n	80019d6 <HAL_ADC_ConvCpltCallback+0x1a>
		Promediar1(&dma_buffer1[BUFFER_MINIMO]);
 80019ce:	4809      	ldr	r0, [pc, #36]	@ (80019f4 <HAL_ADC_ConvCpltCallback+0x38>)
 80019d0:	f000 f816 	bl	8001a00 <Promediar1>
	} else if (hadc->Instance == ADC2) {
		Promediar2(&dma_buffer2[BUFFER_MINIMO]);
	}
}
 80019d4:	e007      	b.n	80019e6 <HAL_ADC_ConvCpltCallback+0x2a>
	} else if (hadc->Instance == ADC2) {
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d102      	bne.n	80019e6 <HAL_ADC_ConvCpltCallback+0x2a>
		Promediar2(&dma_buffer2[BUFFER_MINIMO]);
 80019e0:	4806      	ldr	r0, [pc, #24]	@ (80019fc <HAL_ADC_ConvCpltCallback+0x40>)
 80019e2:	f000 f833 	bl	8001a4c <Promediar2>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40012000 	.word	0x40012000
 80019f4:	200003ac 	.word	0x200003ac
 80019f8:	40012100 	.word	0x40012100
 80019fc:	2000042c 	.word	0x2000042c

08001a00 <Promediar1>:

// Calcula los promedios de ADC1
void Promediar1(uint16_t *buffer) {
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
// Inicializamos variables para acumular la suma de las muestras
	uint32_t sum = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
// Ralizamos la suma incrementando el puntero a las muestras
	for (int i = 0; i < MUESTRAS; ++i) {
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	e00b      	b.n	8001a2a <Promediar1+0x2a>
		sum += buffer[0];
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
		buffer += 1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3302      	adds	r3, #2
 8001a22:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MUESTRAS; ++i) {
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	ddf0      	ble.n	8001a12 <Promediar1+0x12>
	}
// Dividimos las sumas para obtener el promedio
#if SEL_AUTITO == 1
	sensor_der_avg = sum / MUESTRAS;
#else
		sensor_izq_avg = sum / MUESTRAS;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <Promediar1+0x48>)
 8001a38:	801a      	strh	r2, [r3, #0]
	#endif
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000046e 	.word	0x2000046e

08001a4c <Promediar2>:

// Calcula los promedios de ADC2
void Promediar2(uint16_t *buffer) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
// Inicializamos variables para acumular la suma de las muestras
	uint32_t sum = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
// Ralizamos la suma incrementando el puntero a las muestras
	for (int i = 0; i < MUESTRAS; ++i) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	e00b      	b.n	8001a76 <Promediar2+0x2a>
		sum += buffer[0];
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
		buffer += 1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MUESTRAS; ++i) {
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	3301      	adds	r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	ddf0      	ble.n	8001a5e <Promediar2+0x12>
	}
// Dividimos las sumas para obtener el promedio

#if SEL_AUTITO == 0
	sensor_izq_avg = sum / MUESTRAS;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <Promediar2+0x48>)
 8001a84:	801a      	strh	r2, [r3, #0]
#else
		sensor_der_avg = sum / MUESTRAS;
	#endif
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000046e 	.word	0x2000046e

08001a98 <EncenderTodos>:

void EncenderTodos(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001aa2:	4808      	ldr	r0, [pc, #32]	@ (8001ac4 <EncenderTodos+0x2c>)
 8001aa4:	f001 ff34 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aae:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <EncenderTodos+0x2c>)
 8001ab0:	f001 ff2e 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aba:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <EncenderTodos+0x2c>)
 8001abc:	f001 ff28 	bl	8003910 <HAL_GPIO_WritePin>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40020c00 	.word	0x40020c00

08001ac8 <ApagarTodos>:

void ApagarTodos(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ad2:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <ApagarTodos+0x2c>)
 8001ad4:	f001 ff1c 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <ApagarTodos+0x2c>)
 8001ae0:	f001 ff16 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aea:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <ApagarTodos+0x2c>)
 8001aec:	f001 ff10 	bl	8003910 <HAL_GPIO_WritePin>
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <EncenderLed>:

void EncenderLed(int numero) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	switch (numero) {
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d017      	beq.n	8001b36 <EncenderLed+0x3e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	dc1b      	bgt.n	8001b44 <EncenderLed+0x4c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d003      	beq.n	8001b1a <EncenderLed+0x22>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d007      	beq.n	8001b28 <EncenderLed+0x30>
	case 3:
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
		break;
	default:
		// Número inválido
		break;
 8001b18:	e014      	b.n	8001b44 <EncenderLed+0x4c>
		HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b20:	480b      	ldr	r0, [pc, #44]	@ (8001b50 <EncenderLed+0x58>)
 8001b22:	f001 fef5 	bl	8003910 <HAL_GPIO_WritePin>
		break;
 8001b26:	e00e      	b.n	8001b46 <EncenderLed+0x4e>
		HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b2e:	4808      	ldr	r0, [pc, #32]	@ (8001b50 <EncenderLed+0x58>)
 8001b30:	f001 feee 	bl	8003910 <HAL_GPIO_WritePin>
		break;
 8001b34:	e007      	b.n	8001b46 <EncenderLed+0x4e>
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <EncenderLed+0x58>)
 8001b3e:	f001 fee7 	bl	8003910 <HAL_GPIO_WritePin>
		break;
 8001b42:	e000      	b.n	8001b46 <EncenderLed+0x4e>
		break;
 8001b44:	bf00      	nop
	}
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40020c00 	.word	0x40020c00

08001b54 <ApagarLed>:

void ApagarLed(int numero) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	switch (numero) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d017      	beq.n	8001b92 <ApagarLed+0x3e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	dc1b      	bgt.n	8001ba0 <ApagarLed+0x4c>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d003      	beq.n	8001b76 <ApagarLed+0x22>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d007      	beq.n	8001b84 <ApagarLed+0x30>
	case 3:
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
		break;
	default:
		// Número inválido
		break;
 8001b74:	e014      	b.n	8001ba0 <ApagarLed+0x4c>
		HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b7c:	480b      	ldr	r0, [pc, #44]	@ (8001bac <ApagarLed+0x58>)
 8001b7e:	f001 fec7 	bl	8003910 <HAL_GPIO_WritePin>
		break;
 8001b82:	e00e      	b.n	8001ba2 <ApagarLed+0x4e>
		HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b8a:	4808      	ldr	r0, [pc, #32]	@ (8001bac <ApagarLed+0x58>)
 8001b8c:	f001 fec0 	bl	8003910 <HAL_GPIO_WritePin>
		break;
 8001b90:	e007      	b.n	8001ba2 <ApagarLed+0x4e>
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <ApagarLed+0x58>)
 8001b9a:	f001 feb9 	bl	8003910 <HAL_GPIO_WritePin>
		break;
 8001b9e:	e000      	b.n	8001ba2 <ApagarLed+0x4e>
		break;
 8001ba0:	bf00      	nop
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40020c00 	.word	0x40020c00

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <Error_Handler+0x8>

08001bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a08      	ldr	r2, [pc, #32]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bfa:	2007      	movs	r0, #7
 8001bfc:	f001 f890 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	@ 0x30
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5e      	ldr	r2, [pc, #376]	@ (8001da4 <HAL_ADC_MspInit+0x198>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d158      	bne.n	8001ce0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	4b5d      	ldr	r3, [pc, #372]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a5c      	ldr	r2, [pc, #368]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	4b56      	ldr	r3, [pc, #344]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a55      	ldr	r2, [pc, #340]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b53      	ldr	r3, [pc, #332]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	484c      	ldr	r0, [pc, #304]	@ (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001c7a:	f001 fc95 	bl	80035a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001c80:	4a4c      	ldr	r2, [pc, #304]	@ (8001db4 <HAL_ADC_MspInit+0x1a8>)
 8001c82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c84:	4b4a      	ldr	r3, [pc, #296]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c8a:	4b49      	ldr	r3, [pc, #292]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c90:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c96:	4b46      	ldr	r3, [pc, #280]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001c98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c9e:	4b44      	ldr	r3, [pc, #272]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001ca0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ca4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ca6:	4b42      	ldr	r3, [pc, #264]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001ca8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cae:	4b40      	ldr	r3, [pc, #256]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cb4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cbc:	4b3c      	ldr	r3, [pc, #240]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cc2:	483b      	ldr	r0, [pc, #236]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001cc4:	f001 f86e 	bl	8002da4 <HAL_DMA_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001cce:	f7ff ff6f 	bl	8001bb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a36      	ldr	r2, [pc, #216]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cd8:	4a35      	ldr	r2, [pc, #212]	@ (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cde:	e05d      	b.n	8001d9c <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a34      	ldr	r2, [pc, #208]	@ (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d158      	bne.n	8001d9c <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001cf4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b27      	ldr	r3, [pc, #156]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a26      	ldr	r2, [pc, #152]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	481d      	ldr	r0, [pc, #116]	@ (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001d36:	f001 fc37 	bl	80035a8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d3c:	4a20      	ldr	r2, [pc, #128]	@ (8001dc0 <HAL_ADC_MspInit+0x1b4>)
 8001d3e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d46:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d5a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d5c:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d62:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d6a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001d6c:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d72:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001d80:	480e      	ldr	r0, [pc, #56]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d82:	f001 f80f 	bl	8002da4 <HAL_DMA_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8001d8c:	f7ff ff10 	bl	8001bb0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d94:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d96:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d9c:	bf00      	nop
 8001d9e:	3730      	adds	r7, #48	@ 0x30
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40012000 	.word	0x40012000
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020400 	.word	0x40020400
 8001db0:	20000128 	.word	0x20000128
 8001db4:	40026410 	.word	0x40026410
 8001db8:	40012100 	.word	0x40012100
 8001dbc:	20000188 	.word	0x20000188
 8001dc0:	40026440 	.word	0x40026440

08001dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	@ 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	@ (8001e48 <HAL_I2C_MspInit+0x84>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12c      	bne.n	8001e40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_I2C_MspInit+0x88>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <HAL_I2C_MspInit+0x88>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_I2C_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e02:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e08:	2312      	movs	r3, #18
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e14:	2304      	movs	r3, #4
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <HAL_I2C_MspInit+0x8c>)
 8001e20:	f001 fbc2 	bl	80035a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <HAL_I2C_MspInit+0x88>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <HAL_I2C_MspInit+0x88>)
 8001e2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_I2C_MspInit+0x88>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	@ 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40005400 	.word	0x40005400
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020400 	.word	0x40020400

08001e54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <HAL_SPI_MspInit+0x84>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12b      	bne.n	8001ece <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_SPI_MspInit+0x88>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <HAL_SPI_MspInit+0x88>)
 8001e80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_SPI_MspInit+0x88>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_SPI_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a10      	ldr	r2, [pc, #64]	@ (8001edc <HAL_SPI_MspInit+0x88>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_SPI_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001eae:	23e0      	movs	r3, #224	@ 0xe0
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <HAL_SPI_MspInit+0x8c>)
 8001eca:	f001 fb6d 	bl	80035a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	@ 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40013000 	.word	0x40013000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a15      	ldr	r2, [pc, #84]	@ (8001f48 <HAL_TIM_Base_MspInit+0x64>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d10e      	bne.n	8001f14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <HAL_TIM_Base_MspInit+0x68>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <HAL_TIM_Base_MspInit+0x68>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HAL_TIM_Base_MspInit+0x68>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001f12:	e012      	b.n	8001f3a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <HAL_TIM_Base_MspInit+0x6c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d10d      	bne.n	8001f3a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_TIM_Base_MspInit+0x68>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <HAL_TIM_Base_MspInit+0x68>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <HAL_TIM_Base_MspInit+0x68>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40002000 	.word	0x40002000

08001f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a12      	ldr	r2, [pc, #72]	@ (8001fbc <HAL_TIM_MspPostInit+0x68>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d11e      	bne.n	8001fb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_TIM_MspPostInit+0x6c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a10      	ldr	r2, [pc, #64]	@ (8001fc0 <HAL_TIM_MspPostInit+0x6c>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <HAL_TIM_MspPostInit+0x6c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	4619      	mov	r1, r3
 8001fae:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <HAL_TIM_MspPostInit+0x70>)
 8001fb0:	f001 fafa 	bl	80035a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020800 	.word	0x40020800

08001fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8002098 <HAL_UART_MspInit+0xd0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d152      	bne.n	8002090 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b2b      	ldr	r3, [pc, #172]	@ (800209c <HAL_UART_MspInit+0xd4>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800209c <HAL_UART_MspInit+0xd4>)
 8001ff4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b28      	ldr	r3, [pc, #160]	@ (800209c <HAL_UART_MspInit+0xd4>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_UART_MspInit+0xd4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a23      	ldr	r2, [pc, #140]	@ (800209c <HAL_UART_MspInit+0xd4>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_UART_MspInit+0xd4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <HAL_UART_MspInit+0xd4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a1c      	ldr	r2, [pc, #112]	@ (800209c <HAL_UART_MspInit+0xd4>)
 800202c:	f043 0308 	orr.w	r3, r3, #8
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <HAL_UART_MspInit+0xd4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800203e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002050:	2308      	movs	r3, #8
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	4811      	ldr	r0, [pc, #68]	@ (80020a0 <HAL_UART_MspInit+0xd8>)
 800205c:	f001 faa4 	bl	80035a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002060:	2304      	movs	r3, #4
 8002062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002070:	2308      	movs	r3, #8
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	480a      	ldr	r0, [pc, #40]	@ (80020a4 <HAL_UART_MspInit+0xdc>)
 800207c:	f001 fa94 	bl	80035a8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	2035      	movs	r0, #53	@ 0x35
 8002086:	f000 fe56 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800208a:	2035      	movs	r0, #53	@ 0x35
 800208c:	f000 fe6f 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3728      	adds	r7, #40	@ 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40005000 	.word	0x40005000
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020c00 	.word	0x40020c00

080020a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <NMI_Handler+0x4>

080020b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <HardFault_Handler+0x4>

080020b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <MemManage_Handler+0x4>

080020c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <BusFault_Handler+0x4>

080020c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <UsageFault_Handler+0x4>

080020d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020fe:	f000 f8f9 	bl	80022f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}

08002106 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pared_delante_Pin);
 800210a:	2040      	movs	r0, #64	@ 0x40
 800210c:	f001 fc1a 	bl	8003944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor_linea_Pin);
 8002110:	2080      	movs	r0, #128	@ 0x80
 8002112:	f001 fc17 	bl	8003944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <UART5_IRQHandler+0x10>)
 8002122:	f005 fb29 	bl	8007778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000324 	.word	0x20000324

08002130 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002134:	4802      	ldr	r0, [pc, #8]	@ (8002140 <DMA2_Stream0_IRQHandler+0x10>)
 8002136:	f000 ffcd 	bl	80030d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000128 	.word	0x20000128

08002144 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002148:	4802      	ldr	r0, [pc, #8]	@ (8002154 <DMA2_Stream2_IRQHandler+0x10>)
 800214a:	f000 ffc3 	bl	80030d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000188 	.word	0x20000188

08002158 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800215c:	4802      	ldr	r0, [pc, #8]	@ (8002168 <OTG_FS_IRQHandler+0x10>)
 800215e:	f001 fee9 	bl	8003f34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000910 	.word	0x20000910

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f00a f822 	bl	800c1e4 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20020000 	.word	0x20020000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	2000052c 	.word	0x2000052c
 80021d4:	20000e38 	.word	0x20000e38

080021d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <SystemInit+0x20>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	4a05      	ldr	r2, [pc, #20]	@ (80021f8 <SystemInit+0x20>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 80021fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002234 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002200:	f7ff ffea 	bl	80021d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002204:	480c      	ldr	r0, [pc, #48]	@ (8002238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002206:	490d      	ldr	r1, [pc, #52]	@ (800223c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002208:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800221c:	4c0a      	ldr	r4, [pc, #40]	@ (8002248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222a:	f009 ffe1 	bl	800c1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222e:	f7fe f9bf 	bl	80005b0 <main>
  bx  lr    
 8002232:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800223c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002240:	0800c9f0 	.word	0x0800c9f0
  ldr r2, =_sbss
 8002244:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002248:	20000e38 	.word	0x20000e38

0800224c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800224c:	e7fe      	b.n	800224c <ADC_IRQHandler>
	...

08002250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002254:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0d      	ldr	r2, [pc, #52]	@ (8002290 <HAL_Init+0x40>)
 800225a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800225e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <HAL_Init+0x40>)
 8002266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800226a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226c:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <HAL_Init+0x40>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002278:	2003      	movs	r0, #3
 800227a:	f000 fd51 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800227e:	2000      	movs	r0, #0
 8002280:	f000 f808 	bl	8002294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002284:	f7ff fc9a 	bl	8001bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023c00 	.word	0x40023c00

08002294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_InitTick+0x54>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <HAL_InitTick+0x58>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fd69 	bl	8002d8a <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e00e      	b.n	80022e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d80a      	bhi.n	80022de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c8:	2200      	movs	r2, #0
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f000 fd31 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d4:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <HAL_InitTick+0x5c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000008 	.word	0x20000008
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	20000530 	.word	0x20000530

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	@ (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000530 	.word	0x20000530

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008

0800237c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e033      	b.n	80023fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fc36 	bl	8001c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023c2:	f023 0302 	bic.w	r3, r3, #2
 80023c6:	f043 0202 	orr.w	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa58 	bl	8002884 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	f023 0303 	bic.w	r3, r3, #3
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80023ea:	e001      	b.n	80023f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_ADC_Start_DMA+0x22>
 8002422:	2302      	movs	r3, #2
 8002424:	e0eb      	b.n	80025fe <HAL_ADC_Start_DMA+0x1fa>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d018      	beq.n	800246e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800244c:	4b6e      	ldr	r3, [pc, #440]	@ (8002608 <HAL_ADC_Start_DMA+0x204>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6e      	ldr	r2, [pc, #440]	@ (800260c <HAL_ADC_Start_DMA+0x208>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0c9a      	lsrs	r2, r3, #18
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002460:	e002      	b.n	8002468 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3b01      	subs	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800247c:	d107      	bne.n	800248e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800248c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	f040 80a3 	bne.w	80025e4 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024dc:	d106      	bne.n	80024ec <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f023 0206 	bic.w	r2, r3, #6
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80024ea:	e002      	b.n	80024f2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024fa:	4b45      	ldr	r3, [pc, #276]	@ (8002610 <HAL_ADC_Start_DMA+0x20c>)
 80024fc:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002502:	4a44      	ldr	r2, [pc, #272]	@ (8002614 <HAL_ADC_Start_DMA+0x210>)
 8002504:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250a:	4a43      	ldr	r2, [pc, #268]	@ (8002618 <HAL_ADC_Start_DMA+0x214>)
 800250c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002512:	4a42      	ldr	r2, [pc, #264]	@ (800261c <HAL_ADC_Start_DMA+0x218>)
 8002514:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800251e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800252e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800253e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	334c      	adds	r3, #76	@ 0x4c
 800254a:	4619      	mov	r1, r3
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f000 fcd6 	bl	8002f00 <HAL_DMA_Start_IT>
 8002554:	4603      	mov	r3, r0
 8002556:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2b00      	cmp	r3, #0
 8002562:	d12a      	bne.n	80025ba <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a2d      	ldr	r2, [pc, #180]	@ (8002620 <HAL_ADC_Start_DMA+0x21c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d015      	beq.n	800259a <HAL_ADC_Start_DMA+0x196>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2c      	ldr	r2, [pc, #176]	@ (8002624 <HAL_ADC_Start_DMA+0x220>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d105      	bne.n	8002584 <HAL_ADC_Start_DMA+0x180>
 8002578:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <HAL_ADC_Start_DMA+0x20c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a27      	ldr	r2, [pc, #156]	@ (8002628 <HAL_ADC_Start_DMA+0x224>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d136      	bne.n	80025fc <HAL_ADC_Start_DMA+0x1f8>
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_ADC_Start_DMA+0x20c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d130      	bne.n	80025fc <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d129      	bne.n	80025fc <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	e020      	b.n	80025fc <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a18      	ldr	r2, [pc, #96]	@ (8002620 <HAL_ADC_Start_DMA+0x21c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d11b      	bne.n	80025fc <HAL_ADC_Start_DMA+0x1f8>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d114      	bne.n	80025fc <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	e00b      	b.n	80025fc <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	f043 0210 	orr.w	r2, r3, #16
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80025fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000000 	.word	0x20000000
 800260c:	431bde83 	.word	0x431bde83
 8002610:	40012300 	.word	0x40012300
 8002614:	08002a7d 	.word	0x08002a7d
 8002618:	08002b37 	.word	0x08002b37
 800261c:	08002b53 	.word	0x08002b53
 8002620:	40012000 	.word	0x40012000
 8002624:	40012100 	.word	0x40012100
 8002628:	40012200 	.word	0x40012200

0800262c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1c>
 8002658:	2302      	movs	r3, #2
 800265a:	e105      	b.n	8002868 <HAL_ADC_ConfigChannel+0x228>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b09      	cmp	r3, #9
 800266a:	d925      	bls.n	80026b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68d9      	ldr	r1, [r3, #12]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	3b1e      	subs	r3, #30
 8002682:	2207      	movs	r2, #7
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43da      	mvns	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	400a      	ands	r2, r1
 8002690:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	4603      	mov	r3, r0
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4403      	add	r3, r0
 80026aa:	3b1e      	subs	r3, #30
 80026ac:	409a      	lsls	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	e022      	b.n	80026fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	2207      	movs	r2, #7
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	400a      	ands	r2, r1
 80026da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6919      	ldr	r1, [r3, #16]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	4618      	mov	r0, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4403      	add	r3, r0
 80026f4:	409a      	lsls	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b06      	cmp	r3, #6
 8002704:	d824      	bhi.n	8002750 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	3b05      	subs	r3, #5
 8002718:	221f      	movs	r2, #31
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	400a      	ands	r2, r1
 8002726:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b05      	subs	r3, #5
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	635a      	str	r2, [r3, #52]	@ 0x34
 800274e:	e04c      	b.n	80027ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d824      	bhi.n	80027a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3b23      	subs	r3, #35	@ 0x23
 800276a:	221f      	movs	r2, #31
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43da      	mvns	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	400a      	ands	r2, r1
 8002778:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3b23      	subs	r3, #35	@ 0x23
 8002794:	fa00 f203 	lsl.w	r2, r0, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a0:	e023      	b.n	80027ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	3b41      	subs	r3, #65	@ 0x41
 80027b4:	221f      	movs	r2, #31
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	400a      	ands	r2, r1
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4618      	mov	r0, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	3b41      	subs	r3, #65	@ 0x41
 80027de:	fa00 f203 	lsl.w	r2, r0, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ea:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <HAL_ADC_ConfigChannel+0x234>)
 80027ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a21      	ldr	r2, [pc, #132]	@ (8002878 <HAL_ADC_ConfigChannel+0x238>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d109      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1cc>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b12      	cmp	r3, #18
 80027fe:	d105      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a19      	ldr	r2, [pc, #100]	@ (8002878 <HAL_ADC_ConfigChannel+0x238>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d123      	bne.n	800285e <HAL_ADC_ConfigChannel+0x21e>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b10      	cmp	r3, #16
 800281c:	d003      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x1e6>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b11      	cmp	r3, #17
 8002824:	d11b      	bne.n	800285e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b10      	cmp	r3, #16
 8002838:	d111      	bne.n	800285e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800283a:	4b10      	ldr	r3, [pc, #64]	@ (800287c <HAL_ADC_ConfigChannel+0x23c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a10      	ldr	r2, [pc, #64]	@ (8002880 <HAL_ADC_ConfigChannel+0x240>)
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	0c9a      	lsrs	r2, r3, #18
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002850:	e002      	b.n	8002858 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3b01      	subs	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f9      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40012300 	.word	0x40012300
 8002878:	40012000 	.word	0x40012000
 800287c:	20000000 	.word	0x20000000
 8002880:	431bde83 	.word	0x431bde83

08002884 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800288c:	4b79      	ldr	r3, [pc, #484]	@ (8002a74 <ADC_Init+0x1f0>)
 800288e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	021a      	lsls	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	4a58      	ldr	r2, [pc, #352]	@ (8002a78 <ADC_Init+0x1f4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800292a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800294c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e00f      	b.n	8002982 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002970:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002980:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0202 	bic.w	r2, r2, #2
 8002990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e1b      	ldrb	r3, [r3, #24]
 800299c:	005a      	lsls	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	3b01      	subs	r3, #1
 80029dc:	035a      	lsls	r2, r3, #13
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e007      	b.n	80029f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	051a      	lsls	r2, r3, #20
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6899      	ldr	r1, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a3a:	025a      	lsls	r2, r3, #9
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	029a      	lsls	r2, r3, #10
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40012300 	.word	0x40012300
 8002a78:	0f000001 	.word	0x0f000001

08002a7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d13c      	bne.n	8002b10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d12b      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d127      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d119      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0220 	bic.w	r2, r2, #32
 8002ae2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7fe ff57 	bl	80019bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b0e:	e00e      	b.n	8002b2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff fd85 	bl	800262c <HAL_ADC_ErrorCallback>
}
 8002b22:	e004      	b.n	8002b2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7fe ff17 	bl	8001978 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2240      	movs	r2, #64	@ 0x40
 8002b64:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff fd5a 	bl	800262c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0307 	and.w	r3, r3, #7
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db0b      	blt.n	8002c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4907      	ldr	r1, [pc, #28]	@ (8002c1c <__NVIC_EnableIRQ+0x38>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2001      	movs	r0, #1
 8002c06:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0a      	blt.n	8002c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	490c      	ldr	r1, [pc, #48]	@ (8002c6c <__NVIC_SetPriority+0x4c>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	440b      	add	r3, r1
 8002c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c48:	e00a      	b.n	8002c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4908      	ldr	r1, [pc, #32]	@ (8002c70 <__NVIC_SetPriority+0x50>)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3b04      	subs	r3, #4
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	761a      	strb	r2, [r3, #24]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e100 	.word	0xe000e100
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	@ 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f1c3 0307 	rsb	r3, r3, #7
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf28      	it	cs
 8002c92:	2304      	movcs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d902      	bls.n	8002ca4 <NVIC_EncodePriority+0x30>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b03      	subs	r3, #3
 8002ca2:	e000      	b.n	8002ca6 <NVIC_EncodePriority+0x32>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43d9      	mvns	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	4313      	orrs	r3, r2
         );
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	@ 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f7ff ff8e 	bl	8002c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff29 	bl	8002b80 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff3e 	bl	8002bc8 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff8e 	bl	8002c74 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5d 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff31 	bl	8002be4 <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff fab4 	bl	800231c <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e099      	b.n	8002ef4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de0:	e00f      	b.n	8002e02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de2:	f7ff fa9b 	bl	800231c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d908      	bls.n	8002e02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e078      	b.n	8002ef4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e8      	bne.n	8002de2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <HAL_DMA_Init+0x158>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d107      	bne.n	8002e6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	4313      	orrs	r3, r2
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f023 0307 	bic.w	r3, r3, #7
 8002e82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d117      	bne.n	8002ec6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fb01 	bl	80034b0 <DMA_CheckFifoParam>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2240      	movs	r2, #64	@ 0x40
 8002eb8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e016      	b.n	8002ef4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fab8 	bl	8003444 <DMA_CalcBaseAndBitshift>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	223f      	movs	r2, #63	@ 0x3f
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	f010803f 	.word	0xf010803f

08002f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_DMA_Start_IT+0x26>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e040      	b.n	8002fa8 <HAL_DMA_Start_IT+0xa8>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d12f      	bne.n	8002f9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fa4a 	bl	80033e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f58:	223f      	movs	r2, #63	@ 0x3f
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0216 	orr.w	r2, r2, #22
 8002f6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0208 	orr.w	r2, r2, #8
 8002f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e005      	b.n	8002fa6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fbe:	f7ff f9ad 	bl	800231c <HAL_GetTick>
 8002fc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d008      	beq.n	8002fe2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2280      	movs	r2, #128	@ 0x80
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e052      	b.n	8003088 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0216 	bic.w	r2, r2, #22
 8002ff0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003000:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <HAL_DMA_Abort+0x62>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0208 	bic.w	r2, r2, #8
 8003020:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003032:	e013      	b.n	800305c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003034:	f7ff f972 	bl	800231c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b05      	cmp	r3, #5
 8003040:	d90c      	bls.n	800305c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2203      	movs	r2, #3
 800304c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e015      	b.n	8003088 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e4      	bne.n	8003034 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306e:	223f      	movs	r2, #63	@ 0x3f
 8003070:	409a      	lsls	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d004      	beq.n	80030ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2280      	movs	r2, #128	@ 0x80
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e00c      	b.n	80030c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2205      	movs	r2, #5
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030e0:	4b8e      	ldr	r3, [pc, #568]	@ (800331c <HAL_DMA_IRQHandler+0x248>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a8e      	ldr	r2, [pc, #568]	@ (8003320 <HAL_DMA_IRQHandler+0x24c>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fe:	2208      	movs	r2, #8
 8003100:	409a      	lsls	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01a      	beq.n	8003140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0204 	bic.w	r2, r2, #4
 8003126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	2208      	movs	r2, #8
 800312e:	409a      	lsls	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003144:	2201      	movs	r2, #1
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d012      	beq.n	8003176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003162:	2201      	movs	r2, #1
 8003164:	409a      	lsls	r2, r3
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316e:	f043 0202 	orr.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317a:	2204      	movs	r2, #4
 800317c:	409a      	lsls	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d012      	beq.n	80031ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003198:	2204      	movs	r2, #4
 800319a:	409a      	lsls	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a4:	f043 0204 	orr.w	r2, r3, #4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b0:	2210      	movs	r2, #16
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d043      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d03c      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	2210      	movs	r2, #16
 80031d0:	409a      	lsls	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d024      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
 8003202:	e01f      	b.n	8003244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01b      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e016      	b.n	8003244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d107      	bne.n	8003234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0208 	bic.w	r2, r2, #8
 8003232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	2220      	movs	r2, #32
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 808f 	beq.w	8003374 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8087 	beq.w	8003374 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326a:	2220      	movs	r2, #32
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b05      	cmp	r3, #5
 800327c:	d136      	bne.n	80032ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0216 	bic.w	r2, r2, #22
 800328c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800329c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <HAL_DMA_IRQHandler+0x1da>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0208 	bic.w	r2, r2, #8
 80032bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	223f      	movs	r2, #63	@ 0x3f
 80032c4:	409a      	lsls	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d07e      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
        }
        return;
 80032ea:	e079      	b.n	80033e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10d      	bne.n	8003324 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330c:	2b00      	cmp	r3, #0
 800330e:	d031      	beq.n	8003374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
 8003318:	e02c      	b.n	8003374 <HAL_DMA_IRQHandler+0x2a0>
 800331a:	bf00      	nop
 800331c:	20000000 	.word	0x20000000
 8003320:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d023      	beq.n	8003374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
 8003334:	e01e      	b.n	8003374 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10f      	bne.n	8003364 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0210 	bic.w	r2, r2, #16
 8003352:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	2b00      	cmp	r3, #0
 800337a:	d032      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d022      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2205      	movs	r2, #5
 800338c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d307      	bcc.n	80033bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f2      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x2cc>
 80033ba:	e000      	b.n	80033be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
 80033de:	e000      	b.n	80033e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033e0:	bf00      	nop
    }
  }
}
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b40      	cmp	r3, #64	@ 0x40
 8003414:	d108      	bne.n	8003428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003426:	e007      	b.n	8003438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	60da      	str	r2, [r3, #12]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3b10      	subs	r3, #16
 8003454:	4a14      	ldr	r2, [pc, #80]	@ (80034a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800345e:	4a13      	ldr	r2, [pc, #76]	@ (80034ac <DMA_CalcBaseAndBitshift+0x68>)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d909      	bls.n	8003486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	1d1a      	adds	r2, r3, #4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	659a      	str	r2, [r3, #88]	@ 0x58
 8003484:	e007      	b.n	8003496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	aaaaaaab 	.word	0xaaaaaaab
 80034ac:	0800c9a4 	.word	0x0800c9a4

080034b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d11f      	bne.n	800350a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d856      	bhi.n	800357e <DMA_CheckFifoParam+0xce>
 80034d0:	a201      	add	r2, pc, #4	@ (adr r2, 80034d8 <DMA_CheckFifoParam+0x28>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034fb 	.word	0x080034fb
 80034e0:	080034e9 	.word	0x080034e9
 80034e4:	0800357f 	.word	0x0800357f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d046      	beq.n	8003582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f8:	e043      	b.n	8003582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003502:	d140      	bne.n	8003586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003508:	e03d      	b.n	8003586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003512:	d121      	bne.n	8003558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d837      	bhi.n	800358a <DMA_CheckFifoParam+0xda>
 800351a:	a201      	add	r2, pc, #4	@ (adr r2, 8003520 <DMA_CheckFifoParam+0x70>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	08003531 	.word	0x08003531
 8003524:	08003537 	.word	0x08003537
 8003528:	08003531 	.word	0x08003531
 800352c:	08003549 	.word	0x08003549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e030      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d025      	beq.n	800358e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003546:	e022      	b.n	800358e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003550:	d11f      	bne.n	8003592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003556:	e01c      	b.n	8003592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d903      	bls.n	8003566 <DMA_CheckFifoParam+0xb6>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d003      	beq.n	800356c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003564:	e018      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
      break;
 800356a:	e015      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
      break;
 800357c:	e00b      	b.n	8003596 <DMA_CheckFifoParam+0xe6>
      break;
 800357e:	bf00      	nop
 8003580:	e00a      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 8003582:	bf00      	nop
 8003584:	e008      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 8003586:	bf00      	nop
 8003588:	e006      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e004      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;   
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 8003596:	bf00      	nop
    }
  } 
  
  return status; 
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop

080035a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	@ 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e16b      	b.n	800389c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c4:	2201      	movs	r2, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f040 815a 	bne.w	8003896 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d005      	beq.n	80035fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d130      	bne.n	800365c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003630:	2201      	movs	r2, #1
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 0201 	and.w	r2, r3, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b03      	cmp	r3, #3
 8003666:	d017      	beq.n	8003698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d123      	bne.n	80036ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	220f      	movs	r2, #15
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	69b9      	ldr	r1, [r7, #24]
 80036e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0203 	and.w	r2, r3, #3
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80b4 	beq.w	8003896 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b60      	ldr	r3, [pc, #384]	@ (80038b4 <HAL_GPIO_Init+0x30c>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	4a5f      	ldr	r2, [pc, #380]	@ (80038b4 <HAL_GPIO_Init+0x30c>)
 8003738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800373c:	6453      	str	r3, [r2, #68]	@ 0x44
 800373e:	4b5d      	ldr	r3, [pc, #372]	@ (80038b4 <HAL_GPIO_Init+0x30c>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374a:	4a5b      	ldr	r2, [pc, #364]	@ (80038b8 <HAL_GPIO_Init+0x310>)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3302      	adds	r3, #2
 8003752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a52      	ldr	r2, [pc, #328]	@ (80038bc <HAL_GPIO_Init+0x314>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02b      	beq.n	80037ce <HAL_GPIO_Init+0x226>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a51      	ldr	r2, [pc, #324]	@ (80038c0 <HAL_GPIO_Init+0x318>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d025      	beq.n	80037ca <HAL_GPIO_Init+0x222>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a50      	ldr	r2, [pc, #320]	@ (80038c4 <HAL_GPIO_Init+0x31c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <HAL_GPIO_Init+0x21e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4f      	ldr	r2, [pc, #316]	@ (80038c8 <HAL_GPIO_Init+0x320>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d019      	beq.n	80037c2 <HAL_GPIO_Init+0x21a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4e      	ldr	r2, [pc, #312]	@ (80038cc <HAL_GPIO_Init+0x324>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_GPIO_Init+0x216>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4d      	ldr	r2, [pc, #308]	@ (80038d0 <HAL_GPIO_Init+0x328>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_GPIO_Init+0x212>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4c      	ldr	r2, [pc, #304]	@ (80038d4 <HAL_GPIO_Init+0x32c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <HAL_GPIO_Init+0x20e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	@ (80038d8 <HAL_GPIO_Init+0x330>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_GPIO_Init+0x20a>
 80037ae:	2307      	movs	r3, #7
 80037b0:	e00e      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037b2:	2308      	movs	r3, #8
 80037b4:	e00c      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037b6:	2306      	movs	r3, #6
 80037b8:	e00a      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037ba:	2305      	movs	r3, #5
 80037bc:	e008      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037be:	2304      	movs	r3, #4
 80037c0:	e006      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037c2:	2303      	movs	r3, #3
 80037c4:	e004      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e002      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037ce:	2300      	movs	r3, #0
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f002 0203 	and.w	r2, r2, #3
 80037d6:	0092      	lsls	r2, r2, #2
 80037d8:	4093      	lsls	r3, r2
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037e0:	4935      	ldr	r1, [pc, #212]	@ (80038b8 <HAL_GPIO_Init+0x310>)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ee:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <HAL_GPIO_Init+0x334>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003812:	4a32      	ldr	r2, [pc, #200]	@ (80038dc <HAL_GPIO_Init+0x334>)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003818:	4b30      	ldr	r3, [pc, #192]	@ (80038dc <HAL_GPIO_Init+0x334>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800383c:	4a27      	ldr	r2, [pc, #156]	@ (80038dc <HAL_GPIO_Init+0x334>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003842:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <HAL_GPIO_Init+0x334>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003866:	4a1d      	ldr	r2, [pc, #116]	@ (80038dc <HAL_GPIO_Init+0x334>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800386c:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <HAL_GPIO_Init+0x334>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003890:	4a12      	ldr	r2, [pc, #72]	@ (80038dc <HAL_GPIO_Init+0x334>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3301      	adds	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b0f      	cmp	r3, #15
 80038a0:	f67f ae90 	bls.w	80035c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3724      	adds	r7, #36	@ 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40013800 	.word	0x40013800
 80038bc:	40020000 	.word	0x40020000
 80038c0:	40020400 	.word	0x40020400
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020c00 	.word	0x40020c00
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40021400 	.word	0x40021400
 80038d4:	40021800 	.word	0x40021800
 80038d8:	40021c00 	.word	0x40021c00
 80038dc:	40013c00 	.word	0x40013c00

080038e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e001      	b.n	8003902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800392c:	e003      	b.n	8003936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	041a      	lsls	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	619a      	str	r2, [r3, #24]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800394e:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d006      	beq.n	8003968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800395a:	4a05      	ldr	r2, [pc, #20]	@ (8003970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd ffe6 	bl	8001934 <HAL_GPIO_EXTI_Callback>
  }
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40013c00 	.word	0x40013c00

08003974 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af02      	add	r7, sp, #8
 800397a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e059      	b.n	8003a3a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f008 f87d 	bl	800baa0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2203      	movs	r2, #3
 80039aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039b4:	d102      	bne.n	80039bc <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f004 fe8a 	bl	80086da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7c1a      	ldrb	r2, [r3, #16]
 80039ce:	f88d 2000 	strb.w	r2, [sp]
 80039d2:	3304      	adds	r3, #4
 80039d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039d6:	f004 fe0b 	bl	80085f0 <USB_CoreInit>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e026      	b.n	8003a3a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f004 fe82 	bl	80086fc <USB_SetCurrentMode>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e017      	b.n	8003a3a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7c1a      	ldrb	r2, [r3, #16]
 8003a12:	f88d 2000 	strb.w	r2, [sp]
 8003a16:	3304      	adds	r3, #4
 8003a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a1a:	f005 f82b 	bl	8008a74 <USB_HostInit>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e004      	b.n	8003a3a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003a42:	b590      	push	{r4, r7, lr}
 8003a44:	b08b      	sub	sp, #44	@ 0x2c
 8003a46:	af04      	add	r7, sp, #16
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4603      	mov	r3, r0
 8003a52:	70fb      	strb	r3, [r7, #3]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70bb      	strb	r3, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003a5c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003a5e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_HCD_HC_Init+0x2c>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e09d      	b.n	8003baa <HAL_HCD_HC_Init+0x168>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	3319      	adds	r3, #25
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3314      	adds	r3, #20
 8003a9a:	787a      	ldrb	r2, [r7, #1]
 8003a9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3315      	adds	r3, #21
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3326      	adds	r3, #38	@ 0x26
 8003ac2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003ac6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	78bb      	ldrb	r3, [r7, #2]
 8003acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ad0:	b2d8      	uxtb	r0, r3
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3316      	adds	r3, #22
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fbc7 	bl	800427c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003aee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	da0a      	bge.n	8003b0c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	3317      	adds	r3, #23
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e009      	b.n	8003b20 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3317      	adds	r3, #23
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f005 f909 	bl	8008d3c <USB_GetHostSpeed>
 8003b2a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003b2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d10b      	bne.n	8003b4c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003b34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d107      	bne.n	8003b4c <HAL_HCD_HC_Init+0x10a>
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2bbc      	cmp	r3, #188	@ 0xbc
 8003b46:	d901      	bls.n	8003b4c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003b48:	23bc      	movs	r3, #188	@ 0xbc
 8003b4a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3318      	adds	r3, #24
 8003b5c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003b60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	b298      	uxth	r0, r3
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	3328      	adds	r3, #40	@ 0x28
 8003b76:	4602      	mov	r2, r0
 8003b78:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	787c      	ldrb	r4, [r7, #1]
 8003b84:	78ba      	ldrb	r2, [r7, #2]
 8003b86:	78f9      	ldrb	r1, [r7, #3]
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	4623      	mov	r3, r4
 8003b98:	f005 f8f8 	bl	8008d8c <USB_HC_Init>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd90      	pop	{r4, r7, pc}

08003bb2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_HCD_HC_Halt+0x1e>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e00f      	b.n	8003bf0 <HAL_HCD_HC_Halt+0x3e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f005 fc8a 	bl	80094fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	70fb      	strb	r3, [r7, #3]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70bb      	strb	r3, [r7, #2]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	3317      	adds	r3, #23
 8003c22:	78ba      	ldrb	r2, [r7, #2]
 8003c24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	3326      	adds	r3, #38	@ 0x26
 8003c36:	787a      	ldrb	r2, [r7, #1]
 8003c38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003c3a:	7c3b      	ldrb	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d114      	bne.n	8003c6a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	332a      	adds	r3, #42	@ 0x2a
 8003c50:	2203      	movs	r2, #3
 8003c52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	3319      	adds	r3, #25
 8003c64:	7f3a      	ldrb	r2, [r7, #28]
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e009      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	332a      	adds	r3, #42	@ 0x2a
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003c7e:	787b      	ldrb	r3, [r7, #1]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	f200 8102 	bhi.w	8003e8a <HAL_HCD_HC_SubmitRequest+0x292>
 8003c86:	a201      	add	r2, pc, #4	@ (adr r2, 8003c8c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003e75 	.word	0x08003e75
 8003c94:	08003d61 	.word	0x08003d61
 8003c98:	08003deb 	.word	0x08003deb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003c9c:	7c3b      	ldrb	r3, [r7, #16]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	f040 80f5 	bne.w	8003e8e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003ca4:	78bb      	ldrb	r3, [r7, #2]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d12d      	bne.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003caa:	8b3b      	ldrh	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	333d      	adds	r3, #61	@ 0x3d
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	333d      	adds	r3, #61	@ 0x3d
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	332a      	adds	r3, #42	@ 0x2a
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003cee:	e0ce      	b.n	8003e8e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	332a      	adds	r3, #42	@ 0x2a
 8003d00:	2202      	movs	r2, #2
 8003d02:	701a      	strb	r2, [r3, #0]
      break;
 8003d04:	e0c3      	b.n	8003e8e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	331a      	adds	r3, #26
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 80b8 	bne.w	8003e8e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	333c      	adds	r3, #60	@ 0x3c
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	332a      	adds	r3, #42	@ 0x2a
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
      break;
 8003d48:	e0a1      	b.n	8003e8e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	332a      	adds	r3, #42	@ 0x2a
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
      break;
 8003d5e:	e096      	b.n	8003e8e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003d60:	78bb      	ldrb	r3, [r7, #2]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d120      	bne.n	8003da8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	333d      	adds	r3, #61	@ 0x3d
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	332a      	adds	r3, #42	@ 0x2a
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003d90:	e07e      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	332a      	adds	r3, #42	@ 0x2a
 8003da2:	2202      	movs	r2, #2
 8003da4:	701a      	strb	r2, [r3, #0]
      break;
 8003da6:	e073      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	333c      	adds	r3, #60	@ 0x3c
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	332a      	adds	r3, #42	@ 0x2a
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
      break;
 8003dd2:	e05d      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	332a      	adds	r3, #42	@ 0x2a
 8003de4:	2202      	movs	r2, #2
 8003de6:	701a      	strb	r2, [r3, #0]
      break;
 8003de8:	e052      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003dea:	78bb      	ldrb	r3, [r7, #2]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d120      	bne.n	8003e32 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	333d      	adds	r3, #61	@ 0x3d
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	332a      	adds	r3, #42	@ 0x2a
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e1a:	e039      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	332a      	adds	r3, #42	@ 0x2a
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	701a      	strb	r2, [r3, #0]
      break;
 8003e30:	e02e      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	333c      	adds	r3, #60	@ 0x3c
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	332a      	adds	r3, #42	@ 0x2a
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
      break;
 8003e5c:	e018      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	332a      	adds	r3, #42	@ 0x2a
 8003e6e:	2202      	movs	r2, #2
 8003e70:	701a      	strb	r2, [r3, #0]
      break;
 8003e72:	e00d      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	332a      	adds	r3, #42	@ 0x2a
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
      break;
 8003e88:	e002      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003e8e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	332c      	adds	r3, #44	@ 0x2c
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	8b39      	ldrh	r1, [r7, #24]
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4403      	add	r3, r0
 8003eb4:	3334      	adds	r3, #52	@ 0x34
 8003eb6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	334c      	adds	r3, #76	@ 0x4c
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3338      	adds	r3, #56	@ 0x38
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3315      	adds	r3, #21
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	334d      	adds	r3, #77	@ 0x4d
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	3310      	adds	r3, #16
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	1d19      	adds	r1, r3, #4
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	799b      	ldrb	r3, [r3, #6]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f005 f85e 	bl	8008fe4 <USB_HC_StartXfer>
 8003f28:	4603      	mov	r3, r0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop

08003f34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f004 fd4c 	bl	80089e8 <USB_GetMode>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	f040 80fb 	bne.w	800414e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f004 fd0f 	bl	8008980 <USB_ReadInterrupts>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80f1 	beq.w	800414c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f004 fd06 	bl	8008980 <USB_ReadInterrupts>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f7e:	d104      	bne.n	8003f8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003f88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f004 fcf6 	bl	8008980 <USB_ReadInterrupts>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9e:	d104      	bne.n	8003faa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003fa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f004 fce6 	bl	8008980 <USB_ReadInterrupts>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fbe:	d104      	bne.n	8003fca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003fc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f004 fcd6 	bl	8008980 <USB_ReadInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d103      	bne.n	8003fe6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 fcc8 	bl	8008980 <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ffa:	d120      	bne.n	800403e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004004:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d113      	bne.n	800403e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004016:	2110      	movs	r1, #16
 8004018:	6938      	ldr	r0, [r7, #16]
 800401a:	f004 fbbb 	bl	8008794 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800401e:	6938      	ldr	r0, [r7, #16]
 8004020:	f004 fbea 	bl	80087f8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	7a5b      	ldrb	r3, [r3, #9]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d105      	bne.n	8004038 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2101      	movs	r1, #1
 8004032:	4618      	mov	r0, r3
 8004034:	f004 fde2 	bl	8008bfc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f007 fdaf 	bl	800bb9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f004 fc9c 	bl	8008980 <USB_ReadInterrupts>
 8004048:	4603      	mov	r3, r0
 800404a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800404e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004052:	d102      	bne.n	800405a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f001 fd4d 	bl	8005af4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f004 fc8e 	bl	8008980 <USB_ReadInterrupts>
 8004064:	4603      	mov	r3, r0
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b08      	cmp	r3, #8
 800406c:	d106      	bne.n	800407c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f007 fd78 	bl	800bb64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2208      	movs	r2, #8
 800407a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f004 fc7d 	bl	8008980 <USB_ReadInterrupts>
 8004086:	4603      	mov	r3, r0
 8004088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004090:	d139      	bne.n	8004106 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f005 fa1e 	bl	80094d8 <USB_HC_ReadInterrupt>
 800409c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e025      	b.n	80040f0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d018      	beq.n	80040ea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ce:	d106      	bne.n	80040de <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f905 	bl	80042e6 <HCD_HC_IN_IRQHandler>
 80040dc:	e005      	b.n	80040ea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 ff67 	bl	8004fb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	3301      	adds	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	795b      	ldrb	r3, [r3, #5]
 80040f4:	461a      	mov	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d3d3      	bcc.n	80040a4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f004 fc38 	bl	8008980 <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b10      	cmp	r3, #16
 8004118:	d101      	bne.n	800411e <HAL_HCD_IRQHandler+0x1ea>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_HCD_IRQHandler+0x1ec>
 800411e:	2300      	movs	r3, #0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d014      	beq.n	800414e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0210 	bic.w	r2, r2, #16
 8004132:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f001 fbfe 	bl	8005936 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0210 	orr.w	r2, r2, #16
 8004148:	619a      	str	r2, [r3, #24]
 800414a:	e000      	b.n	800414e <HAL_HCD_IRQHandler+0x21a>
      return;
 800414c:	bf00      	nop
    }
  }
}
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_HCD_Start+0x16>
 8004166:	2302      	movs	r3, #2
 8004168:	e013      	b.n	8004192 <HAL_HCD_Start+0x3e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f004 fda6 	bl	8008cca <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f004 fa98 	bl	80086b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_HCD_Stop+0x16>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e00d      	b.n	80041cc <HAL_HCD_Stop+0x32>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 faf9 	bl	80097b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f004 fd48 	bl	8008c76 <USB_ResetPort>
 80041e6:	4603      	mov	r3, r0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	334c      	adds	r3, #76	@ 0x4c
 800420c:	781b      	ldrb	r3, [r3, #0]
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	3338      	adds	r3, #56	@ 0x38
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f004 fd8a 	bl	8008d6a <USB_GetCurrentFrame>
 8004256:	4603      	mov	r3, r0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f004 fd65 	bl	8008d3c <USB_GetHostSpeed>
 8004272:	4603      	mov	r3, r0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	331a      	adds	r3, #26
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	331b      	adds	r3, #27
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80042b0:	78fa      	ldrb	r2, [r7, #3]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	3325      	adds	r3, #37	@ 0x25
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3324      	adds	r3, #36	@ 0x24
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	4611      	mov	r1, r2
 8004304:	4618      	mov	r0, r3
 8004306:	f004 fb4e 	bl	80089a6 <USB_ReadChInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d11a      	bne.n	800434a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004320:	461a      	mov	r2, r3
 8004322:	2304      	movs	r3, #4
 8004324:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	334d      	adds	r3, #77	@ 0x4d
 8004336:	2207      	movs	r2, #7
 8004338:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f005 f8d9 	bl	80094fa <USB_HC_Halt>
 8004348:	e09e      	b.n	8004488 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f004 fb27 	bl	80089a6 <USB_ReadChInterrupts>
 8004358:	4603      	mov	r3, r0
 800435a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004362:	d11b      	bne.n	800439c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004370:	461a      	mov	r2, r3
 8004372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004376:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	334d      	adds	r3, #77	@ 0x4d
 8004388:	2208      	movs	r2, #8
 800438a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f005 f8b0 	bl	80094fa <USB_HC_Halt>
 800439a:	e075      	b.n	8004488 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f004 fafe 	bl	80089a6 <USB_ReadChInterrupts>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d11a      	bne.n	80043ea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c0:	461a      	mov	r2, r3
 80043c2:	2308      	movs	r3, #8
 80043c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	334d      	adds	r3, #77	@ 0x4d
 80043d6:	2206      	movs	r2, #6
 80043d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f005 f889 	bl	80094fa <USB_HC_Halt>
 80043e8:	e04e      	b.n	8004488 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f004 fad7 	bl	80089a6 <USB_ReadChInterrupts>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004402:	d11b      	bne.n	800443c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004410:	461a      	mov	r2, r3
 8004412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004416:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	2209      	movs	r2, #9
 800442a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f005 f860 	bl	80094fa <USB_HC_Halt>
 800443a:	e025      	b.n	8004488 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f004 faae 	bl	80089a6 <USB_ReadChInterrupts>
 800444a:	4603      	mov	r3, r0
 800444c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004450:	2b80      	cmp	r3, #128	@ 0x80
 8004452:	d119      	bne.n	8004488 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004460:	461a      	mov	r2, r3
 8004462:	2380      	movs	r3, #128	@ 0x80
 8004464:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	334d      	adds	r3, #77	@ 0x4d
 8004476:	2207      	movs	r2, #7
 8004478:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f005 f839 	bl	80094fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f004 fa88 	bl	80089a6 <USB_ReadChInterrupts>
 8004496:	4603      	mov	r3, r0
 8004498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800449c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a0:	d112      	bne.n	80044c8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f005 f825 	bl	80094fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044bc:	461a      	mov	r2, r3
 80044be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044c2:	6093      	str	r3, [r2, #8]
 80044c4:	f000 bd75 	b.w	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f004 fa68 	bl	80089a6 <USB_ReadChInterrupts>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	f040 8128 	bne.w	8004732 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ee:	461a      	mov	r2, r3
 80044f0:	2320      	movs	r3, #32
 80044f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	331b      	adds	r3, #27
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d119      	bne.n	800453e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	331b      	adds	r3, #27
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	440a      	add	r2, r1
 8004534:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	799b      	ldrb	r3, [r3, #6]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01b      	beq.n	800457e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	3330      	adds	r3, #48	@ 0x30
 8004556:	6819      	ldr	r1, [r3, #0]
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	1ac9      	subs	r1, r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4403      	add	r3, r0
 800457a:	3338      	adds	r3, #56	@ 0x38
 800457c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800457e:	78fa      	ldrb	r2, [r7, #3]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	334d      	adds	r3, #77	@ 0x4d
 800458e:	2201      	movs	r2, #1
 8004590:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	3344      	adds	r3, #68	@ 0x44
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b2:	461a      	mov	r2, r3
 80045b4:	2301      	movs	r3, #1
 80045b6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	3326      	adds	r3, #38	@ 0x26
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3326      	adds	r3, #38	@ 0x26
 80045de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d110      	bne.n	8004606 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f004 ff84 	bl	80094fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fe:	461a      	mov	r2, r3
 8004600:	2310      	movs	r3, #16
 8004602:	6093      	str	r3, [r2, #8]
 8004604:	e03d      	b.n	8004682 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	3326      	adds	r3, #38	@ 0x26
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d00a      	beq.n	8004632 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3326      	adds	r3, #38	@ 0x26
 800462c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800462e:	2b01      	cmp	r3, #1
 8004630:	d127      	bne.n	8004682 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	440a      	add	r2, r1
 8004648:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800464c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004650:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	334c      	adds	r3, #76	@ 0x4c
 8004662:	2201      	movs	r2, #1
 8004664:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	334c      	adds	r3, #76	@ 0x4c
 8004676:	781a      	ldrb	r2, [r3, #0]
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f007 fa9b 	bl	800bbb8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	799b      	ldrb	r3, [r3, #6]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d13b      	bne.n	8004702 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	3338      	adds	r3, #56	@ 0x38
 800469a:	6819      	ldr	r1, [r3, #0]
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4403      	add	r3, r0
 80046aa:	3328      	adds	r3, #40	@ 0x28
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	440b      	add	r3, r1
 80046b0:	1e59      	subs	r1, r3, #1
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4403      	add	r3, r0
 80046c0:	3328      	adds	r3, #40	@ 0x28
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8470 	beq.w	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	333c      	adds	r3, #60	@ 0x3c
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	78fa      	ldrb	r2, [r7, #3]
 80046e6:	f083 0301 	eor.w	r3, r3, #1
 80046ea:	b2d8      	uxtb	r0, r3
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	333c      	adds	r3, #60	@ 0x3c
 80046fa:	4602      	mov	r2, r0
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	f000 bc58 	b.w	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004702:	78fa      	ldrb	r2, [r7, #3]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	333c      	adds	r3, #60	@ 0x3c
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	f083 0301 	eor.w	r3, r3, #1
 800471a:	b2d8      	uxtb	r0, r3
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	333c      	adds	r3, #60	@ 0x3c
 800472a:	4602      	mov	r2, r0
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	f000 bc40 	b.w	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	4611      	mov	r1, r2
 800473a:	4618      	mov	r0, r3
 800473c:	f004 f933 	bl	80089a6 <USB_ReadChInterrupts>
 8004740:	4603      	mov	r3, r0
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b20      	cmp	r3, #32
 8004748:	d131      	bne.n	80047ae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004756:	461a      	mov	r2, r3
 8004758:	2320      	movs	r3, #32
 800475a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	331a      	adds	r3, #26
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b01      	cmp	r3, #1
 8004770:	f040 841f 	bne.w	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	331b      	adds	r3, #27
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	334d      	adds	r3, #77	@ 0x4d
 8004798:	2203      	movs	r2, #3
 800479a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f004 fea8 	bl	80094fa <USB_HC_Halt>
 80047aa:	f000 bc02 	b.w	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f004 f8f5 	bl	80089a6 <USB_ReadChInterrupts>
 80047bc:	4603      	mov	r3, r0
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	f040 8305 	bne.w	8004dd2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d4:	461a      	mov	r2, r3
 80047d6:	2302      	movs	r3, #2
 80047d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	334d      	adds	r3, #77	@ 0x4d
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d114      	bne.n	800481a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	334d      	adds	r3, #77	@ 0x4d
 8004800:	2202      	movs	r2, #2
 8004802:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	334c      	adds	r3, #76	@ 0x4c
 8004814:	2201      	movs	r2, #1
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	e2cc      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	334d      	adds	r3, #77	@ 0x4d
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b06      	cmp	r3, #6
 800482e:	d114      	bne.n	800485a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	334d      	adds	r3, #77	@ 0x4d
 8004840:	2202      	movs	r2, #2
 8004842:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	334c      	adds	r3, #76	@ 0x4c
 8004854:	2205      	movs	r2, #5
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	e2ac      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	334d      	adds	r3, #77	@ 0x4d
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b07      	cmp	r3, #7
 800486e:	d00b      	beq.n	8004888 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	334d      	adds	r3, #77	@ 0x4d
 8004880:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004882:	2b09      	cmp	r3, #9
 8004884:	f040 80a6 	bne.w	80049d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	334d      	adds	r3, #77	@ 0x4d
 8004898:	2202      	movs	r2, #2
 800489a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	3344      	adds	r3, #68	@ 0x44
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1c59      	adds	r1, r3, #1
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4403      	add	r3, r0
 80048bc:	3344      	adds	r3, #68	@ 0x44
 80048be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048c0:	78fa      	ldrb	r2, [r7, #3]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	3344      	adds	r3, #68	@ 0x44
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d943      	bls.n	800495e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	3344      	adds	r3, #68	@ 0x44
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80048ea:	78fa      	ldrb	r2, [r7, #3]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	331a      	adds	r3, #26
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d123      	bne.n	8004948 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	331b      	adds	r3, #27
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	331c      	adds	r3, #28
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	440a      	add	r2, r1
 800493e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004946:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	334c      	adds	r3, #76	@ 0x4c
 8004958:	2204      	movs	r2, #4
 800495a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800495c:	e229      	b.n	8004db2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	334c      	adds	r3, #76	@ 0x4c
 800496e:	2202      	movs	r2, #2
 8004970:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3326      	adds	r3, #38	@ 0x26
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00b      	beq.n	80049a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	3326      	adds	r3, #38	@ 0x26
 8004998:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800499a:	2b02      	cmp	r3, #2
 800499c:	f040 8209 	bne.w	8004db2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049cc:	461a      	mov	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049d2:	e1ee      	b.n	8004db2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	334d      	adds	r3, #77	@ 0x4d
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	f040 80c8 	bne.w	8004b7c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	334d      	adds	r3, #77	@ 0x4d
 80049fc:	2202      	movs	r2, #2
 80049fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	331b      	adds	r3, #27
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	f040 81ce 	bne.w	8004db4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	3326      	adds	r3, #38	@ 0x26
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d16b      	bne.n	8004b06 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3348      	adds	r3, #72	@ 0x48
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1c59      	adds	r1, r3, #1
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4403      	add	r3, r0
 8004a4e:	3348      	adds	r3, #72	@ 0x48
 8004a50:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3348      	adds	r3, #72	@ 0x48
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d943      	bls.n	8004af0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	3348      	adds	r3, #72	@ 0x48
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	331b      	adds	r3, #27
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	3344      	adds	r3, #68	@ 0x44
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d809      	bhi.n	8004aba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	331c      	adds	r3, #28
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ad8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	334c      	adds	r3, #76	@ 0x4c
 8004aea:	2204      	movs	r2, #4
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e014      	b.n	8004b1a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	334c      	adds	r3, #76	@ 0x4c
 8004b00:	2202      	movs	r2, #2
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e009      	b.n	8004b1a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	334c      	adds	r3, #76	@ 0x4c
 8004b16:	2202      	movs	r2, #2
 8004b18:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	3326      	adds	r3, #38	@ 0x26
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3326      	adds	r3, #38	@ 0x26
 8004b40:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	f040 8136 	bne.w	8004db4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b5e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b66:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b74:	461a      	mov	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e11b      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	334d      	adds	r3, #77	@ 0x4d
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	f040 8081 	bne.w	8004c96 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	334d      	adds	r3, #77	@ 0x4d
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	331b      	adds	r3, #27
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	f040 80fa 	bne.w	8004db4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	334c      	adds	r3, #76	@ 0x4c
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c12:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c2e:	f023 0320 	bic.w	r3, r3, #32
 8004c32:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3326      	adds	r3, #38	@ 0x26
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	3326      	adds	r3, #38	@ 0x26
 8004c5a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	f040 80a9 	bne.w	8004db4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c78:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c80:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e08e      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004c96:	78fa      	ldrb	r2, [r7, #3]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	334d      	adds	r3, #77	@ 0x4d
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d143      	bne.n	8004d34 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	334d      	adds	r3, #77	@ 0x4d
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	334c      	adds	r3, #76	@ 0x4c
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	3326      	adds	r3, #38	@ 0x26
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3326      	adds	r3, #38	@ 0x26
 8004cfa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d159      	bne.n	8004db4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d16:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d1e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e03f      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	334d      	adds	r3, #77	@ 0x4d
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d126      	bne.n	8004d98 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	334d      	adds	r3, #77	@ 0x4d
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004d5e:	78fa      	ldrb	r2, [r7, #3]
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	3344      	adds	r3, #68	@ 0x44
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	1c59      	adds	r1, r3, #1
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4403      	add	r3, r0
 8004d7e:	3344      	adds	r3, #68	@ 0x44
 8004d80:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	334c      	adds	r3, #76	@ 0x4c
 8004d92:	2204      	movs	r2, #4
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	e00d      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	334d      	adds	r3, #77	@ 0x4d
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	f000 8100 	beq.w	8004fb0 <HCD_HC_IN_IRQHandler+0xcca>
 8004db0:	e000      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004db2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	334c      	adds	r3, #76	@ 0x4c
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f006 fef4 	bl	800bbb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004dd0:	e0ef      	b.n	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f003 fde3 	bl	80089a6 <USB_ReadChInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de6:	2b40      	cmp	r3, #64	@ 0x40
 8004de8:	d12f      	bne.n	8004e4a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df6:	461a      	mov	r2, r3
 8004df8:	2340      	movs	r3, #64	@ 0x40
 8004dfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	334d      	adds	r3, #77	@ 0x4d
 8004e0c:	2205      	movs	r2, #5
 8004e0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	331a      	adds	r3, #26
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e26:	78fa      	ldrb	r2, [r7, #3]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	3344      	adds	r3, #68	@ 0x44
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	4611      	mov	r1, r2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f004 fb59 	bl	80094fa <USB_HC_Halt>
 8004e48:	e0b3      	b.n	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f003 fda7 	bl	80089a6 <USB_ReadChInterrupts>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b10      	cmp	r3, #16
 8004e60:	f040 80a7 	bne.w	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	3326      	adds	r3, #38	@ 0x26
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d11b      	bne.n	8004eb2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	3344      	adds	r3, #68	@ 0x44
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004e8e:	78fa      	ldrb	r2, [r7, #3]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	334d      	adds	r3, #77	@ 0x4d
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f004 fb25 	bl	80094fa <USB_HC_Halt>
 8004eb0:	e03f      	b.n	8004f32 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3326      	adds	r3, #38	@ 0x26
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	3326      	adds	r3, #38	@ 0x26
 8004ed8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d129      	bne.n	8004f32 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3344      	adds	r3, #68	@ 0x44
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	799b      	ldrb	r3, [r3, #6]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HCD_HC_IN_IRQHandler+0xc2a>
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	331b      	adds	r3, #27
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d110      	bne.n	8004f32 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	334d      	adds	r3, #77	@ 0x4d
 8004f20:	2204      	movs	r2, #4
 8004f22:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f004 fae4 	bl	80094fa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004f32:	78fa      	ldrb	r2, [r7, #3]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	331b      	adds	r3, #27
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d129      	bne.n	8004f9c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	331b      	adds	r3, #27
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f96:	f043 0320 	orr.w	r3, r3, #32
 8004f9a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2310      	movs	r3, #16
 8004fac:	6093      	str	r3, [r2, #8]
 8004fae:	e000      	b.n	8004fb2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004fb0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f003 fce5 	bl	80089a6 <USB_ReadChInterrupts>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d11b      	bne.n	800501e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	334d      	adds	r3, #77	@ 0x4d
 8005008:	2207      	movs	r2, #7
 800500a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f004 fa70 	bl	80094fa <USB_HC_Halt>
 800501a:	f000 bc89 	b.w	8005930 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f003 fcbd 	bl	80089a6 <USB_ReadChInterrupts>
 800502c:	4603      	mov	r3, r0
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	f040 8082 	bne.w	800513c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005044:	461a      	mov	r2, r3
 8005046:	2320      	movs	r3, #32
 8005048:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800504a:	78fa      	ldrb	r2, [r7, #3]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	3319      	adds	r3, #25
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d124      	bne.n	80050aa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3319      	adds	r3, #25
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	334c      	adds	r3, #76	@ 0x4c
 8005084:	2202      	movs	r2, #2
 8005086:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005088:	78fa      	ldrb	r2, [r7, #3]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	334d      	adds	r3, #77	@ 0x4d
 8005098:	2203      	movs	r2, #3
 800509a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	78fa      	ldrb	r2, [r7, #3]
 80050a2:	4611      	mov	r1, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f004 fa28 	bl	80094fa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	331a      	adds	r3, #26
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f040 8437 	bne.w	8005930 <HCD_HC_OUT_IRQHandler+0x978>
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	331b      	adds	r3, #27
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f040 842b 	bne.w	8005930 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3326      	adds	r3, #38	@ 0x26
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d009      	beq.n	8005104 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	331b      	adds	r3, #27
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005104:	78fa      	ldrb	r2, [r7, #3]
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	334d      	adds	r3, #77	@ 0x4d
 8005114:	2203      	movs	r2, #3
 8005116:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f004 f9ea 	bl	80094fa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	3344      	adds	r3, #68	@ 0x44
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e3f9      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f003 fc2e 	bl	80089a6 <USB_ReadChInterrupts>
 800514a:	4603      	mov	r3, r0
 800514c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005154:	d111      	bne.n	800517a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005162:	461a      	mov	r2, r3
 8005164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005168:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f004 f9c1 	bl	80094fa <USB_HC_Halt>
 8005178:	e3da      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f003 fc0f 	bl	80089a6 <USB_ReadChInterrupts>
 8005188:	4603      	mov	r3, r0
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d168      	bne.n	8005264 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	3344      	adds	r3, #68	@ 0x44
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	4611      	mov	r1, r2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f003 fbf9 	bl	80089a6 <USB_ReadChInterrupts>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ba:	2b40      	cmp	r3, #64	@ 0x40
 80051bc:	d112      	bne.n	80051e4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	3319      	adds	r3, #25
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051de:	461a      	mov	r2, r3
 80051e0:	2340      	movs	r3, #64	@ 0x40
 80051e2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80051e4:	78fa      	ldrb	r2, [r7, #3]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	331b      	adds	r3, #27
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d019      	beq.n	800522e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	331b      	adds	r3, #27
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	440a      	add	r2, r1
 8005224:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800522c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800523a:	461a      	mov	r2, r3
 800523c:	2301      	movs	r3, #1
 800523e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	334d      	adds	r3, #77	@ 0x4d
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f004 f94c 	bl	80094fa <USB_HC_Halt>
 8005262:	e365      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	4611      	mov	r1, r2
 800526c:	4618      	mov	r0, r3
 800526e:	f003 fb9a 	bl	80089a6 <USB_ReadChInterrupts>
 8005272:	4603      	mov	r3, r0
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b40      	cmp	r3, #64	@ 0x40
 800527a:	d139      	bne.n	80052f0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	334d      	adds	r3, #77	@ 0x4d
 800528c:	2205      	movs	r2, #5
 800528e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	331a      	adds	r3, #26
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	3319      	adds	r3, #25
 80052b6:	2201      	movs	r2, #1
 80052b8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80052ba:	78fa      	ldrb	r2, [r7, #3]
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	3344      	adds	r3, #68	@ 0x44
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f004 f90f 	bl	80094fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e8:	461a      	mov	r2, r3
 80052ea:	2340      	movs	r3, #64	@ 0x40
 80052ec:	6093      	str	r3, [r2, #8]
 80052ee:	e31f      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f003 fb54 	bl	80089a6 <USB_ReadChInterrupts>
 80052fe:	4603      	mov	r3, r0
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b08      	cmp	r3, #8
 8005306:	d11a      	bne.n	800533e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005314:	461a      	mov	r2, r3
 8005316:	2308      	movs	r3, #8
 8005318:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800531a:	78fa      	ldrb	r2, [r7, #3]
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	334d      	adds	r3, #77	@ 0x4d
 800532a:	2206      	movs	r2, #6
 800532c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f004 f8df 	bl	80094fa <USB_HC_Halt>
 800533c:	e2f8      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f003 fb2d 	bl	80089a6 <USB_ReadChInterrupts>
 800534c:	4603      	mov	r3, r0
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b10      	cmp	r3, #16
 8005354:	d144      	bne.n	80053e0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	3344      	adds	r3, #68	@ 0x44
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	334d      	adds	r3, #77	@ 0x4d
 800537a:	2204      	movs	r2, #4
 800537c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3319      	adds	r3, #25
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d114      	bne.n	80053be <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3318      	adds	r3, #24
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3319      	adds	r3, #25
 80053ba:	2201      	movs	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f004 f897 	bl	80094fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d8:	461a      	mov	r2, r3
 80053da:	2310      	movs	r3, #16
 80053dc:	6093      	str	r3, [r2, #8]
 80053de:	e2a7      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	78fa      	ldrb	r2, [r7, #3]
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f003 fadc 	bl	80089a6 <USB_ReadChInterrupts>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f4:	2b80      	cmp	r3, #128	@ 0x80
 80053f6:	f040 8083 	bne.w	8005500 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	799b      	ldrb	r3, [r3, #6]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d111      	bne.n	8005426 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	334d      	adds	r3, #77	@ 0x4d
 8005412:	2207      	movs	r2, #7
 8005414:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f004 f86b 	bl	80094fa <USB_HC_Halt>
 8005424:	e062      	b.n	80054ec <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005426:	78fa      	ldrb	r2, [r7, #3]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	3344      	adds	r3, #68	@ 0x44
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	1c59      	adds	r1, r3, #1
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4403      	add	r3, r0
 8005446:	3344      	adds	r3, #68	@ 0x44
 8005448:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	3344      	adds	r3, #68	@ 0x44
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d922      	bls.n	80054a6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005460:	78fa      	ldrb	r2, [r7, #3]
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	3344      	adds	r3, #68	@ 0x44
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	334c      	adds	r3, #76	@ 0x4c
 8005484:	2204      	movs	r2, #4
 8005486:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	334c      	adds	r3, #76	@ 0x4c
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f006 fb8a 	bl	800bbb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054a4:	e022      	b.n	80054ec <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054a6:	78fa      	ldrb	r2, [r7, #3]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	334c      	adds	r3, #76	@ 0x4c
 80054b6:	2202      	movs	r2, #2
 80054b8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054d0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054d8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e6:	461a      	mov	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f8:	461a      	mov	r2, r3
 80054fa:	2380      	movs	r3, #128	@ 0x80
 80054fc:	6093      	str	r3, [r2, #8]
 80054fe:	e217      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f003 fa4c 	bl	80089a6 <USB_ReadChInterrupts>
 800550e:	4603      	mov	r3, r0
 8005510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005518:	d11b      	bne.n	8005552 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	334d      	adds	r3, #77	@ 0x4d
 800552a:	2209      	movs	r2, #9
 800552c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f003 ffdf 	bl	80094fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4413      	add	r3, r2
 8005544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005548:	461a      	mov	r2, r3
 800554a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800554e:	6093      	str	r3, [r2, #8]
 8005550:	e1ee      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f003 fa23 	bl	80089a6 <USB_ReadChInterrupts>
 8005560:	4603      	mov	r3, r0
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	f040 81df 	bne.w	800592a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4413      	add	r3, r2
 8005574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005578:	461a      	mov	r2, r3
 800557a:	2302      	movs	r3, #2
 800557c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	334d      	adds	r3, #77	@ 0x4d
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	f040 8093 	bne.w	80056bc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	334d      	adds	r3, #77	@ 0x4d
 80055a6:	2202      	movs	r2, #2
 80055a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	334c      	adds	r3, #76	@ 0x4c
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	3326      	adds	r3, #38	@ 0x26
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d00b      	beq.n	80055ec <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80055d4:	78fa      	ldrb	r2, [r7, #3]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	3326      	adds	r3, #38	@ 0x26
 80055e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	f040 8190 	bne.w	800590c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	799b      	ldrb	r3, [r3, #6]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d115      	bne.n	8005620 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	333d      	adds	r3, #61	@ 0x3d
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	f083 0301 	eor.w	r3, r3, #1
 800560c:	b2d8      	uxtb	r0, r3
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	333d      	adds	r3, #61	@ 0x3d
 800561c:	4602      	mov	r2, r0
 800561e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	799b      	ldrb	r3, [r3, #6]
 8005624:	2b01      	cmp	r3, #1
 8005626:	f040 8171 	bne.w	800590c <HCD_HC_OUT_IRQHandler+0x954>
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	3334      	adds	r3, #52	@ 0x34
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8165 	beq.w	800590c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005642:	78fa      	ldrb	r2, [r7, #3]
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	3334      	adds	r3, #52	@ 0x34
 8005652:	6819      	ldr	r1, [r3, #0]
 8005654:	78fa      	ldrb	r2, [r7, #3]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4403      	add	r3, r0
 8005662:	3328      	adds	r3, #40	@ 0x28
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	440b      	add	r3, r1
 8005668:	1e59      	subs	r1, r3, #1
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4403      	add	r3, r0
 8005678:	3328      	adds	r3, #40	@ 0x28
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005680:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 813f 	beq.w	800590c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	333d      	adds	r3, #61	@ 0x3d
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	78fa      	ldrb	r2, [r7, #3]
 80056a2:	f083 0301 	eor.w	r3, r3, #1
 80056a6:	b2d8      	uxtb	r0, r3
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	333d      	adds	r3, #61	@ 0x3d
 80056b6:	4602      	mov	r2, r0
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	e127      	b.n	800590c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	334d      	adds	r3, #77	@ 0x4d
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d120      	bne.n	8005714 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	334d      	adds	r3, #77	@ 0x4d
 80056e2:	2202      	movs	r2, #2
 80056e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	331b      	adds	r3, #27
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	f040 8107 	bne.w	800590c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	334c      	adds	r3, #76	@ 0x4c
 800570e:	2202      	movs	r2, #2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e0fb      	b.n	800590c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	334d      	adds	r3, #77	@ 0x4d
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b04      	cmp	r3, #4
 8005728:	d13a      	bne.n	80057a0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	334d      	adds	r3, #77	@ 0x4d
 800573a:	2202      	movs	r2, #2
 800573c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	334c      	adds	r3, #76	@ 0x4c
 800574e:	2202      	movs	r2, #2
 8005750:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	331b      	adds	r3, #27
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	f040 80d1 	bne.w	800590c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	331b      	adds	r3, #27
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4413      	add	r3, r2
 8005786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	440a      	add	r2, r1
 8005794:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800579c:	6053      	str	r3, [r2, #4]
 800579e:	e0b5      	b.n	800590c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	334d      	adds	r3, #77	@ 0x4d
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d114      	bne.n	80057e0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057b6:	78fa      	ldrb	r2, [r7, #3]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	334d      	adds	r3, #77	@ 0x4d
 80057c6:	2202      	movs	r2, #2
 80057c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	334c      	adds	r3, #76	@ 0x4c
 80057da:	2202      	movs	r2, #2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e095      	b.n	800590c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	334d      	adds	r3, #77	@ 0x4d
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b06      	cmp	r3, #6
 80057f4:	d114      	bne.n	8005820 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	334d      	adds	r3, #77	@ 0x4d
 8005806:	2202      	movs	r2, #2
 8005808:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	334c      	adds	r3, #76	@ 0x4c
 800581a:	2205      	movs	r2, #5
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e075      	b.n	800590c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005820:	78fa      	ldrb	r2, [r7, #3]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	334d      	adds	r3, #77	@ 0x4d
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b07      	cmp	r3, #7
 8005834:	d00a      	beq.n	800584c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005836:	78fa      	ldrb	r2, [r7, #3]
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	334d      	adds	r3, #77	@ 0x4d
 8005846:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005848:	2b09      	cmp	r3, #9
 800584a:	d170      	bne.n	800592e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800584c:	78fa      	ldrb	r2, [r7, #3]
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	334d      	adds	r3, #77	@ 0x4d
 800585c:	2202      	movs	r2, #2
 800585e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	3344      	adds	r3, #68	@ 0x44
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	1c59      	adds	r1, r3, #1
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4403      	add	r3, r0
 8005880:	3344      	adds	r3, #68	@ 0x44
 8005882:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005884:	78fa      	ldrb	r2, [r7, #3]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	3344      	adds	r3, #68	@ 0x44
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d914      	bls.n	80058c4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	3344      	adds	r3, #68	@ 0x44
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80058ae:	78fa      	ldrb	r2, [r7, #3]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	334c      	adds	r3, #76	@ 0x4c
 80058be:	2204      	movs	r2, #4
 80058c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058c2:	e022      	b.n	800590a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	334c      	adds	r3, #76	@ 0x4c
 80058d4:	2202      	movs	r2, #2
 80058d6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005904:	461a      	mov	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800590a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	334c      	adds	r3, #76	@ 0x4c
 800591c:	781a      	ldrb	r2, [r3, #0]
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f006 f948 	bl	800bbb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005928:	e002      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800592e:	bf00      	nop
  }
}
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b08a      	sub	sp, #40	@ 0x28
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	0c5b      	lsrs	r3, r3, #17
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	091b      	lsrs	r3, r3, #4
 8005966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800596a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d004      	beq.n	800597c <HCD_RXQLVL_IRQHandler+0x46>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b05      	cmp	r3, #5
 8005976:	f000 80b6 	beq.w	8005ae6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800597a:	e0b7      	b.n	8005aec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 80b3 	beq.w	8005aea <HCD_RXQLVL_IRQHandler+0x1b4>
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4613      	mov	r3, r2
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	1a9b      	subs	r3, r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	332c      	adds	r3, #44	@ 0x2c
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80a7 	beq.w	8005aea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4613      	mov	r3, r2
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	3338      	adds	r3, #56	@ 0x38
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	18d1      	adds	r1, r2, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4613      	mov	r3, r2
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4403      	add	r3, r0
 80059c0:	3334      	adds	r3, #52	@ 0x34
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4299      	cmp	r1, r3
 80059c6:	f200 8083 	bhi.w	8005ad0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4613      	mov	r3, r2
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	332c      	adds	r3, #44	@ 0x2c
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	b292      	uxth	r2, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	f002 ff73 	bl	80088d0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4613      	mov	r3, r2
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	332c      	adds	r3, #44	@ 0x2c
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	18d1      	adds	r1, r2, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4613      	mov	r3, r2
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4403      	add	r3, r0
 8005a0e:	332c      	adds	r3, #44	@ 0x2c
 8005a10:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4613      	mov	r3, r2
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3338      	adds	r3, #56	@ 0x38
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	18d1      	adds	r1, r2, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4403      	add	r3, r0
 8005a36:	3338      	adds	r3, #56	@ 0x38
 8005a38:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	0cdb      	lsrs	r3, r3, #19
 8005a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a4e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4613      	mov	r3, r2
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3328      	adds	r3, #40	@ 0x28
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d13f      	bne.n	8005aea <HCD_RXQLVL_IRQHandler+0x1b4>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d03c      	beq.n	8005aea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a86:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a8e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	333c      	adds	r3, #60	@ 0x3c
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f083 0301 	eor.w	r3, r3, #1
 8005ab8:	b2d8      	uxtb	r0, r3
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	333c      	adds	r3, #60	@ 0x3c
 8005aca:	4602      	mov	r2, r0
 8005acc:	701a      	strb	r2, [r3, #0]
      break;
 8005ace:	e00c      	b.n	8005aea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	334c      	adds	r3, #76	@ 0x4c
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	701a      	strb	r2, [r3, #0]
      break;
 8005ae4:	e001      	b.n	8005aea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005aea:	bf00      	nop
  }
}
 8005aec:	bf00      	nop
 8005aee:	3728      	adds	r7, #40	@ 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005b20:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d10b      	bne.n	8005b44 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d102      	bne.n	8005b3c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f006 f822 	bl	800bb80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f043 0302 	orr.w	r3, r3, #2
 8005b42:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d132      	bne.n	8005bb4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f043 0308 	orr.w	r3, r3, #8
 8005b54:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d126      	bne.n	8005bae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7a5b      	ldrb	r3, [r3, #9]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d113      	bne.n	8005b90 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005b6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b72:	d106      	bne.n	8005b82 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2102      	movs	r1, #2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f003 f83e 	bl	8008bfc <USB_InitFSLSPClkSel>
 8005b80:	e011      	b.n	8005ba6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2101      	movs	r1, #1
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f003 f837 	bl	8008bfc <USB_InitFSLSPClkSel>
 8005b8e:	e00a      	b.n	8005ba6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	79db      	ldrb	r3, [r3, #7]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d106      	bne.n	8005ba6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005ba4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f006 f814 	bl	800bbd4 <HAL_HCD_PortEnabled_Callback>
 8005bac:	e002      	b.n	8005bb4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f006 f81e 	bl	800bbf0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d103      	bne.n	8005bc6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f043 0320 	orr.w	r3, r3, #32
 8005bc4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005bcc:	461a      	mov	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6013      	str	r3, [r2, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e12b      	b.n	8005e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fc f8de 	bl	8001dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2224      	movs	r2, #36	@ 0x24
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c40:	f000 fd80 	bl	8006744 <HAL_RCC_GetPCLK1Freq>
 8005c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4a81      	ldr	r2, [pc, #516]	@ (8005e50 <HAL_I2C_Init+0x274>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d807      	bhi.n	8005c60 <HAL_I2C_Init+0x84>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a80      	ldr	r2, [pc, #512]	@ (8005e54 <HAL_I2C_Init+0x278>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	bf94      	ite	ls
 8005c58:	2301      	movls	r3, #1
 8005c5a:	2300      	movhi	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	e006      	b.n	8005c6e <HAL_I2C_Init+0x92>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a7d      	ldr	r2, [pc, #500]	@ (8005e58 <HAL_I2C_Init+0x27c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	bf94      	ite	ls
 8005c68:	2301      	movls	r3, #1
 8005c6a:	2300      	movhi	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e0e7      	b.n	8005e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a78      	ldr	r2, [pc, #480]	@ (8005e5c <HAL_I2C_Init+0x280>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	0c9b      	lsrs	r3, r3, #18
 8005c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8005e50 <HAL_I2C_Init+0x274>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d802      	bhi.n	8005cb0 <HAL_I2C_Init+0xd4>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	3301      	adds	r3, #1
 8005cae:	e009      	b.n	8005cc4 <HAL_I2C_Init+0xe8>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	4a69      	ldr	r2, [pc, #420]	@ (8005e60 <HAL_I2C_Init+0x284>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	099b      	lsrs	r3, r3, #6
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005cd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	495c      	ldr	r1, [pc, #368]	@ (8005e50 <HAL_I2C_Init+0x274>)
 8005ce0:	428b      	cmp	r3, r1
 8005ce2:	d819      	bhi.n	8005d18 <HAL_I2C_Init+0x13c>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1e59      	subs	r1, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cf2:	1c59      	adds	r1, r3, #1
 8005cf4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005cf8:	400b      	ands	r3, r1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <HAL_I2C_Init+0x138>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1e59      	subs	r1, r3, #1
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d12:	e051      	b.n	8005db8 <HAL_I2C_Init+0x1dc>
 8005d14:	2304      	movs	r3, #4
 8005d16:	e04f      	b.n	8005db8 <HAL_I2C_Init+0x1dc>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d111      	bne.n	8005d44 <HAL_I2C_Init+0x168>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1e58      	subs	r0, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6859      	ldr	r1, [r3, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	440b      	add	r3, r1
 8005d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d32:	3301      	adds	r3, #1
 8005d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf0c      	ite	eq
 8005d3c:	2301      	moveq	r3, #1
 8005d3e:	2300      	movne	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e012      	b.n	8005d6a <HAL_I2C_Init+0x18e>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1e58      	subs	r0, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6859      	ldr	r1, [r3, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	0099      	lsls	r1, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf0c      	ite	eq
 8005d64:	2301      	moveq	r3, #1
 8005d66:	2300      	movne	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <HAL_I2C_Init+0x196>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e022      	b.n	8005db8 <HAL_I2C_Init+0x1dc>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10e      	bne.n	8005d98 <HAL_I2C_Init+0x1bc>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	1e58      	subs	r0, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	440b      	add	r3, r1
 8005d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d96:	e00f      	b.n	8005db8 <HAL_I2C_Init+0x1dc>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1e58      	subs	r0, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6859      	ldr	r1, [r3, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	0099      	lsls	r1, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dae:	3301      	adds	r3, #1
 8005db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	6809      	ldr	r1, [r1, #0]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69da      	ldr	r2, [r3, #28]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005de6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6911      	ldr	r1, [r2, #16]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	68d2      	ldr	r2, [r2, #12]
 8005df2:	4311      	orrs	r1, r2
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6812      	ldr	r2, [r2, #0]
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	000186a0 	.word	0x000186a0
 8005e54:	001e847f 	.word	0x001e847f
 8005e58:	003d08ff 	.word	0x003d08ff
 8005e5c:	431bde83 	.word	0x431bde83
 8005e60:	10624dd3 	.word	0x10624dd3

08005e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e267      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d075      	beq.n	8005f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e82:	4b88      	ldr	r3, [pc, #544]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d00c      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e8e:	4b85      	ldr	r3, [pc, #532]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d112      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e9a:	4b82      	ldr	r3, [pc, #520]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ea6:	d10b      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d05b      	beq.n	8005f6c <HAL_RCC_OscConfig+0x108>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d157      	bne.n	8005f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e242      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ec8:	d106      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x74>
 8005eca:	4b76      	ldr	r3, [pc, #472]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a75      	ldr	r2, [pc, #468]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	e01d      	b.n	8005f14 <HAL_RCC_OscConfig+0xb0>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ee0:	d10c      	bne.n	8005efc <HAL_RCC_OscConfig+0x98>
 8005ee2:	4b70      	ldr	r3, [pc, #448]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6f      	ldr	r2, [pc, #444]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	4b6d      	ldr	r3, [pc, #436]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a6c      	ldr	r2, [pc, #432]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	e00b      	b.n	8005f14 <HAL_RCC_OscConfig+0xb0>
 8005efc:	4b69      	ldr	r3, [pc, #420]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a68      	ldr	r2, [pc, #416]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	4b66      	ldr	r3, [pc, #408]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a65      	ldr	r2, [pc, #404]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d013      	beq.n	8005f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1c:	f7fc f9fe 	bl	800231c <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f24:	f7fc f9fa 	bl	800231c <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b64      	cmp	r3, #100	@ 0x64
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e207      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f36:	4b5b      	ldr	r3, [pc, #364]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f0      	beq.n	8005f24 <HAL_RCC_OscConfig+0xc0>
 8005f42:	e014      	b.n	8005f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f44:	f7fc f9ea 	bl	800231c <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f4c:	f7fc f9e6 	bl	800231c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b64      	cmp	r3, #100	@ 0x64
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e1f3      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f5e:	4b51      	ldr	r3, [pc, #324]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0xe8>
 8005f6a:	e000      	b.n	8005f6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d063      	beq.n	8006042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f86:	4b47      	ldr	r3, [pc, #284]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d11c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f92:	4b44      	ldr	r3, [pc, #272]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d116      	bne.n	8005fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f9e:	4b41      	ldr	r3, [pc, #260]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x152>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d001      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e1c7      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4937      	ldr	r1, [pc, #220]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fca:	e03a      	b.n	8006042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d020      	beq.n	8006016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fd4:	4b34      	ldr	r3, [pc, #208]	@ (80060a8 <HAL_RCC_OscConfig+0x244>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fc f99f 	bl	800231c <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe2:	f7fc f99b 	bl	800231c <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e1a8      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f0      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006000:	4b28      	ldr	r3, [pc, #160]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4925      	ldr	r1, [pc, #148]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8006010:	4313      	orrs	r3, r2
 8006012:	600b      	str	r3, [r1, #0]
 8006014:	e015      	b.n	8006042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006016:	4b24      	ldr	r3, [pc, #144]	@ (80060a8 <HAL_RCC_OscConfig+0x244>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601c:	f7fc f97e 	bl	800231c <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006024:	f7fc f97a 	bl	800231c <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e187      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006036:	4b1b      	ldr	r3, [pc, #108]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d036      	beq.n	80060bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006056:	4b15      	ldr	r3, [pc, #84]	@ (80060ac <HAL_RCC_OscConfig+0x248>)
 8006058:	2201      	movs	r2, #1
 800605a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605c:	f7fc f95e 	bl	800231c <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006064:	f7fc f95a 	bl	800231c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e167      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006076:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <HAL_RCC_OscConfig+0x240>)
 8006078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0x200>
 8006082:	e01b      	b.n	80060bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006084:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <HAL_RCC_OscConfig+0x248>)
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800608a:	f7fc f947 	bl	800231c <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006090:	e00e      	b.n	80060b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006092:	f7fc f943 	bl	800231c <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d907      	bls.n	80060b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e150      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
 80060a4:	40023800 	.word	0x40023800
 80060a8:	42470000 	.word	0x42470000
 80060ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060b0:	4b88      	ldr	r3, [pc, #544]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1ea      	bne.n	8006092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8097 	beq.w	80061f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ca:	2300      	movs	r3, #0
 80060cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ce:	4b81      	ldr	r3, [pc, #516]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10f      	bne.n	80060fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	4b7d      	ldr	r3, [pc, #500]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	4a7c      	ldr	r2, [pc, #496]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80060ea:	4b7a      	ldr	r3, [pc, #488]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f2:	60bb      	str	r3, [r7, #8]
 80060f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fa:	4b77      	ldr	r3, [pc, #476]	@ (80062d8 <HAL_RCC_OscConfig+0x474>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d118      	bne.n	8006138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006106:	4b74      	ldr	r3, [pc, #464]	@ (80062d8 <HAL_RCC_OscConfig+0x474>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a73      	ldr	r2, [pc, #460]	@ (80062d8 <HAL_RCC_OscConfig+0x474>)
 800610c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006112:	f7fc f903 	bl	800231c <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800611a:	f7fc f8ff 	bl	800231c <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e10c      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612c:	4b6a      	ldr	r3, [pc, #424]	@ (80062d8 <HAL_RCC_OscConfig+0x474>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f0      	beq.n	800611a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d106      	bne.n	800614e <HAL_RCC_OscConfig+0x2ea>
 8006140:	4b64      	ldr	r3, [pc, #400]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006144:	4a63      	ldr	r2, [pc, #396]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	6713      	str	r3, [r2, #112]	@ 0x70
 800614c:	e01c      	b.n	8006188 <HAL_RCC_OscConfig+0x324>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b05      	cmp	r3, #5
 8006154:	d10c      	bne.n	8006170 <HAL_RCC_OscConfig+0x30c>
 8006156:	4b5f      	ldr	r3, [pc, #380]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615a:	4a5e      	ldr	r2, [pc, #376]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	6713      	str	r3, [r2, #112]	@ 0x70
 8006162:	4b5c      	ldr	r3, [pc, #368]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006166:	4a5b      	ldr	r2, [pc, #364]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	6713      	str	r3, [r2, #112]	@ 0x70
 800616e:	e00b      	b.n	8006188 <HAL_RCC_OscConfig+0x324>
 8006170:	4b58      	ldr	r3, [pc, #352]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006174:	4a57      	ldr	r2, [pc, #348]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	@ 0x70
 800617c:	4b55      	ldr	r3, [pc, #340]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 800617e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006180:	4a54      	ldr	r2, [pc, #336]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006182:	f023 0304 	bic.w	r3, r3, #4
 8006186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d015      	beq.n	80061bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006190:	f7fc f8c4 	bl	800231c <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006196:	e00a      	b.n	80061ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006198:	f7fc f8c0 	bl	800231c <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e0cb      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ae:	4b49      	ldr	r3, [pc, #292]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0ee      	beq.n	8006198 <HAL_RCC_OscConfig+0x334>
 80061ba:	e014      	b.n	80061e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061bc:	f7fc f8ae 	bl	800231c <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061c2:	e00a      	b.n	80061da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c4:	f7fc f8aa 	bl	800231c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e0b5      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061da:	4b3e      	ldr	r3, [pc, #248]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1ee      	bne.n	80061c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d105      	bne.n	80061f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ec:	4b39      	ldr	r3, [pc, #228]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80061ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f0:	4a38      	ldr	r2, [pc, #224]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80061f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80a1 	beq.w	8006344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006202:	4b34      	ldr	r3, [pc, #208]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 030c 	and.w	r3, r3, #12
 800620a:	2b08      	cmp	r3, #8
 800620c:	d05c      	beq.n	80062c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d141      	bne.n	800629a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006216:	4b31      	ldr	r3, [pc, #196]	@ (80062dc <HAL_RCC_OscConfig+0x478>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fc f87e 	bl	800231c <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006224:	f7fc f87a 	bl	800231c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e087      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006236:	4b27      	ldr	r3, [pc, #156]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69da      	ldr	r2, [r3, #28]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006250:	019b      	lsls	r3, r3, #6
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	3b01      	subs	r3, #1
 800625c:	041b      	lsls	r3, r3, #16
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006264:	061b      	lsls	r3, r3, #24
 8006266:	491b      	ldr	r1, [pc, #108]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006268:	4313      	orrs	r3, r2
 800626a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800626c:	4b1b      	ldr	r3, [pc, #108]	@ (80062dc <HAL_RCC_OscConfig+0x478>)
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006272:	f7fc f853 	bl	800231c <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800627a:	f7fc f84f 	bl	800231c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e05c      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628c:	4b11      	ldr	r3, [pc, #68]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <HAL_RCC_OscConfig+0x416>
 8006298:	e054      	b.n	8006344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800629a:	4b10      	ldr	r3, [pc, #64]	@ (80062dc <HAL_RCC_OscConfig+0x478>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a0:	f7fc f83c 	bl	800231c <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a8:	f7fc f838 	bl	800231c <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e045      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ba:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <HAL_RCC_OscConfig+0x470>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x444>
 80062c6:	e03d      	b.n	8006344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d107      	bne.n	80062e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e038      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
 80062d4:	40023800 	.word	0x40023800
 80062d8:	40007000 	.word	0x40007000
 80062dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006350 <HAL_RCC_OscConfig+0x4ec>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d028      	beq.n	8006340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d121      	bne.n	8006340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006306:	429a      	cmp	r2, r3
 8006308:	d11a      	bne.n	8006340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006310:	4013      	ands	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006318:	4293      	cmp	r3, r2
 800631a:	d111      	bne.n	8006340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006326:	085b      	lsrs	r3, r3, #1
 8006328:	3b01      	subs	r3, #1
 800632a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800632c:	429a      	cmp	r2, r3
 800632e:	d107      	bne.n	8006340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800633c:	429a      	cmp	r2, r3
 800633e:	d001      	beq.n	8006344 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40023800 	.word	0x40023800

08006354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e0cc      	b.n	8006502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006368:	4b68      	ldr	r3, [pc, #416]	@ (800650c <HAL_RCC_ClockConfig+0x1b8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d90c      	bls.n	8006390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006376:	4b65      	ldr	r3, [pc, #404]	@ (800650c <HAL_RCC_ClockConfig+0x1b8>)
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800637e:	4b63      	ldr	r3, [pc, #396]	@ (800650c <HAL_RCC_ClockConfig+0x1b8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d001      	beq.n	8006390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e0b8      	b.n	8006502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d020      	beq.n	80063de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063a8:	4b59      	ldr	r3, [pc, #356]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4a58      	ldr	r2, [pc, #352]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063c0:	4b53      	ldr	r3, [pc, #332]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	4a52      	ldr	r2, [pc, #328]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80063c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80063ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063cc:	4b50      	ldr	r3, [pc, #320]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	494d      	ldr	r1, [pc, #308]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d044      	beq.n	8006474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d107      	bne.n	8006402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f2:	4b47      	ldr	r3, [pc, #284]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d119      	bne.n	8006432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e07f      	b.n	8006502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d003      	beq.n	8006412 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800640e:	2b03      	cmp	r3, #3
 8006410:	d107      	bne.n	8006422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006412:	4b3f      	ldr	r3, [pc, #252]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d109      	bne.n	8006432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e06f      	b.n	8006502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006422:	4b3b      	ldr	r3, [pc, #236]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e067      	b.n	8006502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006432:	4b37      	ldr	r3, [pc, #220]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f023 0203 	bic.w	r2, r3, #3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4934      	ldr	r1, [pc, #208]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	4313      	orrs	r3, r2
 8006442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006444:	f7fb ff6a 	bl	800231c <HAL_GetTick>
 8006448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800644a:	e00a      	b.n	8006462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800644c:	f7fb ff66 	bl	800231c <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800645a:	4293      	cmp	r3, r2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e04f      	b.n	8006502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006462:	4b2b      	ldr	r3, [pc, #172]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 020c 	and.w	r2, r3, #12
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	429a      	cmp	r2, r3
 8006472:	d1eb      	bne.n	800644c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006474:	4b25      	ldr	r3, [pc, #148]	@ (800650c <HAL_RCC_ClockConfig+0x1b8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d20c      	bcs.n	800649c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006482:	4b22      	ldr	r3, [pc, #136]	@ (800650c <HAL_RCC_ClockConfig+0x1b8>)
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800648a:	4b20      	ldr	r3, [pc, #128]	@ (800650c <HAL_RCC_ClockConfig+0x1b8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d001      	beq.n	800649c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e032      	b.n	8006502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d008      	beq.n	80064ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064a8:	4b19      	ldr	r3, [pc, #100]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	4916      	ldr	r1, [pc, #88]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d009      	beq.n	80064da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064c6:	4b12      	ldr	r3, [pc, #72]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	490e      	ldr	r1, [pc, #56]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064da:	f000 f821 	bl	8006520 <HAL_RCC_GetSysClockFreq>
 80064de:	4602      	mov	r2, r0
 80064e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006510 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	091b      	lsrs	r3, r3, #4
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	490a      	ldr	r1, [pc, #40]	@ (8006514 <HAL_RCC_ClockConfig+0x1c0>)
 80064ec:	5ccb      	ldrb	r3, [r1, r3]
 80064ee:	fa22 f303 	lsr.w	r3, r2, r3
 80064f2:	4a09      	ldr	r2, [pc, #36]	@ (8006518 <HAL_RCC_ClockConfig+0x1c4>)
 80064f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80064f6:	4b09      	ldr	r3, [pc, #36]	@ (800651c <HAL_RCC_ClockConfig+0x1c8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fb feca 	bl	8002294 <HAL_InitTick>

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	40023c00 	.word	0x40023c00
 8006510:	40023800 	.word	0x40023800
 8006514:	0800c98c 	.word	0x0800c98c
 8006518:	20000000 	.word	0x20000000
 800651c:	20000004 	.word	0x20000004

08006520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006524:	b094      	sub	sp, #80	@ 0x50
 8006526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006538:	4b79      	ldr	r3, [pc, #484]	@ (8006720 <HAL_RCC_GetSysClockFreq+0x200>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 030c 	and.w	r3, r3, #12
 8006540:	2b08      	cmp	r3, #8
 8006542:	d00d      	beq.n	8006560 <HAL_RCC_GetSysClockFreq+0x40>
 8006544:	2b08      	cmp	r3, #8
 8006546:	f200 80e1 	bhi.w	800670c <HAL_RCC_GetSysClockFreq+0x1ec>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_RCC_GetSysClockFreq+0x34>
 800654e:	2b04      	cmp	r3, #4
 8006550:	d003      	beq.n	800655a <HAL_RCC_GetSysClockFreq+0x3a>
 8006552:	e0db      	b.n	800670c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006554:	4b73      	ldr	r3, [pc, #460]	@ (8006724 <HAL_RCC_GetSysClockFreq+0x204>)
 8006556:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006558:	e0db      	b.n	8006712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800655a:	4b73      	ldr	r3, [pc, #460]	@ (8006728 <HAL_RCC_GetSysClockFreq+0x208>)
 800655c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800655e:	e0d8      	b.n	8006712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006560:	4b6f      	ldr	r3, [pc, #444]	@ (8006720 <HAL_RCC_GetSysClockFreq+0x200>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006568:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800656a:	4b6d      	ldr	r3, [pc, #436]	@ (8006720 <HAL_RCC_GetSysClockFreq+0x200>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d063      	beq.n	800663e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006576:	4b6a      	ldr	r3, [pc, #424]	@ (8006720 <HAL_RCC_GetSysClockFreq+0x200>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	099b      	lsrs	r3, r3, #6
 800657c:	2200      	movs	r2, #0
 800657e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006580:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006588:	633b      	str	r3, [r7, #48]	@ 0x30
 800658a:	2300      	movs	r3, #0
 800658c:	637b      	str	r3, [r7, #52]	@ 0x34
 800658e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006592:	4622      	mov	r2, r4
 8006594:	462b      	mov	r3, r5
 8006596:	f04f 0000 	mov.w	r0, #0
 800659a:	f04f 0100 	mov.w	r1, #0
 800659e:	0159      	lsls	r1, r3, #5
 80065a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065a4:	0150      	lsls	r0, r2, #5
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4621      	mov	r1, r4
 80065ac:	1a51      	subs	r1, r2, r1
 80065ae:	6139      	str	r1, [r7, #16]
 80065b0:	4629      	mov	r1, r5
 80065b2:	eb63 0301 	sbc.w	r3, r3, r1
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065c4:	4659      	mov	r1, fp
 80065c6:	018b      	lsls	r3, r1, #6
 80065c8:	4651      	mov	r1, sl
 80065ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065ce:	4651      	mov	r1, sl
 80065d0:	018a      	lsls	r2, r1, #6
 80065d2:	4651      	mov	r1, sl
 80065d4:	ebb2 0801 	subs.w	r8, r2, r1
 80065d8:	4659      	mov	r1, fp
 80065da:	eb63 0901 	sbc.w	r9, r3, r1
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	f04f 0300 	mov.w	r3, #0
 80065e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065f2:	4690      	mov	r8, r2
 80065f4:	4699      	mov	r9, r3
 80065f6:	4623      	mov	r3, r4
 80065f8:	eb18 0303 	adds.w	r3, r8, r3
 80065fc:	60bb      	str	r3, [r7, #8]
 80065fe:	462b      	mov	r3, r5
 8006600:	eb49 0303 	adc.w	r3, r9, r3
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	f04f 0300 	mov.w	r3, #0
 800660e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006612:	4629      	mov	r1, r5
 8006614:	024b      	lsls	r3, r1, #9
 8006616:	4621      	mov	r1, r4
 8006618:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800661c:	4621      	mov	r1, r4
 800661e:	024a      	lsls	r2, r1, #9
 8006620:	4610      	mov	r0, r2
 8006622:	4619      	mov	r1, r3
 8006624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006626:	2200      	movs	r2, #0
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28
 800662a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800662c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006630:	f7f9 fe26 	bl	8000280 <__aeabi_uldivmod>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4613      	mov	r3, r2
 800663a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800663c:	e058      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800663e:	4b38      	ldr	r3, [pc, #224]	@ (8006720 <HAL_RCC_GetSysClockFreq+0x200>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	099b      	lsrs	r3, r3, #6
 8006644:	2200      	movs	r2, #0
 8006646:	4618      	mov	r0, r3
 8006648:	4611      	mov	r1, r2
 800664a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800664e:	623b      	str	r3, [r7, #32]
 8006650:	2300      	movs	r3, #0
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24
 8006654:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	f04f 0000 	mov.w	r0, #0
 8006660:	f04f 0100 	mov.w	r1, #0
 8006664:	0159      	lsls	r1, r3, #5
 8006666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800666a:	0150      	lsls	r0, r2, #5
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4641      	mov	r1, r8
 8006672:	ebb2 0a01 	subs.w	sl, r2, r1
 8006676:	4649      	mov	r1, r9
 8006678:	eb63 0b01 	sbc.w	fp, r3, r1
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006688:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800668c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006690:	ebb2 040a 	subs.w	r4, r2, sl
 8006694:	eb63 050b 	sbc.w	r5, r3, fp
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	00eb      	lsls	r3, r5, #3
 80066a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066a6:	00e2      	lsls	r2, r4, #3
 80066a8:	4614      	mov	r4, r2
 80066aa:	461d      	mov	r5, r3
 80066ac:	4643      	mov	r3, r8
 80066ae:	18e3      	adds	r3, r4, r3
 80066b0:	603b      	str	r3, [r7, #0]
 80066b2:	464b      	mov	r3, r9
 80066b4:	eb45 0303 	adc.w	r3, r5, r3
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066c6:	4629      	mov	r1, r5
 80066c8:	028b      	lsls	r3, r1, #10
 80066ca:	4621      	mov	r1, r4
 80066cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066d0:	4621      	mov	r1, r4
 80066d2:	028a      	lsls	r2, r1, #10
 80066d4:	4610      	mov	r0, r2
 80066d6:	4619      	mov	r1, r3
 80066d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066da:	2200      	movs	r2, #0
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	61fa      	str	r2, [r7, #28]
 80066e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066e4:	f7f9 fdcc 	bl	8000280 <__aeabi_uldivmod>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4613      	mov	r3, r2
 80066ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80066f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006720 <HAL_RCC_GetSysClockFreq+0x200>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	0c1b      	lsrs	r3, r3, #16
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	3301      	adds	r3, #1
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006700:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800670a:	e002      	b.n	8006712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800670c:	4b05      	ldr	r3, [pc, #20]	@ (8006724 <HAL_RCC_GetSysClockFreq+0x204>)
 800670e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006714:	4618      	mov	r0, r3
 8006716:	3750      	adds	r7, #80	@ 0x50
 8006718:	46bd      	mov	sp, r7
 800671a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800671e:	bf00      	nop
 8006720:	40023800 	.word	0x40023800
 8006724:	00f42400 	.word	0x00f42400
 8006728:	007a1200 	.word	0x007a1200

0800672c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006730:	4b03      	ldr	r3, [pc, #12]	@ (8006740 <HAL_RCC_GetHCLKFreq+0x14>)
 8006732:	681b      	ldr	r3, [r3, #0]
}
 8006734:	4618      	mov	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000000 	.word	0x20000000

08006744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006748:	f7ff fff0 	bl	800672c <HAL_RCC_GetHCLKFreq>
 800674c:	4602      	mov	r2, r0
 800674e:	4b05      	ldr	r3, [pc, #20]	@ (8006764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	0a9b      	lsrs	r3, r3, #10
 8006754:	f003 0307 	and.w	r3, r3, #7
 8006758:	4903      	ldr	r1, [pc, #12]	@ (8006768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800675a:	5ccb      	ldrb	r3, [r1, r3]
 800675c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006760:	4618      	mov	r0, r3
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40023800 	.word	0x40023800
 8006768:	0800c99c 	.word	0x0800c99c

0800676c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006770:	f7ff ffdc 	bl	800672c <HAL_RCC_GetHCLKFreq>
 8006774:	4602      	mov	r2, r0
 8006776:	4b05      	ldr	r3, [pc, #20]	@ (800678c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	0b5b      	lsrs	r3, r3, #13
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	4903      	ldr	r1, [pc, #12]	@ (8006790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006782:	5ccb      	ldrb	r3, [r1, r3]
 8006784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006788:	4618      	mov	r0, r3
 800678a:	bd80      	pop	{r7, pc}
 800678c:	40023800 	.word	0x40023800
 8006790:	0800c99c 	.word	0x0800c99c

08006794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e07b      	b.n	800689e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d108      	bne.n	80067c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067b6:	d009      	beq.n	80067cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	61da      	str	r2, [r3, #28]
 80067be:	e005      	b.n	80067cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fb fb34 	bl	8001e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006850:	ea42 0103 	orr.w	r1, r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006858:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	f003 0104 	and.w	r1, r3, #4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	f003 0210 	and.w	r2, r3, #16
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800688c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e041      	b.n	800693c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fb fb09 	bl	8001ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f000 fad9 	bl	8006e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e041      	b.n	80069da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f839 	bl	80069e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3304      	adds	r3, #4
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f000 fa8a 	bl	8006e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
	...

080069f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d109      	bne.n	8006a1c <HAL_TIM_PWM_Start+0x24>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	e022      	b.n	8006a62 <HAL_TIM_PWM_Start+0x6a>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d109      	bne.n	8006a36 <HAL_TIM_PWM_Start+0x3e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	bf14      	ite	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	2300      	moveq	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	e015      	b.n	8006a62 <HAL_TIM_PWM_Start+0x6a>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d109      	bne.n	8006a50 <HAL_TIM_PWM_Start+0x58>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	e008      	b.n	8006a62 <HAL_TIM_PWM_Start+0x6a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	bf14      	ite	ne
 8006a5c:	2301      	movne	r3, #1
 8006a5e:	2300      	moveq	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e07c      	b.n	8006b64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <HAL_TIM_PWM_Start+0x82>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a78:	e013      	b.n	8006aa2 <HAL_TIM_PWM_Start+0xaa>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d104      	bne.n	8006a8a <HAL_TIM_PWM_Start+0x92>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a88:	e00b      	b.n	8006aa2 <HAL_TIM_PWM_Start+0xaa>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d104      	bne.n	8006a9a <HAL_TIM_PWM_Start+0xa2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a98:	e003      	b.n	8006aa2 <HAL_TIM_PWM_Start+0xaa>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fce6 	bl	800747c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8006b6c <HAL_TIM_PWM_Start+0x174>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d004      	beq.n	8006ac4 <HAL_TIM_PWM_Start+0xcc>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2c      	ldr	r2, [pc, #176]	@ (8006b70 <HAL_TIM_PWM_Start+0x178>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d101      	bne.n	8006ac8 <HAL_TIM_PWM_Start+0xd0>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <HAL_TIM_PWM_Start+0xd2>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006adc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a22      	ldr	r2, [pc, #136]	@ (8006b6c <HAL_TIM_PWM_Start+0x174>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d022      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af0:	d01d      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b74 <HAL_TIM_PWM_Start+0x17c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d018      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1d      	ldr	r2, [pc, #116]	@ (8006b78 <HAL_TIM_PWM_Start+0x180>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d013      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006b7c <HAL_TIM_PWM_Start+0x184>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00e      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a16      	ldr	r2, [pc, #88]	@ (8006b70 <HAL_TIM_PWM_Start+0x178>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a18      	ldr	r2, [pc, #96]	@ (8006b80 <HAL_TIM_PWM_Start+0x188>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a16      	ldr	r2, [pc, #88]	@ (8006b84 <HAL_TIM_PWM_Start+0x18c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d111      	bne.n	8006b52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b06      	cmp	r3, #6
 8006b3e:	d010      	beq.n	8006b62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b50:	e007      	b.n	8006b62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0201 	orr.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40010400 	.word	0x40010400
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40001800 	.word	0x40001800

08006b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e0ae      	b.n	8006d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b0c      	cmp	r3, #12
 8006bb2:	f200 809f 	bhi.w	8006cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bf1 	.word	0x08006bf1
 8006bc0:	08006cf5 	.word	0x08006cf5
 8006bc4:	08006cf5 	.word	0x08006cf5
 8006bc8:	08006cf5 	.word	0x08006cf5
 8006bcc:	08006c31 	.word	0x08006c31
 8006bd0:	08006cf5 	.word	0x08006cf5
 8006bd4:	08006cf5 	.word	0x08006cf5
 8006bd8:	08006cf5 	.word	0x08006cf5
 8006bdc:	08006c73 	.word	0x08006c73
 8006be0:	08006cf5 	.word	0x08006cf5
 8006be4:	08006cf5 	.word	0x08006cf5
 8006be8:	08006cf5 	.word	0x08006cf5
 8006bec:	08006cb3 	.word	0x08006cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 f9f6 	bl	8006fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0208 	orr.w	r2, r2, #8
 8006c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0204 	bic.w	r2, r2, #4
 8006c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6999      	ldr	r1, [r3, #24]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	619a      	str	r2, [r3, #24]
      break;
 8006c2e:	e064      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fa46 	bl	80070c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6999      	ldr	r1, [r3, #24]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	619a      	str	r2, [r3, #24]
      break;
 8006c70:	e043      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fa9b 	bl	80071b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0208 	orr.w	r2, r2, #8
 8006c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69da      	ldr	r2, [r3, #28]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0204 	bic.w	r2, r2, #4
 8006c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69d9      	ldr	r1, [r3, #28]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	61da      	str	r2, [r3, #28]
      break;
 8006cb0:	e023      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 faef 	bl	800729c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69d9      	ldr	r1, [r3, #28]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	021a      	lsls	r2, r3, #8
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	61da      	str	r2, [r3, #28]
      break;
 8006cf2:	e002      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_TIM_ConfigClockSource+0x1c>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e0b4      	b.n	8006e92 <HAL_TIM_ConfigClockSource+0x186>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d60:	d03e      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0xd4>
 8006d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d66:	f200 8087 	bhi.w	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6e:	f000 8086 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x172>
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d76:	d87f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d78:	2b70      	cmp	r3, #112	@ 0x70
 8006d7a:	d01a      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0xa6>
 8006d7c:	2b70      	cmp	r3, #112	@ 0x70
 8006d7e:	d87b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d80:	2b60      	cmp	r3, #96	@ 0x60
 8006d82:	d050      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x11a>
 8006d84:	2b60      	cmp	r3, #96	@ 0x60
 8006d86:	d877      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d88:	2b50      	cmp	r3, #80	@ 0x50
 8006d8a:	d03c      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0xfa>
 8006d8c:	2b50      	cmp	r3, #80	@ 0x50
 8006d8e:	d873      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d058      	beq.n	8006e46 <HAL_TIM_ConfigClockSource+0x13a>
 8006d94:	2b40      	cmp	r3, #64	@ 0x40
 8006d96:	d86f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d98:	2b30      	cmp	r3, #48	@ 0x30
 8006d9a:	d064      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006d9c:	2b30      	cmp	r3, #48	@ 0x30
 8006d9e:	d86b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d060      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d867      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d05c      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d05a      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006db0:	e062      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dc2:	f000 fb3b 	bl	800743c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	609a      	str	r2, [r3, #8]
      break;
 8006dde:	e04f      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006df0:	f000 fb24 	bl	800743c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e02:	609a      	str	r2, [r3, #8]
      break;
 8006e04:	e03c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e12:	461a      	mov	r2, r3
 8006e14:	f000 fa98 	bl	8007348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2150      	movs	r1, #80	@ 0x50
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 faf1 	bl	8007406 <TIM_ITRx_SetConfig>
      break;
 8006e24:	e02c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e32:	461a      	mov	r2, r3
 8006e34:	f000 fab7 	bl	80073a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2160      	movs	r1, #96	@ 0x60
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fae1 	bl	8007406 <TIM_ITRx_SetConfig>
      break;
 8006e44:	e01c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e52:	461a      	mov	r2, r3
 8006e54:	f000 fa78 	bl	8007348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2140      	movs	r1, #64	@ 0x40
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fad1 	bl	8007406 <TIM_ITRx_SetConfig>
      break;
 8006e64:	e00c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f000 fac8 	bl	8007406 <TIM_ITRx_SetConfig>
      break;
 8006e76:	e003      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7c:	e000      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a43      	ldr	r2, [pc, #268]	@ (8006fbc <TIM_Base_SetConfig+0x120>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d013      	beq.n	8006edc <TIM_Base_SetConfig+0x40>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eba:	d00f      	beq.n	8006edc <TIM_Base_SetConfig+0x40>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a40      	ldr	r2, [pc, #256]	@ (8006fc0 <TIM_Base_SetConfig+0x124>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00b      	beq.n	8006edc <TIM_Base_SetConfig+0x40>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8006fc4 <TIM_Base_SetConfig+0x128>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d007      	beq.n	8006edc <TIM_Base_SetConfig+0x40>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a3e      	ldr	r2, [pc, #248]	@ (8006fc8 <TIM_Base_SetConfig+0x12c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_Base_SetConfig+0x40>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a3d      	ldr	r2, [pc, #244]	@ (8006fcc <TIM_Base_SetConfig+0x130>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d108      	bne.n	8006eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a32      	ldr	r2, [pc, #200]	@ (8006fbc <TIM_Base_SetConfig+0x120>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d02b      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006efc:	d027      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2f      	ldr	r2, [pc, #188]	@ (8006fc0 <TIM_Base_SetConfig+0x124>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d023      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a2e      	ldr	r2, [pc, #184]	@ (8006fc4 <TIM_Base_SetConfig+0x128>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d01f      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a2d      	ldr	r2, [pc, #180]	@ (8006fc8 <TIM_Base_SetConfig+0x12c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d01b      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a2c      	ldr	r2, [pc, #176]	@ (8006fcc <TIM_Base_SetConfig+0x130>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d017      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a2b      	ldr	r2, [pc, #172]	@ (8006fd0 <TIM_Base_SetConfig+0x134>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d013      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd4 <TIM_Base_SetConfig+0x138>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00f      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a29      	ldr	r2, [pc, #164]	@ (8006fd8 <TIM_Base_SetConfig+0x13c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00b      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a28      	ldr	r2, [pc, #160]	@ (8006fdc <TIM_Base_SetConfig+0x140>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d007      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a27      	ldr	r2, [pc, #156]	@ (8006fe0 <TIM_Base_SetConfig+0x144>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d003      	beq.n	8006f4e <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a26      	ldr	r2, [pc, #152]	@ (8006fe4 <TIM_Base_SetConfig+0x148>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d108      	bne.n	8006f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a0e      	ldr	r2, [pc, #56]	@ (8006fbc <TIM_Base_SetConfig+0x120>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <TIM_Base_SetConfig+0xf2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a10      	ldr	r2, [pc, #64]	@ (8006fcc <TIM_Base_SetConfig+0x130>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d103      	bne.n	8006f96 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f043 0204 	orr.w	r2, r3, #4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40010000 	.word	0x40010000
 8006fc0:	40000400 	.word	0x40000400
 8006fc4:	40000800 	.word	0x40000800
 8006fc8:	40000c00 	.word	0x40000c00
 8006fcc:	40010400 	.word	0x40010400
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800
 8006fdc:	40001800 	.word	0x40001800
 8006fe0:	40001c00 	.word	0x40001c00
 8006fe4:	40002000 	.word	0x40002000

08006fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f023 0201 	bic.w	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f023 0302 	bic.w	r3, r3, #2
 8007030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a20      	ldr	r2, [pc, #128]	@ (80070c0 <TIM_OC1_SetConfig+0xd8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_OC1_SetConfig+0x64>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a1f      	ldr	r2, [pc, #124]	@ (80070c4 <TIM_OC1_SetConfig+0xdc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d10c      	bne.n	8007066 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 0308 	bic.w	r3, r3, #8
 8007052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f023 0304 	bic.w	r3, r3, #4
 8007064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a15      	ldr	r2, [pc, #84]	@ (80070c0 <TIM_OC1_SetConfig+0xd8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d003      	beq.n	8007076 <TIM_OC1_SetConfig+0x8e>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a14      	ldr	r2, [pc, #80]	@ (80070c4 <TIM_OC1_SetConfig+0xdc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d111      	bne.n	800709a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800707c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	4313      	orrs	r3, r2
 8007098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	621a      	str	r2, [r3, #32]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	40010000 	.word	0x40010000
 80070c4:	40010400 	.word	0x40010400

080070c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	f023 0210 	bic.w	r2, r3, #16
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	021b      	lsls	r3, r3, #8
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0320 	bic.w	r3, r3, #32
 8007112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a22      	ldr	r2, [pc, #136]	@ (80071ac <TIM_OC2_SetConfig+0xe4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_OC2_SetConfig+0x68>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a21      	ldr	r2, [pc, #132]	@ (80071b0 <TIM_OC2_SetConfig+0xe8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d10d      	bne.n	800714c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800714a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a17      	ldr	r2, [pc, #92]	@ (80071ac <TIM_OC2_SetConfig+0xe4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC2_SetConfig+0x94>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a16      	ldr	r2, [pc, #88]	@ (80071b0 <TIM_OC2_SetConfig+0xe8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d113      	bne.n	8007184 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800716a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	621a      	str	r2, [r3, #32]
}
 800719e:	bf00      	nop
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40010000 	.word	0x40010000
 80071b0:	40010400 	.word	0x40010400

080071b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a21      	ldr	r2, [pc, #132]	@ (8007294 <TIM_OC3_SetConfig+0xe0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d003      	beq.n	800721a <TIM_OC3_SetConfig+0x66>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a20      	ldr	r2, [pc, #128]	@ (8007298 <TIM_OC3_SetConfig+0xe4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d10d      	bne.n	8007236 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a16      	ldr	r2, [pc, #88]	@ (8007294 <TIM_OC3_SetConfig+0xe0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d003      	beq.n	8007246 <TIM_OC3_SetConfig+0x92>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a15      	ldr	r2, [pc, #84]	@ (8007298 <TIM_OC3_SetConfig+0xe4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d113      	bne.n	800726e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800724c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	011b      	lsls	r3, r3, #4
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	621a      	str	r2, [r3, #32]
}
 8007288:	bf00      	nop
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	40010000 	.word	0x40010000
 8007298:	40010400 	.word	0x40010400

0800729c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	031b      	lsls	r3, r3, #12
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a12      	ldr	r2, [pc, #72]	@ (8007340 <TIM_OC4_SetConfig+0xa4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d003      	beq.n	8007304 <TIM_OC4_SetConfig+0x68>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a11      	ldr	r2, [pc, #68]	@ (8007344 <TIM_OC4_SetConfig+0xa8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d109      	bne.n	8007318 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800730a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	019b      	lsls	r3, r3, #6
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	621a      	str	r2, [r3, #32]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40010000 	.word	0x40010000
 8007344:	40010400 	.word	0x40010400

08007348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	f023 0201 	bic.w	r2, r3, #1
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4313      	orrs	r3, r2
 800737c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f023 030a 	bic.w	r3, r3, #10
 8007384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4313      	orrs	r3, r2
 800738c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	621a      	str	r2, [r3, #32]
}
 800739a:	bf00      	nop
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b087      	sub	sp, #28
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	60b9      	str	r1, [r7, #8]
 80073b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	f023 0210 	bic.w	r2, r3, #16
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	031b      	lsls	r3, r3, #12
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800741c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	f043 0307 	orr.w	r3, r3, #7
 8007428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	609a      	str	r2, [r3, #8]
}
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	021a      	lsls	r2, r3, #8
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	431a      	orrs	r2, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4313      	orrs	r3, r2
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	609a      	str	r2, [r3, #8]
}
 8007470:	bf00      	nop
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 031f 	and.w	r3, r3, #31
 800748e:	2201      	movs	r2, #1
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1a      	ldr	r2, [r3, #32]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	43db      	mvns	r3, r3
 800749e:	401a      	ands	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a1a      	ldr	r2, [r3, #32]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	fa01 f303 	lsl.w	r3, r1, r3
 80074b4:	431a      	orrs	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	621a      	str	r2, [r3, #32]
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
	...

080074c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074dc:	2302      	movs	r3, #2
 80074de:	e05a      	b.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a21      	ldr	r2, [pc, #132]	@ (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d022      	beq.n	800756a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752c:	d01d      	beq.n	800756a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a1d      	ldr	r2, [pc, #116]	@ (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d018      	beq.n	800756a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1b      	ldr	r2, [pc, #108]	@ (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1a      	ldr	r2, [pc, #104]	@ (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00e      	beq.n	800756a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a18      	ldr	r2, [pc, #96]	@ (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d009      	beq.n	800756a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a17      	ldr	r2, [pc, #92]	@ (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d004      	beq.n	800756a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a15      	ldr	r2, [pc, #84]	@ (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d10c      	bne.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	4313      	orrs	r3, r2
 800757a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40000400 	.word	0x40000400
 80075ac:	40000800 	.word	0x40000800
 80075b0:	40000c00 	.word	0x40000c00
 80075b4:	40010400 	.word	0x40010400
 80075b8:	40014000 	.word	0x40014000
 80075bc:	40001800 	.word	0x40001800

080075c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e042      	b.n	8007658 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fa fcee 	bl	8001fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2224      	movs	r2, #36	@ 0x24
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fd7f 	bl	8008108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08a      	sub	sp, #40	@ 0x28
 8007664:	af02      	add	r7, sp, #8
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	4613      	mov	r3, r2
 800766e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b20      	cmp	r3, #32
 800767e:	d175      	bne.n	800776c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <HAL_UART_Transmit+0x2c>
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e06e      	b.n	800776e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2221      	movs	r2, #33	@ 0x21
 800769a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800769e:	f7fa fe3d 	bl	800231c <HAL_GetTick>
 80076a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	88fa      	ldrh	r2, [r7, #6]
 80076a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	88fa      	ldrh	r2, [r7, #6]
 80076ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b8:	d108      	bne.n	80076cc <HAL_UART_Transmit+0x6c>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	e003      	b.n	80076d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076d4:	e02e      	b.n	8007734 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2200      	movs	r2, #0
 80076de:	2180      	movs	r1, #128	@ 0x80
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fb1d 	bl	8007d20 <UART_WaitOnFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e03a      	b.n	800776e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10b      	bne.n	8007716 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800770c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	3302      	adds	r3, #2
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	e007      	b.n	8007726 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	3301      	adds	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1cb      	bne.n	80076d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2200      	movs	r2, #0
 8007746:	2140      	movs	r1, #64	@ 0x40
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fae9 	bl	8007d20 <UART_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e006      	b.n	800776e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	e000      	b.n	800776e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800776c:	2302      	movs	r3, #2
  }
}
 800776e:	4618      	mov	r0, r3
 8007770:	3720      	adds	r7, #32
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b0ba      	sub	sp, #232	@ 0xe8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800779e:	2300      	movs	r3, #0
 80077a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80077b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10f      	bne.n	80077de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <HAL_UART_IRQHandler+0x66>
 80077ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fbd7 	bl	8007f8a <UART_Receive_IT>
      return;
 80077dc:	e273      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80de 	beq.w	80079a4 <HAL_UART_IRQHandler+0x22c>
 80077e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80d1 	beq.w	80079a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00b      	beq.n	8007826 <HAL_UART_IRQHandler+0xae>
 800780e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781e:	f043 0201 	orr.w	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <HAL_UART_IRQHandler+0xd2>
 8007832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d005      	beq.n	800784a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007842:	f043 0202 	orr.w	r2, r3, #2
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800784a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <HAL_UART_IRQHandler+0xf6>
 8007856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007866:	f043 0204 	orr.w	r2, r3, #4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <HAL_UART_IRQHandler+0x126>
 800787a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	f043 0208 	orr.w	r2, r3, #8
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 820a 	beq.w	8007cbc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d008      	beq.n	80078c6 <HAL_UART_IRQHandler+0x14e>
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fb62 	bl	8007f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d0:	2b40      	cmp	r3, #64	@ 0x40
 80078d2:	bf0c      	ite	eq
 80078d4:	2301      	moveq	r3, #1
 80078d6:	2300      	movne	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <HAL_UART_IRQHandler+0x17a>
 80078ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d04f      	beq.n	8007992 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa6d 	bl	8007dd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007902:	2b40      	cmp	r3, #64	@ 0x40
 8007904:	d141      	bne.n	800798a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3314      	adds	r3, #20
 800790c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800791c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3314      	adds	r3, #20
 800792e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007932:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800793e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800794a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1d9      	bne.n	8007906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d013      	beq.n	8007982 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795e:	4a8a      	ldr	r2, [pc, #552]	@ (8007b88 <HAL_UART_IRQHandler+0x410>)
 8007960:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007966:	4618      	mov	r0, r3
 8007968:	f7fb fb92 	bl	8003090 <HAL_DMA_Abort_IT>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d016      	beq.n	80079a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007980:	e00e      	b.n	80079a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f9b6 	bl	8007cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	e00a      	b.n	80079a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f9b2 	bl	8007cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007990:	e006      	b.n	80079a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f9ae 	bl	8007cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800799e:	e18d      	b.n	8007cbc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a0:	bf00      	nop
    return;
 80079a2:	e18b      	b.n	8007cbc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	f040 8167 	bne.w	8007c7c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b2:	f003 0310 	and.w	r3, r3, #16
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 8160 	beq.w	8007c7c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80079bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c0:	f003 0310 	and.w	r3, r3, #16
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8159 	beq.w	8007c7c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ca:	2300      	movs	r3, #0
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ea:	2b40      	cmp	r3, #64	@ 0x40
 80079ec:	f040 80ce 	bne.w	8007b8c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 80a9 	beq.w	8007b58 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	f080 80a2 	bcs.w	8007b58 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a26:	f000 8088 	beq.w	8007b3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	330c      	adds	r3, #12
 8007a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1d9      	bne.n	8007a2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3314      	adds	r3, #20
 8007a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e1      	bne.n	8007a76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3314      	adds	r3, #20
 8007ab8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3314      	adds	r3, #20
 8007ad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ad6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007adc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e3      	bne.n	8007ab2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b0a:	f023 0310 	bic.w	r3, r3, #16
 8007b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	330c      	adds	r3, #12
 8007b18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007b1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e3      	bne.n	8007af8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fb fa3b 	bl	8002fb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f8d9 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007b56:	e0b3      	b.n	8007cc0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b60:	429a      	cmp	r2, r3
 8007b62:	f040 80ad 	bne.w	8007cc0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b70:	f040 80a6 	bne.w	8007cc0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f8c1 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
      return;
 8007b86:	e09b      	b.n	8007cc0 <HAL_UART_IRQHandler+0x548>
 8007b88:	08007e99 	.word	0x08007e99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 808e 	beq.w	8007cc4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 8089 	beq.w	8007cc4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	330c      	adds	r3, #12
 8007bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007bd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e3      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	f023 0301 	bic.w	r3, r3, #1
 8007c00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3314      	adds	r3, #20
 8007c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e3      	bne.n	8007bea <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	330c      	adds	r3, #12
 8007c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0310 	bic.w	r3, r3, #16
 8007c46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	330c      	adds	r3, #12
 8007c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c54:	61fa      	str	r2, [r7, #28]
 8007c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	69b9      	ldr	r1, [r7, #24]
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	617b      	str	r3, [r7, #20]
   return(result);
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e3      	bne.n	8007c30 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f847 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c7a:	e023      	b.n	8007cc4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <HAL_UART_IRQHandler+0x524>
 8007c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f910 	bl	8007eba <UART_Transmit_IT>
    return;
 8007c9a:	e014      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
 8007ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d008      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f950 	bl	8007f5a <UART_EndTransmit_IT>
    return;
 8007cba:	e004      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
    return;
 8007cbc:	bf00      	nop
 8007cbe:	e002      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007cc0:	bf00      	nop
 8007cc2:	e000      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007cc4:	bf00      	nop
  }
}
 8007cc6:	37e8      	adds	r7, #232	@ 0xe8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d30:	e03b      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d037      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3a:	f7fa faef 	bl	800231c <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	6a3a      	ldr	r2, [r7, #32]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d302      	bcc.n	8007d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e03a      	b.n	8007dca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d023      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b80      	cmp	r3, #128	@ 0x80
 8007d66:	d020      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b40      	cmp	r3, #64	@ 0x40
 8007d6c:	d01d      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d116      	bne.n	8007daa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f81d 	bl	8007dd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e00f      	b.n	8007dca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4013      	ands	r3, r2
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	bf0c      	ite	eq
 8007dba:	2301      	moveq	r3, #1
 8007dbc:	2300      	movne	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d0b4      	beq.n	8007d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b095      	sub	sp, #84	@ 0x54
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	330c      	adds	r3, #12
 8007df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8007dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3314      	adds	r3, #20
 8007e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3314      	adds	r3, #20
 8007e2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e36:	e841 2300 	strex	r3, r2, [r1]
 8007e3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1e5      	bne.n	8007e0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d119      	bne.n	8007e7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f023 0310 	bic.w	r3, r3, #16
 8007e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	330c      	adds	r3, #12
 8007e68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e6a:	61ba      	str	r2, [r7, #24]
 8007e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6979      	ldr	r1, [r7, #20]
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	613b      	str	r3, [r7, #16]
   return(result);
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e5      	bne.n	8007e4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e8c:	bf00      	nop
 8007e8e:	3754      	adds	r7, #84	@ 0x54
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f7ff ff21 	bl	8007cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eb2:	bf00      	nop
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b085      	sub	sp, #20
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b21      	cmp	r3, #33	@ 0x21
 8007ecc:	d13e      	bne.n	8007f4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed6:	d114      	bne.n	8007f02 <UART_Transmit_IT+0x48>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d110      	bne.n	8007f02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ef4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	1c9a      	adds	r2, r3, #2
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	621a      	str	r2, [r3, #32]
 8007f00:	e008      	b.n	8007f14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	1c59      	adds	r1, r3, #1
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	6211      	str	r1, [r2, #32]
 8007f0c:	781a      	ldrb	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	4619      	mov	r1, r3
 8007f22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10f      	bne.n	8007f48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	e000      	b.n	8007f4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f4c:	2302      	movs	r3, #2
  }
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fea6 	bl	8007ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b08c      	sub	sp, #48	@ 0x30
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b22      	cmp	r3, #34	@ 0x22
 8007fa4:	f040 80aa 	bne.w	80080fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb0:	d115      	bne.n	8007fde <UART_Receive_IT+0x54>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d111      	bne.n	8007fde <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd6:	1c9a      	adds	r2, r3, #2
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fdc:	e024      	b.n	8008028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fec:	d007      	beq.n	8007ffe <UART_Receive_IT+0x74>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <UART_Receive_IT+0x82>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	b2da      	uxtb	r2, r3
 8008006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	e008      	b.n	800801e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008018:	b2da      	uxtb	r2, r3
 800801a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29b      	uxth	r3, r3
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	4619      	mov	r1, r3
 8008036:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008038:	2b00      	cmp	r3, #0
 800803a:	d15d      	bne.n	80080f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0220 	bic.w	r2, r2, #32
 800804a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800805a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695a      	ldr	r2, [r3, #20]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0201 	bic.w	r2, r2, #1
 800806a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807e:	2b01      	cmp	r3, #1
 8008080:	d135      	bne.n	80080ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	613b      	str	r3, [r7, #16]
   return(result);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f023 0310 	bic.w	r3, r3, #16
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	330c      	adds	r3, #12
 80080a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a8:	623a      	str	r2, [r7, #32]
 80080aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	69f9      	ldr	r1, [r7, #28]
 80080ae:	6a3a      	ldr	r2, [r7, #32]
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e5      	bne.n	8008088 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0310 	and.w	r3, r3, #16
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	d10a      	bne.n	80080e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff fe0e 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
 80080ec:	e002      	b.n	80080f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff fdf6 	bl	8007ce0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	e002      	b.n	80080fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e000      	b.n	80080fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80080fc:	2302      	movs	r3, #2
  }
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3730      	adds	r7, #48	@ 0x30
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800810c:	b0c0      	sub	sp, #256	@ 0x100
 800810e:	af00      	add	r7, sp, #0
 8008110:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008124:	68d9      	ldr	r1, [r3, #12]
 8008126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	ea40 0301 	orr.w	r3, r0, r1
 8008130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	431a      	orrs	r2, r3
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	431a      	orrs	r2, r3
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008160:	f021 010c 	bic.w	r1, r1, #12
 8008164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800816e:	430b      	orrs	r3, r1
 8008170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800817e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008182:	6999      	ldr	r1, [r3, #24]
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	ea40 0301 	orr.w	r3, r0, r1
 800818e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	4b8f      	ldr	r3, [pc, #572]	@ (80083d4 <UART_SetConfig+0x2cc>)
 8008198:	429a      	cmp	r2, r3
 800819a:	d005      	beq.n	80081a8 <UART_SetConfig+0xa0>
 800819c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b8d      	ldr	r3, [pc, #564]	@ (80083d8 <UART_SetConfig+0x2d0>)
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d104      	bne.n	80081b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081a8:	f7fe fae0 	bl	800676c <HAL_RCC_GetPCLK2Freq>
 80081ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80081b0:	e003      	b.n	80081ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081b2:	f7fe fac7 	bl	8006744 <HAL_RCC_GetPCLK1Freq>
 80081b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081c4:	f040 810c 	bne.w	80083e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081cc:	2200      	movs	r2, #0
 80081ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081da:	4622      	mov	r2, r4
 80081dc:	462b      	mov	r3, r5
 80081de:	1891      	adds	r1, r2, r2
 80081e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081e2:	415b      	adcs	r3, r3
 80081e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081ea:	4621      	mov	r1, r4
 80081ec:	eb12 0801 	adds.w	r8, r2, r1
 80081f0:	4629      	mov	r1, r5
 80081f2:	eb43 0901 	adc.w	r9, r3, r1
 80081f6:	f04f 0200 	mov.w	r2, #0
 80081fa:	f04f 0300 	mov.w	r3, #0
 80081fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800820a:	4690      	mov	r8, r2
 800820c:	4699      	mov	r9, r3
 800820e:	4623      	mov	r3, r4
 8008210:	eb18 0303 	adds.w	r3, r8, r3
 8008214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008218:	462b      	mov	r3, r5
 800821a:	eb49 0303 	adc.w	r3, r9, r3
 800821e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800822e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008236:	460b      	mov	r3, r1
 8008238:	18db      	adds	r3, r3, r3
 800823a:	653b      	str	r3, [r7, #80]	@ 0x50
 800823c:	4613      	mov	r3, r2
 800823e:	eb42 0303 	adc.w	r3, r2, r3
 8008242:	657b      	str	r3, [r7, #84]	@ 0x54
 8008244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800824c:	f7f8 f818 	bl	8000280 <__aeabi_uldivmod>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4b61      	ldr	r3, [pc, #388]	@ (80083dc <UART_SetConfig+0x2d4>)
 8008256:	fba3 2302 	umull	r2, r3, r3, r2
 800825a:	095b      	lsrs	r3, r3, #5
 800825c:	011c      	lsls	r4, r3, #4
 800825e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008262:	2200      	movs	r2, #0
 8008264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008268:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800826c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	1891      	adds	r1, r2, r2
 8008276:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008278:	415b      	adcs	r3, r3
 800827a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800827c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008280:	4641      	mov	r1, r8
 8008282:	eb12 0a01 	adds.w	sl, r2, r1
 8008286:	4649      	mov	r1, r9
 8008288:	eb43 0b01 	adc.w	fp, r3, r1
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800829c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082a0:	4692      	mov	sl, r2
 80082a2:	469b      	mov	fp, r3
 80082a4:	4643      	mov	r3, r8
 80082a6:	eb1a 0303 	adds.w	r3, sl, r3
 80082aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082ae:	464b      	mov	r3, r9
 80082b0:	eb4b 0303 	adc.w	r3, fp, r3
 80082b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082cc:	460b      	mov	r3, r1
 80082ce:	18db      	adds	r3, r3, r3
 80082d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80082d2:	4613      	mov	r3, r2
 80082d4:	eb42 0303 	adc.w	r3, r2, r3
 80082d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80082da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082e2:	f7f7 ffcd 	bl	8000280 <__aeabi_uldivmod>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	4b3b      	ldr	r3, [pc, #236]	@ (80083dc <UART_SetConfig+0x2d4>)
 80082ee:	fba3 2301 	umull	r2, r3, r3, r1
 80082f2:	095b      	lsrs	r3, r3, #5
 80082f4:	2264      	movs	r2, #100	@ 0x64
 80082f6:	fb02 f303 	mul.w	r3, r2, r3
 80082fa:	1acb      	subs	r3, r1, r3
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008302:	4b36      	ldr	r3, [pc, #216]	@ (80083dc <UART_SetConfig+0x2d4>)
 8008304:	fba3 2302 	umull	r2, r3, r3, r2
 8008308:	095b      	lsrs	r3, r3, #5
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008310:	441c      	add	r4, r3
 8008312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008316:	2200      	movs	r2, #0
 8008318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800831c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008324:	4642      	mov	r2, r8
 8008326:	464b      	mov	r3, r9
 8008328:	1891      	adds	r1, r2, r2
 800832a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800832c:	415b      	adcs	r3, r3
 800832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008334:	4641      	mov	r1, r8
 8008336:	1851      	adds	r1, r2, r1
 8008338:	6339      	str	r1, [r7, #48]	@ 0x30
 800833a:	4649      	mov	r1, r9
 800833c:	414b      	adcs	r3, r1
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008340:	f04f 0200 	mov.w	r2, #0
 8008344:	f04f 0300 	mov.w	r3, #0
 8008348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800834c:	4659      	mov	r1, fp
 800834e:	00cb      	lsls	r3, r1, #3
 8008350:	4651      	mov	r1, sl
 8008352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008356:	4651      	mov	r1, sl
 8008358:	00ca      	lsls	r2, r1, #3
 800835a:	4610      	mov	r0, r2
 800835c:	4619      	mov	r1, r3
 800835e:	4603      	mov	r3, r0
 8008360:	4642      	mov	r2, r8
 8008362:	189b      	adds	r3, r3, r2
 8008364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008368:	464b      	mov	r3, r9
 800836a:	460a      	mov	r2, r1
 800836c:	eb42 0303 	adc.w	r3, r2, r3
 8008370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008380:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008388:	460b      	mov	r3, r1
 800838a:	18db      	adds	r3, r3, r3
 800838c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800838e:	4613      	mov	r3, r2
 8008390:	eb42 0303 	adc.w	r3, r2, r3
 8008394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800839a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800839e:	f7f7 ff6f 	bl	8000280 <__aeabi_uldivmod>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4b0d      	ldr	r3, [pc, #52]	@ (80083dc <UART_SetConfig+0x2d4>)
 80083a8:	fba3 1302 	umull	r1, r3, r3, r2
 80083ac:	095b      	lsrs	r3, r3, #5
 80083ae:	2164      	movs	r1, #100	@ 0x64
 80083b0:	fb01 f303 	mul.w	r3, r1, r3
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	3332      	adds	r3, #50	@ 0x32
 80083ba:	4a08      	ldr	r2, [pc, #32]	@ (80083dc <UART_SetConfig+0x2d4>)
 80083bc:	fba2 2303 	umull	r2, r3, r2, r3
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	f003 0207 	and.w	r2, r3, #7
 80083c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4422      	add	r2, r4
 80083ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083d0:	e106      	b.n	80085e0 <UART_SetConfig+0x4d8>
 80083d2:	bf00      	nop
 80083d4:	40011000 	.word	0x40011000
 80083d8:	40011400 	.word	0x40011400
 80083dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80083ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80083f2:	4642      	mov	r2, r8
 80083f4:	464b      	mov	r3, r9
 80083f6:	1891      	adds	r1, r2, r2
 80083f8:	6239      	str	r1, [r7, #32]
 80083fa:	415b      	adcs	r3, r3
 80083fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80083fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008402:	4641      	mov	r1, r8
 8008404:	1854      	adds	r4, r2, r1
 8008406:	4649      	mov	r1, r9
 8008408:	eb43 0501 	adc.w	r5, r3, r1
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	f04f 0300 	mov.w	r3, #0
 8008414:	00eb      	lsls	r3, r5, #3
 8008416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800841a:	00e2      	lsls	r2, r4, #3
 800841c:	4614      	mov	r4, r2
 800841e:	461d      	mov	r5, r3
 8008420:	4643      	mov	r3, r8
 8008422:	18e3      	adds	r3, r4, r3
 8008424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008428:	464b      	mov	r3, r9
 800842a:	eb45 0303 	adc.w	r3, r5, r3
 800842e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800843e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008442:	f04f 0200 	mov.w	r2, #0
 8008446:	f04f 0300 	mov.w	r3, #0
 800844a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800844e:	4629      	mov	r1, r5
 8008450:	008b      	lsls	r3, r1, #2
 8008452:	4621      	mov	r1, r4
 8008454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008458:	4621      	mov	r1, r4
 800845a:	008a      	lsls	r2, r1, #2
 800845c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008460:	f7f7 ff0e 	bl	8000280 <__aeabi_uldivmod>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4b60      	ldr	r3, [pc, #384]	@ (80085ec <UART_SetConfig+0x4e4>)
 800846a:	fba3 2302 	umull	r2, r3, r3, r2
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	011c      	lsls	r4, r3, #4
 8008472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008476:	2200      	movs	r2, #0
 8008478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800847c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008484:	4642      	mov	r2, r8
 8008486:	464b      	mov	r3, r9
 8008488:	1891      	adds	r1, r2, r2
 800848a:	61b9      	str	r1, [r7, #24]
 800848c:	415b      	adcs	r3, r3
 800848e:	61fb      	str	r3, [r7, #28]
 8008490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008494:	4641      	mov	r1, r8
 8008496:	1851      	adds	r1, r2, r1
 8008498:	6139      	str	r1, [r7, #16]
 800849a:	4649      	mov	r1, r9
 800849c:	414b      	adcs	r3, r1
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084ac:	4659      	mov	r1, fp
 80084ae:	00cb      	lsls	r3, r1, #3
 80084b0:	4651      	mov	r1, sl
 80084b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084b6:	4651      	mov	r1, sl
 80084b8:	00ca      	lsls	r2, r1, #3
 80084ba:	4610      	mov	r0, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	4603      	mov	r3, r0
 80084c0:	4642      	mov	r2, r8
 80084c2:	189b      	adds	r3, r3, r2
 80084c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084c8:	464b      	mov	r3, r9
 80084ca:	460a      	mov	r2, r1
 80084cc:	eb42 0303 	adc.w	r3, r2, r3
 80084d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084e0:	f04f 0200 	mov.w	r2, #0
 80084e4:	f04f 0300 	mov.w	r3, #0
 80084e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80084ec:	4649      	mov	r1, r9
 80084ee:	008b      	lsls	r3, r1, #2
 80084f0:	4641      	mov	r1, r8
 80084f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084f6:	4641      	mov	r1, r8
 80084f8:	008a      	lsls	r2, r1, #2
 80084fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80084fe:	f7f7 febf 	bl	8000280 <__aeabi_uldivmod>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4611      	mov	r1, r2
 8008508:	4b38      	ldr	r3, [pc, #224]	@ (80085ec <UART_SetConfig+0x4e4>)
 800850a:	fba3 2301 	umull	r2, r3, r3, r1
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	2264      	movs	r2, #100	@ 0x64
 8008512:	fb02 f303 	mul.w	r3, r2, r3
 8008516:	1acb      	subs	r3, r1, r3
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	3332      	adds	r3, #50	@ 0x32
 800851c:	4a33      	ldr	r2, [pc, #204]	@ (80085ec <UART_SetConfig+0x4e4>)
 800851e:	fba2 2303 	umull	r2, r3, r2, r3
 8008522:	095b      	lsrs	r3, r3, #5
 8008524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008528:	441c      	add	r4, r3
 800852a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800852e:	2200      	movs	r2, #0
 8008530:	673b      	str	r3, [r7, #112]	@ 0x70
 8008532:	677a      	str	r2, [r7, #116]	@ 0x74
 8008534:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008538:	4642      	mov	r2, r8
 800853a:	464b      	mov	r3, r9
 800853c:	1891      	adds	r1, r2, r2
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	415b      	adcs	r3, r3
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008548:	4641      	mov	r1, r8
 800854a:	1851      	adds	r1, r2, r1
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	4649      	mov	r1, r9
 8008550:	414b      	adcs	r3, r1
 8008552:	607b      	str	r3, [r7, #4]
 8008554:	f04f 0200 	mov.w	r2, #0
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008560:	4659      	mov	r1, fp
 8008562:	00cb      	lsls	r3, r1, #3
 8008564:	4651      	mov	r1, sl
 8008566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800856a:	4651      	mov	r1, sl
 800856c:	00ca      	lsls	r2, r1, #3
 800856e:	4610      	mov	r0, r2
 8008570:	4619      	mov	r1, r3
 8008572:	4603      	mov	r3, r0
 8008574:	4642      	mov	r2, r8
 8008576:	189b      	adds	r3, r3, r2
 8008578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800857a:	464b      	mov	r3, r9
 800857c:	460a      	mov	r2, r1
 800857e:	eb42 0303 	adc.w	r3, r2, r3
 8008582:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	663b      	str	r3, [r7, #96]	@ 0x60
 800858e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800859c:	4649      	mov	r1, r9
 800859e:	008b      	lsls	r3, r1, #2
 80085a0:	4641      	mov	r1, r8
 80085a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085a6:	4641      	mov	r1, r8
 80085a8:	008a      	lsls	r2, r1, #2
 80085aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80085ae:	f7f7 fe67 	bl	8000280 <__aeabi_uldivmod>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4b0d      	ldr	r3, [pc, #52]	@ (80085ec <UART_SetConfig+0x4e4>)
 80085b8:	fba3 1302 	umull	r1, r3, r3, r2
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	2164      	movs	r1, #100	@ 0x64
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	3332      	adds	r3, #50	@ 0x32
 80085ca:	4a08      	ldr	r2, [pc, #32]	@ (80085ec <UART_SetConfig+0x4e4>)
 80085cc:	fba2 2303 	umull	r2, r3, r2, r3
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	f003 020f 	and.w	r2, r3, #15
 80085d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4422      	add	r2, r4
 80085de:	609a      	str	r2, [r3, #8]
}
 80085e0:	bf00      	nop
 80085e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085e6:	46bd      	mov	sp, r7
 80085e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ec:	51eb851f 	.word	0x51eb851f

080085f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085f0:	b084      	sub	sp, #16
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	f107 001c 	add.w	r0, r7, #28
 80085fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008602:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008606:	2b01      	cmp	r3, #1
 8008608:	d123      	bne.n	8008652 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800861e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008632:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008636:	2b01      	cmp	r3, #1
 8008638:	d105      	bne.n	8008646 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f9dc 	bl	8008a04 <USB_CoreReset>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]
 8008650:	e01b      	b.n	800868a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f9d0 	bl	8008a04 <USB_CoreReset>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008668:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800866c:	2b00      	cmp	r3, #0
 800866e:	d106      	bne.n	800867e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008674:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	639a      	str	r2, [r3, #56]	@ 0x38
 800867c:	e005      	b.n	800868a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008682:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800868a:	7fbb      	ldrb	r3, [r7, #30]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d10b      	bne.n	80086a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f043 0206 	orr.w	r2, r3, #6
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f043 0220 	orr.w	r2, r3, #32
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086b4:	b004      	add	sp, #16
 80086b6:	4770      	bx	lr

080086b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f043 0201 	orr.w	r2, r3, #1
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f023 0201 	bic.w	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d115      	bne.n	800874a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800872a:	200a      	movs	r0, #10
 800872c:	f7f9 fe02 	bl	8002334 <HAL_Delay>
      ms += 10U;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	330a      	adds	r3, #10
 8008734:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f956 	bl	80089e8 <USB_GetMode>
 800873c:	4603      	mov	r3, r0
 800873e:	2b01      	cmp	r3, #1
 8008740:	d01e      	beq.n	8008780 <USB_SetCurrentMode+0x84>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2bc7      	cmp	r3, #199	@ 0xc7
 8008746:	d9f0      	bls.n	800872a <USB_SetCurrentMode+0x2e>
 8008748:	e01a      	b.n	8008780 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d115      	bne.n	800877c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800875c:	200a      	movs	r0, #10
 800875e:	f7f9 fde9 	bl	8002334 <HAL_Delay>
      ms += 10U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	330a      	adds	r3, #10
 8008766:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f93d 	bl	80089e8 <USB_GetMode>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d005      	beq.n	8008780 <USB_SetCurrentMode+0x84>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2bc7      	cmp	r3, #199	@ 0xc7
 8008778:	d9f0      	bls.n	800875c <USB_SetCurrentMode+0x60>
 800877a:	e001      	b.n	8008780 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e005      	b.n	800878c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2bc8      	cmp	r3, #200	@ 0xc8
 8008784:	d101      	bne.n	800878a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087ae:	d901      	bls.n	80087b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e01b      	b.n	80087ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	daf2      	bge.n	80087a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	019b      	lsls	r3, r3, #6
 80087c4:	f043 0220 	orr.w	r2, r3, #32
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087d8:	d901      	bls.n	80087de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e006      	b.n	80087ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f003 0320 	and.w	r3, r3, #32
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	d0f0      	beq.n	80087cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3301      	adds	r3, #1
 8008808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008810:	d901      	bls.n	8008816 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e018      	b.n	8008848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	daf2      	bge.n	8008804 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2210      	movs	r2, #16
 8008826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3301      	adds	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008834:	d901      	bls.n	800883a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e006      	b.n	8008848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	f003 0310 	and.w	r3, r3, #16
 8008842:	2b10      	cmp	r3, #16
 8008844:	d0f0      	beq.n	8008828 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008854:	b480      	push	{r7}
 8008856:	b089      	sub	sp, #36	@ 0x24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	4611      	mov	r1, r2
 8008860:	461a      	mov	r2, r3
 8008862:	460b      	mov	r3, r1
 8008864:	71fb      	strb	r3, [r7, #7]
 8008866:	4613      	mov	r3, r2
 8008868:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008872:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008876:	2b00      	cmp	r3, #0
 8008878:	d123      	bne.n	80088c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800887a:	88bb      	ldrh	r3, [r7, #4]
 800887c:	3303      	adds	r3, #3
 800887e:	089b      	lsrs	r3, r3, #2
 8008880:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008882:	2300      	movs	r3, #0
 8008884:	61bb      	str	r3, [r7, #24]
 8008886:	e018      	b.n	80088ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	031a      	lsls	r2, r3, #12
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	4413      	add	r3, r2
 8008890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008894:	461a      	mov	r2, r3
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	3301      	adds	r3, #1
 80088a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	3301      	adds	r3, #1
 80088a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	3301      	adds	r3, #1
 80088ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	3301      	adds	r3, #1
 80088b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	3301      	adds	r3, #1
 80088b8:	61bb      	str	r3, [r7, #24]
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d3e2      	bcc.n	8008888 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3724      	adds	r7, #36	@ 0x24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b08b      	sub	sp, #44	@ 0x2c
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	4613      	mov	r3, r2
 80088dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088e6:	88fb      	ldrh	r3, [r7, #6]
 80088e8:	089b      	lsrs	r3, r3, #2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088ee:	88fb      	ldrh	r3, [r7, #6]
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088f6:	2300      	movs	r3, #0
 80088f8:	623b      	str	r3, [r7, #32]
 80088fa:	e014      	b.n	8008926 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008906:	601a      	str	r2, [r3, #0]
    pDest++;
 8008908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890a:	3301      	adds	r3, #1
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	3301      	adds	r3, #1
 8008912:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	3301      	adds	r3, #1
 8008918:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	3301      	adds	r3, #1
 800891e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	3301      	adds	r3, #1
 8008924:	623b      	str	r3, [r7, #32]
 8008926:	6a3a      	ldr	r2, [r7, #32]
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	429a      	cmp	r2, r3
 800892c:	d3e6      	bcc.n	80088fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800892e:	8bfb      	ldrh	r3, [r7, #30]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01e      	beq.n	8008972 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800893e:	461a      	mov	r2, r3
 8008940:	f107 0310 	add.w	r3, r7, #16
 8008944:	6812      	ldr	r2, [r2, #0]
 8008946:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	fa22 f303 	lsr.w	r3, r2, r3
 8008954:	b2da      	uxtb	r2, r3
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	701a      	strb	r2, [r3, #0]
      i++;
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	3301      	adds	r3, #1
 800895e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	3301      	adds	r3, #1
 8008964:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008966:	8bfb      	ldrh	r3, [r7, #30]
 8008968:	3b01      	subs	r3, #1
 800896a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800896c:	8bfb      	ldrh	r3, [r7, #30]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1ea      	bne.n	8008948 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008974:	4618      	mov	r0, r3
 8008976:	372c      	adds	r7, #44	@ 0x2c
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4013      	ands	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008998:	68fb      	ldr	r3, [r7, #12]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b085      	sub	sp, #20
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	4013      	ands	r3, r2
 80089d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089da:	68bb      	ldr	r3, [r7, #8]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	f003 0301 	and.w	r3, r3, #1
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a1c:	d901      	bls.n	8008a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e022      	b.n	8008a68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	daf2      	bge.n	8008a10 <USB_CoreReset+0xc>

  count = 10U;
 8008a2a:	230a      	movs	r3, #10
 8008a2c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008a2e:	e002      	b.n	8008a36 <USB_CoreReset+0x32>
  {
    count--;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1f9      	bne.n	8008a30 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	f043 0201 	orr.w	r2, r3, #1
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a54:	d901      	bls.n	8008a5a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e006      	b.n	8008a68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d0f0      	beq.n	8008a48 <USB_CoreReset+0x44>

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a74:	b084      	sub	sp, #16
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b086      	sub	sp, #24
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a94:	461a      	mov	r2, r3
 8008a96:	2300      	movs	r3, #0
 8008a98:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aaa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d119      	bne.n	8008afe <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008aca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d10a      	bne.n	8008ae8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ae0:	f043 0304 	orr.w	r3, r3, #4
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	e014      	b.n	8008b12 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008af6:	f023 0304 	bic.w	r3, r3, #4
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	e009      	b.n	8008b12 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b0c:	f023 0304 	bic.w	r3, r3, #4
 8008b10:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b12:	2110      	movs	r1, #16
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff fe3d 	bl	8008794 <USB_FlushTxFifo>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff fe67 	bl	80087f8 <USB_FlushRxFifo>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008b34:	2300      	movs	r3, #0
 8008b36:	613b      	str	r3, [r7, #16]
 8008b38:	e015      	b.n	8008b66 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b46:	461a      	mov	r2, r3
 8008b48:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	3301      	adds	r3, #1
 8008b64:	613b      	str	r3, [r7, #16]
 8008b66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d3e3      	bcc.n	8008b3a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a18      	ldr	r2, [pc, #96]	@ (8008be4 <USB_HostInit+0x170>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d10b      	bne.n	8008ba0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a15      	ldr	r2, [pc, #84]	@ (8008be8 <USB_HostInit+0x174>)
 8008b94:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a14      	ldr	r2, [pc, #80]	@ (8008bec <USB_HostInit+0x178>)
 8008b9a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008b9e:	e009      	b.n	8008bb4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2280      	movs	r2, #128	@ 0x80
 8008ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a11      	ldr	r2, [pc, #68]	@ (8008bf0 <USB_HostInit+0x17c>)
 8008baa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a11      	ldr	r2, [pc, #68]	@ (8008bf4 <USB_HostInit+0x180>)
 8008bb0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008bb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d105      	bne.n	8008bc8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f043 0210 	orr.w	r2, r3, #16
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	699a      	ldr	r2, [r3, #24]
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <USB_HostInit+0x184>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008be0:	b004      	add	sp, #16
 8008be2:	4770      	bx	lr
 8008be4:	40040000 	.word	0x40040000
 8008be8:	01000200 	.word	0x01000200
 8008bec:	00e00300 	.word	0x00e00300
 8008bf0:	00600080 	.word	0x00600080
 8008bf4:	004000e0 	.word	0x004000e0
 8008bf8:	a3200008 	.word	0xa3200008

08008bfc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008c1a:	f023 0303 	bic.w	r3, r3, #3
 8008c1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008c34:	4313      	orrs	r3, r2
 8008c36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d107      	bne.n	8008c4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c44:	461a      	mov	r2, r3
 8008c46:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008c4a:	6053      	str	r3, [r2, #4]
 8008c4c:	e00c      	b.n	8008c68 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d107      	bne.n	8008c64 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008c60:	6053      	str	r3, [r2, #4]
 8008c62:	e001      	b.n	8008c68 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e000      	b.n	8008c6a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008c96:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ca4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008ca6:	2064      	movs	r0, #100	@ 0x64
 8008ca8:	f7f9 fb44 	bl	8002334 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cb8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008cba:	200a      	movs	r0, #10
 8008cbc:	f7f9 fb3a 	bl	8002334 <HAL_Delay>

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008cee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d109      	bne.n	8008d0e <USB_DriveVbus+0x44>
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d106      	bne.n	8008d0e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008d0c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d18:	d109      	bne.n	8008d2e <USB_DriveVbus+0x64>
 8008d1a:	78fb      	ldrb	r3, [r7, #3]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d106      	bne.n	8008d2e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d2c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	0c5b      	lsrs	r3, r3, #17
 8008d5a:	f003 0303 	and.w	r3, r3, #3
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b085      	sub	sp, #20
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	b29b      	uxth	r3, r3
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	4608      	mov	r0, r1
 8008d96:	4611      	mov	r1, r2
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	70fb      	strb	r3, [r7, #3]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	70bb      	strb	r3, [r7, #2]
 8008da2:	4613      	mov	r3, r2
 8008da4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008dc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d87c      	bhi.n	8008ec4 <USB_HC_Init+0x138>
 8008dca:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <USB_HC_Init+0x44>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008de1 	.word	0x08008de1
 8008dd4:	08008e87 	.word	0x08008e87
 8008dd8:	08008de1 	.word	0x08008de1
 8008ddc:	08008e49 	.word	0x08008e49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dec:	461a      	mov	r2, r3
 8008dee:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008df2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008df4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	da10      	bge.n	8008e1e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	78fa      	ldrb	r2, [r7, #3]
 8008e0c:	0151      	lsls	r1, r2, #5
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	440a      	add	r2, r1
 8008e12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e1a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008e1c:	e055      	b.n	8008eca <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a6f      	ldr	r2, [pc, #444]	@ (8008fe0 <USB_HC_Init+0x254>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d151      	bne.n	8008eca <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008e26:	78fb      	ldrb	r3, [r7, #3]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	78fa      	ldrb	r2, [r7, #3]
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008e44:	60d3      	str	r3, [r2, #12]
      break;
 8008e46:	e040      	b.n	8008eca <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e54:	461a      	mov	r2, r3
 8008e56:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008e5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008e5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da34      	bge.n	8008ece <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	78fa      	ldrb	r2, [r7, #3]
 8008e74:	0151      	lsls	r1, r2, #5
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	440a      	add	r2, r1
 8008e7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008e84:	e023      	b.n	8008ece <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e92:	461a      	mov	r2, r3
 8008e94:	f240 2325 	movw	r3, #549	@ 0x225
 8008e98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008e9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	da17      	bge.n	8008ed2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	78fa      	ldrb	r2, [r7, #3]
 8008eb2:	0151      	lsls	r1, r2, #5
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	440a      	add	r2, r1
 8008eb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ebc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008ec0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008ec2:	e006      	b.n	8008ed2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	77fb      	strb	r3, [r7, #31]
      break;
 8008ec8:	e004      	b.n	8008ed4 <USB_HC_Init+0x148>
      break;
 8008eca:	bf00      	nop
 8008ecc:	e002      	b.n	8008ed4 <USB_HC_Init+0x148>
      break;
 8008ece:	bf00      	nop
 8008ed0:	e000      	b.n	8008ed4 <USB_HC_Init+0x148>
      break;
 8008ed2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008ee6:	78fb      	ldrb	r3, [r7, #3]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	78fa      	ldrb	r2, [r7, #3]
 8008ef6:	0151      	lsls	r1, r2, #5
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	440a      	add	r2, r1
 8008efc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f00:	f043 0302 	orr.w	r3, r3, #2
 8008f04:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f0c:	699a      	ldr	r2, [r3, #24]
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	2101      	movs	r1, #1
 8008f16:	fa01 f303 	lsl.w	r3, r1, r3
 8008f1a:	6939      	ldr	r1, [r7, #16]
 8008f1c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008f20:	4313      	orrs	r3, r2
 8008f22:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008f30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	da03      	bge.n	8008f40 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f3c:	61bb      	str	r3, [r7, #24]
 8008f3e:	e001      	b.n	8008f44 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fef9 	bl	8008d3c <USB_GetHostSpeed>
 8008f4a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008f4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d106      	bne.n	8008f62 <USB_HC_Init+0x1d6>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d003      	beq.n	8008f62 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008f5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e001      	b.n	8008f66 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f66:	787b      	ldrb	r3, [r7, #1]
 8008f68:	059b      	lsls	r3, r3, #22
 8008f6a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008f6e:	78bb      	ldrb	r3, [r7, #2]
 8008f70:	02db      	lsls	r3, r3, #11
 8008f72:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f76:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008f78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f7c:	049b      	lsls	r3, r3, #18
 8008f7e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008f82:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008f84:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008f8a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f94:	78fa      	ldrb	r2, [r7, #3]
 8008f96:	0151      	lsls	r1, r2, #5
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	440a      	add	r2, r1
 8008f9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008fa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fa4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008fa6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d003      	beq.n	8008fb6 <USB_HC_Init+0x22a>
 8008fae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d10f      	bne.n	8008fd6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008fb6:	78fb      	ldrb	r3, [r7, #3]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	78fa      	ldrb	r2, [r7, #3]
 8008fc6:	0151      	lsls	r1, r2, #5
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	440a      	add	r2, r1
 8008fcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008fd4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008fd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3720      	adds	r7, #32
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	40040000 	.word	0x40040000

08008fe4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08c      	sub	sp, #48	@ 0x30
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	785b      	ldrb	r3, [r3, #1]
 8008ffa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008ffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009000:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4a5d      	ldr	r2, [pc, #372]	@ (800917c <USB_HC_StartXfer+0x198>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d12f      	bne.n	800906a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d11c      	bne.n	800904a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	7c9b      	ldrb	r3, [r3, #18]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <USB_HC_StartXfer+0x3c>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	7c9b      	ldrb	r3, [r3, #18]
 800901c:	2b02      	cmp	r3, #2
 800901e:	d124      	bne.n	800906a <USB_HC_StartXfer+0x86>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	799b      	ldrb	r3, [r3, #6]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d120      	bne.n	800906a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	015a      	lsls	r2, r3, #5
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	4413      	add	r3, r2
 8009030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	69fa      	ldr	r2, [r7, #28]
 8009038:	0151      	lsls	r1, r2, #5
 800903a:	6a3a      	ldr	r2, [r7, #32]
 800903c:	440a      	add	r2, r1
 800903e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009046:	60d3      	str	r3, [r2, #12]
 8009048:	e00f      	b.n	800906a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	791b      	ldrb	r3, [r3, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10b      	bne.n	800906a <USB_HC_StartXfer+0x86>
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	795b      	ldrb	r3, [r3, #5]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d107      	bne.n	800906a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	4619      	mov	r1, r3
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fb6b 	bl	800973c <USB_DoPing>
        return HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	e232      	b.n	80094d0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	799b      	ldrb	r3, [r3, #6]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d158      	bne.n	8009124 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009072:	2301      	movs	r3, #1
 8009074:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	78db      	ldrb	r3, [r3, #3]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800907e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	8a92      	ldrh	r2, [r2, #20]
 8009084:	fb03 f202 	mul.w	r2, r3, r2
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	61da      	str	r2, [r3, #28]
 800908c:	e07c      	b.n	8009188 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	7c9b      	ldrb	r3, [r3, #18]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d130      	bne.n	80090f8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	2bbc      	cmp	r3, #188	@ 0xbc
 800909c:	d918      	bls.n	80090d0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	8a9b      	ldrh	r3, [r3, #20]
 80090a2:	461a      	mov	r2, r3
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	69da      	ldr	r2, [r3, #28]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d003      	beq.n	80090c0 <USB_HC_StartXfer+0xdc>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d103      	bne.n	80090c8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2202      	movs	r2, #2
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	e05f      	b.n	8009188 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2201      	movs	r2, #1
 80090cc:	60da      	str	r2, [r3, #12]
 80090ce:	e05b      	b.n	8009188 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	6a1a      	ldr	r2, [r3, #32]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d007      	beq.n	80090f0 <USB_HC_StartXfer+0x10c>
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d003      	beq.n	80090f0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2204      	movs	r2, #4
 80090ec:	60da      	str	r2, [r3, #12]
 80090ee:	e04b      	b.n	8009188 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2203      	movs	r2, #3
 80090f4:	60da      	str	r2, [r3, #12]
 80090f6:	e047      	b.n	8009188 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d10d      	bne.n	800911a <USB_HC_StartXfer+0x136>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	8a92      	ldrh	r2, [r2, #20]
 8009106:	4293      	cmp	r3, r2
 8009108:	d907      	bls.n	800911a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800910a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	8a92      	ldrh	r2, [r2, #20]
 8009110:	fb03 f202 	mul.w	r2, r3, r2
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	61da      	str	r2, [r3, #28]
 8009118:	e036      	b.n	8009188 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6a1a      	ldr	r2, [r3, #32]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	61da      	str	r2, [r3, #28]
 8009122:	e031      	b.n	8009188 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d018      	beq.n	800915e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	6a1b      	ldr	r3, [r3, #32]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	8a92      	ldrh	r2, [r2, #20]
 8009134:	4413      	add	r3, r2
 8009136:	3b01      	subs	r3, #1
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	8a92      	ldrh	r2, [r2, #20]
 800913c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009140:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009142:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009144:	8b7b      	ldrh	r3, [r7, #26]
 8009146:	429a      	cmp	r2, r3
 8009148:	d90b      	bls.n	8009162 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800914a:	8b7b      	ldrh	r3, [r7, #26]
 800914c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800914e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	8a92      	ldrh	r2, [r2, #20]
 8009154:	fb03 f202 	mul.w	r2, r3, r2
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	61da      	str	r2, [r3, #28]
 800915c:	e001      	b.n	8009162 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800915e:	2301      	movs	r3, #1
 8009160:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	78db      	ldrb	r3, [r3, #3]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00a      	beq.n	8009180 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800916a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	8a92      	ldrh	r2, [r2, #20]
 8009170:	fb03 f202 	mul.w	r2, r3, r2
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	61da      	str	r2, [r3, #28]
 8009178:	e006      	b.n	8009188 <USB_HC_StartXfer+0x1a4>
 800917a:	bf00      	nop
 800917c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	6a1a      	ldr	r2, [r3, #32]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009190:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009192:	04d9      	lsls	r1, r3, #19
 8009194:	4ba3      	ldr	r3, [pc, #652]	@ (8009424 <USB_HC_StartXfer+0x440>)
 8009196:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009198:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	7d9b      	ldrb	r3, [r3, #22]
 800919e:	075b      	lsls	r3, r3, #29
 80091a0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091a4:	69f9      	ldr	r1, [r7, #28]
 80091a6:	0148      	lsls	r0, r1, #5
 80091a8:	6a39      	ldr	r1, [r7, #32]
 80091aa:	4401      	add	r1, r0
 80091ac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091b0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091b2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6999      	ldr	r1, [r3, #24]
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ca:	460a      	mov	r2, r1
 80091cc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bf0c      	ite	eq
 80091de:	2301      	moveq	r3, #1
 80091e0:	2300      	movne	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	69fa      	ldr	r2, [r7, #28]
 80091f6:	0151      	lsls	r1, r2, #5
 80091f8:	6a3a      	ldr	r2, [r7, #32]
 80091fa:	440a      	add	r2, r1
 80091fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009200:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009204:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	4413      	add	r3, r2
 800920e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	7e7b      	ldrb	r3, [r7, #25]
 8009216:	075b      	lsls	r3, r3, #29
 8009218:	69f9      	ldr	r1, [r7, #28]
 800921a:	0148      	lsls	r0, r1, #5
 800921c:	6a39      	ldr	r1, [r7, #32]
 800921e:	4401      	add	r1, r0
 8009220:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009224:	4313      	orrs	r3, r2
 8009226:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	799b      	ldrb	r3, [r3, #6]
 800922c:	2b01      	cmp	r3, #1
 800922e:	f040 80c3 	bne.w	80093b8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	7c5b      	ldrb	r3, [r3, #17]
 8009236:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800923c:	4313      	orrs	r3, r2
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	6a3a      	ldr	r2, [r7, #32]
 8009244:	440a      	add	r2, r1
 8009246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800924a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800924e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	4413      	add	r3, r2
 8009258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	0151      	lsls	r1, r2, #5
 8009262:	6a3a      	ldr	r2, [r7, #32]
 8009264:	440a      	add	r2, r1
 8009266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800926a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800926e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	79db      	ldrb	r3, [r3, #7]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d123      	bne.n	80092c0 <USB_HC_StartXfer+0x2dc>
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	78db      	ldrb	r3, [r3, #3]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d11f      	bne.n	80092c0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	4413      	add	r3, r2
 8009288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	69fa      	ldr	r2, [r7, #28]
 8009290:	0151      	lsls	r1, r2, #5
 8009292:	6a3a      	ldr	r2, [r7, #32]
 8009294:	440a      	add	r2, r1
 8009296:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800929a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800929e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	69fa      	ldr	r2, [r7, #28]
 80092b0:	0151      	lsls	r1, r2, #5
 80092b2:	6a3a      	ldr	r2, [r7, #32]
 80092b4:	440a      	add	r2, r1
 80092b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092be:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	7c9b      	ldrb	r3, [r3, #18]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d003      	beq.n	80092d0 <USB_HC_StartXfer+0x2ec>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	7c9b      	ldrb	r3, [r3, #18]
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d117      	bne.n	8009300 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d113      	bne.n	8009300 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	78db      	ldrb	r3, [r3, #3]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d10f      	bne.n	8009300 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	69fa      	ldr	r2, [r7, #28]
 80092f0:	0151      	lsls	r1, r2, #5
 80092f2:	6a3a      	ldr	r2, [r7, #32]
 80092f4:	440a      	add	r2, r1
 80092f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092fe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	7c9b      	ldrb	r3, [r3, #18]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d162      	bne.n	80093ce <USB_HC_StartXfer+0x3ea>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	78db      	ldrb	r3, [r3, #3]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d15e      	bne.n	80093ce <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	3b01      	subs	r3, #1
 8009316:	2b03      	cmp	r3, #3
 8009318:	d858      	bhi.n	80093cc <USB_HC_StartXfer+0x3e8>
 800931a:	a201      	add	r2, pc, #4	@ (adr r2, 8009320 <USB_HC_StartXfer+0x33c>)
 800931c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009320:	08009331 	.word	0x08009331
 8009324:	08009353 	.word	0x08009353
 8009328:	08009375 	.word	0x08009375
 800932c:	08009397 	.word	0x08009397
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	4413      	add	r3, r2
 8009338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	6a3a      	ldr	r2, [r7, #32]
 8009344:	440a      	add	r2, r1
 8009346:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800934a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800934e:	6053      	str	r3, [r2, #4]
          break;
 8009350:	e03d      	b.n	80093ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	4413      	add	r3, r2
 800935a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	6a3a      	ldr	r2, [r7, #32]
 8009366:	440a      	add	r2, r1
 8009368:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800936c:	f043 030e 	orr.w	r3, r3, #14
 8009370:	6053      	str	r3, [r2, #4]
          break;
 8009372:	e02c      	b.n	80093ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	4413      	add	r3, r2
 800937c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	0151      	lsls	r1, r2, #5
 8009386:	6a3a      	ldr	r2, [r7, #32]
 8009388:	440a      	add	r2, r1
 800938a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800938e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009392:	6053      	str	r3, [r2, #4]
          break;
 8009394:	e01b      	b.n	80093ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	4413      	add	r3, r2
 800939e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	69fa      	ldr	r2, [r7, #28]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	6a3a      	ldr	r2, [r7, #32]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093b4:	6053      	str	r3, [r2, #4]
          break;
 80093b6:	e00a      	b.n	80093ce <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093c4:	461a      	mov	r2, r3
 80093c6:	2300      	movs	r3, #0
 80093c8:	6053      	str	r3, [r2, #4]
 80093ca:	e000      	b.n	80093ce <USB_HC_StartXfer+0x3ea>
          break;
 80093cc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80093e4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	78db      	ldrb	r3, [r3, #3]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093f4:	613b      	str	r3, [r7, #16]
 80093f6:	e003      	b.n	8009400 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80093fe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009406:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	4413      	add	r3, r2
 8009410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009414:	461a      	mov	r2, r3
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d003      	beq.n	8009428 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	e055      	b.n	80094d0 <USB_HC_StartXfer+0x4ec>
 8009424:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	78db      	ldrb	r3, [r3, #3]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d14e      	bne.n	80094ce <USB_HC_StartXfer+0x4ea>
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d04a      	beq.n	80094ce <USB_HC_StartXfer+0x4ea>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	79db      	ldrb	r3, [r3, #7]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d146      	bne.n	80094ce <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	7c9b      	ldrb	r3, [r3, #18]
 8009444:	2b03      	cmp	r3, #3
 8009446:	d831      	bhi.n	80094ac <USB_HC_StartXfer+0x4c8>
 8009448:	a201      	add	r2, pc, #4	@ (adr r2, 8009450 <USB_HC_StartXfer+0x46c>)
 800944a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944e:	bf00      	nop
 8009450:	08009461 	.word	0x08009461
 8009454:	08009485 	.word	0x08009485
 8009458:	08009461 	.word	0x08009461
 800945c:	08009485 	.word	0x08009485
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	3303      	adds	r3, #3
 8009466:	089b      	lsrs	r3, r3, #2
 8009468:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800946a:	8afa      	ldrh	r2, [r7, #22]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	b29b      	uxth	r3, r3
 8009472:	429a      	cmp	r2, r3
 8009474:	d91c      	bls.n	80094b0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	f043 0220 	orr.w	r2, r3, #32
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	619a      	str	r2, [r3, #24]
        }
        break;
 8009482:	e015      	b.n	80094b0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6a1b      	ldr	r3, [r3, #32]
 8009488:	3303      	adds	r3, #3
 800948a:	089b      	lsrs	r3, r3, #2
 800948c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800948e:	8afa      	ldrh	r2, [r7, #22]
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	b29b      	uxth	r3, r3
 800949a:	429a      	cmp	r2, r3
 800949c:	d90a      	bls.n	80094b4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80094aa:	e003      	b.n	80094b4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80094ac:	bf00      	nop
 80094ae:	e002      	b.n	80094b6 <USB_HC_StartXfer+0x4d2>
        break;
 80094b0:	bf00      	nop
 80094b2:	e000      	b.n	80094b6 <USB_HC_StartXfer+0x4d2>
        break;
 80094b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6999      	ldr	r1, [r3, #24]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	785a      	ldrb	r2, [r3, #1]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	2000      	movs	r0, #0
 80094c6:	9000      	str	r0, [sp, #0]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f7ff f9c3 	bl	8008854 <USB_WritePacket>
  }

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3728      	adds	r7, #40	@ 0x28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	b29b      	uxth	r3, r3
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b089      	sub	sp, #36	@ 0x24
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	4413      	add	r3, r2
 800951a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	0c9b      	lsrs	r3, r3, #18
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	4413      	add	r3, r2
 8009530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	0fdb      	lsrs	r3, r3, #31
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	4413      	add	r3, r2
 8009546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	0fdb      	lsrs	r3, r3, #31
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f003 0320 	and.w	r3, r3, #32
 800955c:	2b20      	cmp	r3, #32
 800955e:	d10d      	bne.n	800957c <USB_HC_Halt+0x82>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <USB_HC_Halt+0x82>
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d002      	beq.n	8009578 <USB_HC_Halt+0x7e>
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b03      	cmp	r3, #3
 8009576:	d101      	bne.n	800957c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	e0d8      	b.n	800972e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d002      	beq.n	8009588 <USB_HC_Halt+0x8e>
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b02      	cmp	r3, #2
 8009586:	d173      	bne.n	8009670 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	4413      	add	r3, r2
 8009590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	0151      	lsls	r1, r2, #5
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	440a      	add	r2, r1
 800959e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f003 0320 	and.w	r3, r3, #32
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d14a      	bne.n	800964a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d133      	bne.n	8009628 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	0151      	lsls	r1, r2, #5
 80095d2:	69fa      	ldr	r2, [r7, #28]
 80095d4:	440a      	add	r2, r1
 80095d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	0151      	lsls	r1, r2, #5
 80095f2:	69fa      	ldr	r2, [r7, #28]
 80095f4:	440a      	add	r2, r1
 80095f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80095fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	3301      	adds	r3, #1
 8009604:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800960c:	d82e      	bhi.n	800966c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	4413      	add	r3, r2
 8009616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009624:	d0ec      	beq.n	8009600 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009626:	e081      	b.n	800972c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	4413      	add	r3, r2
 8009630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	0151      	lsls	r1, r2, #5
 800963a:	69fa      	ldr	r2, [r7, #28]
 800963c:	440a      	add	r2, r1
 800963e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009642:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009646:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009648:	e070      	b.n	800972c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4413      	add	r3, r2
 8009652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	440a      	add	r2, r1
 8009660:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009664:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009668:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800966a:	e05f      	b.n	800972c <USB_HC_Halt+0x232>
            break;
 800966c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800966e:	e05d      	b.n	800972c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	4413      	add	r3, r2
 8009678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	0151      	lsls	r1, r2, #5
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	440a      	add	r2, r1
 8009686:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800968a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800968e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d133      	bne.n	8009708 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	69fa      	ldr	r2, [r7, #28]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	0151      	lsls	r1, r2, #5
 80096d2:	69fa      	ldr	r2, [r7, #28]
 80096d4:	440a      	add	r2, r1
 80096d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	3301      	adds	r3, #1
 80096e4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096ec:	d81d      	bhi.n	800972a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009700:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009704:	d0ec      	beq.n	80096e0 <USB_HC_Halt+0x1e6>
 8009706:	e011      	b.n	800972c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	4413      	add	r3, r2
 8009710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	0151      	lsls	r1, r2, #5
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	440a      	add	r2, r1
 800971e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009722:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	e000      	b.n	800972c <USB_HC_Halt+0x232>
          break;
 800972a:	bf00      	nop
    }
  }

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3724      	adds	r7, #36	@ 0x24
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
	...

0800973c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009750:	2301      	movs	r3, #1
 8009752:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	04da      	lsls	r2, r3, #19
 8009758:	4b15      	ldr	r3, [pc, #84]	@ (80097b0 <USB_DoPing+0x74>)
 800975a:	4013      	ands	r3, r2
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	0151      	lsls	r1, r2, #5
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	440a      	add	r2, r1
 8009764:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009768:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800976c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	4413      	add	r3, r2
 8009776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009784:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800978c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	4413      	add	r3, r2
 8009796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800979a:	461a      	mov	r2, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	371c      	adds	r7, #28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	1ff80000 	.word	0x1ff80000

080097b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7fe ff86 	bl	80086da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097ce:	2110      	movs	r1, #16
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7fe ffdf 	bl	8008794 <USB_FlushTxFifo>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff f809 	bl	80087f8 <USB_FlushRxFifo>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80097f0:	2300      	movs	r3, #0
 80097f2:	61bb      	str	r3, [r7, #24]
 80097f4:	e01f      	b.n	8009836 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800980c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009814:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800981c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	4413      	add	r3, r2
 8009826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800982a:	461a      	mov	r2, r3
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	3301      	adds	r3, #1
 8009834:	61bb      	str	r3, [r7, #24]
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2b0f      	cmp	r3, #15
 800983a:	d9dc      	bls.n	80097f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800983c:	2300      	movs	r3, #0
 800983e:	61bb      	str	r3, [r7, #24]
 8009840:	e034      	b.n	80098ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	4413      	add	r3, r2
 800984a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009858:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009860:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009868:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	4413      	add	r3, r2
 8009872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009876:	461a      	mov	r2, r3
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3301      	adds	r3, #1
 8009880:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009888:	d80c      	bhi.n	80098a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	4413      	add	r3, r2
 8009892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800989c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098a0:	d0ec      	beq.n	800987c <USB_StopHost+0xc8>
 80098a2:	e000      	b.n	80098a6 <USB_StopHost+0xf2>
        break;
 80098a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	3301      	adds	r3, #1
 80098aa:	61bb      	str	r3, [r7, #24]
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	2b0f      	cmp	r3, #15
 80098b0:	d9c7      	bls.n	8009842 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098b8:	461a      	mov	r2, r3
 80098ba:	f04f 33ff 	mov.w	r3, #4294967295
 80098be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f04f 32ff 	mov.w	r2, #4294967295
 80098c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7fe fef5 	bl	80086b8 <USB_EnableGlobalInt>

  return ret;
 80098ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3720      	adds	r7, #32
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80098d8:	b590      	push	{r4, r7, lr}
 80098da:	b089      	sub	sp, #36	@ 0x24
 80098dc:	af04      	add	r7, sp, #16
 80098de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80098e0:	2301      	movs	r3, #1
 80098e2:	2202      	movs	r2, #2
 80098e4:	2102      	movs	r1, #2
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fc83 	bl	800a1f2 <USBH_FindInterface>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	2bff      	cmp	r3, #255	@ 0xff
 80098f4:	d002      	beq.n	80098fc <USBH_CDC_InterfaceInit+0x24>
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d901      	bls.n	8009900 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80098fc:	2302      	movs	r3, #2
 80098fe:	e13d      	b.n	8009b7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fc58 	bl	800a1ba <USBH_SelectInterface>
 800990a:	4603      	mov	r3, r0
 800990c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009914:	2302      	movs	r3, #2
 8009916:	e131      	b.n	8009b7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800991e:	2050      	movs	r0, #80	@ 0x50
 8009920:	f002 fb6a 	bl	800bff8 <malloc>
 8009924:	4603      	mov	r3, r0
 8009926:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009938:	2302      	movs	r3, #2
 800993a:	e11f      	b.n	8009b7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800993c:	2250      	movs	r2, #80	@ 0x50
 800993e:	2100      	movs	r1, #0
 8009940:	68b8      	ldr	r0, [r7, #8]
 8009942:	f002 fc37 	bl	800c1b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	211a      	movs	r1, #26
 800994c:	fb01 f303 	mul.w	r3, r1, r3
 8009950:	4413      	add	r3, r2
 8009952:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	b25b      	sxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	da15      	bge.n	800998a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	211a      	movs	r1, #26
 8009964:	fb01 f303 	mul.w	r3, r1, r3
 8009968:	4413      	add	r3, r2
 800996a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	211a      	movs	r1, #26
 800997a:	fb01 f303 	mul.w	r3, r1, r3
 800997e:	4413      	add	r3, r2
 8009980:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009984:	881a      	ldrh	r2, [r3, #0]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	785b      	ldrb	r3, [r3, #1]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 ffc4 	bl	800b91e <USBH_AllocPipe>
 8009996:	4603      	mov	r3, r0
 8009998:	461a      	mov	r2, r3
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	7819      	ldrb	r1, [r3, #0]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	7858      	ldrb	r0, [r3, #1]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	8952      	ldrh	r2, [r2, #10]
 80099b6:	9202      	str	r2, [sp, #8]
 80099b8:	2203      	movs	r2, #3
 80099ba:	9201      	str	r2, [sp, #4]
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	4623      	mov	r3, r4
 80099c0:	4602      	mov	r2, r0
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 ff7c 	bl	800b8c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2200      	movs	r2, #0
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f002 fa8b 	bl	800beec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80099d6:	2300      	movs	r3, #0
 80099d8:	2200      	movs	r2, #0
 80099da:	210a      	movs	r1, #10
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fc08 	bl	800a1f2 <USBH_FindInterface>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	2bff      	cmp	r3, #255	@ 0xff
 80099ea:	d002      	beq.n	80099f2 <USBH_CDC_InterfaceInit+0x11a>
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d901      	bls.n	80099f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80099f2:	2302      	movs	r3, #2
 80099f4:	e0c2      	b.n	8009b7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	211a      	movs	r1, #26
 80099fc:	fb01 f303 	mul.w	r3, r1, r3
 8009a00:	4413      	add	r3, r2
 8009a02:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	b25b      	sxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	da16      	bge.n	8009a3c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	211a      	movs	r1, #26
 8009a14:	fb01 f303 	mul.w	r3, r1, r3
 8009a18:	4413      	add	r3, r2
 8009a1a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a1e:	781a      	ldrb	r2, [r3, #0]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	211a      	movs	r1, #26
 8009a2a:	fb01 f303 	mul.w	r3, r1, r3
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a34:	881a      	ldrh	r2, [r3, #0]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	835a      	strh	r2, [r3, #26]
 8009a3a:	e015      	b.n	8009a68 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	211a      	movs	r1, #26
 8009a42:	fb01 f303 	mul.w	r3, r1, r3
 8009a46:	4413      	add	r3, r2
 8009a48:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a4c:	781a      	ldrb	r2, [r3, #0]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	211a      	movs	r1, #26
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a62:	881a      	ldrh	r2, [r3, #0]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	211a      	movs	r1, #26
 8009a6e:	fb01 f303 	mul.w	r3, r1, r3
 8009a72:	4413      	add	r3, r2
 8009a74:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	b25b      	sxtb	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	da16      	bge.n	8009aae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	211a      	movs	r1, #26
 8009a86:	fb01 f303 	mul.w	r3, r1, r3
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009a90:	781a      	ldrb	r2, [r3, #0]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	211a      	movs	r1, #26
 8009a9c:	fb01 f303 	mul.w	r3, r1, r3
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009aa6:	881a      	ldrh	r2, [r3, #0]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	835a      	strh	r2, [r3, #26]
 8009aac:	e015      	b.n	8009ada <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	211a      	movs	r1, #26
 8009ab4:	fb01 f303 	mul.w	r3, r1, r3
 8009ab8:	4413      	add	r3, r2
 8009aba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009abe:	781a      	ldrb	r2, [r3, #0]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	211a      	movs	r1, #26
 8009aca:	fb01 f303 	mul.w	r3, r1, r3
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009ad4:	881a      	ldrh	r2, [r3, #0]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	7b9b      	ldrb	r3, [r3, #14]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 ff1c 	bl	800b91e <USBH_AllocPipe>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	461a      	mov	r2, r3
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	7bdb      	ldrb	r3, [r3, #15]
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 ff12 	bl	800b91e <USBH_AllocPipe>
 8009afa:	4603      	mov	r3, r0
 8009afc:	461a      	mov	r2, r3
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	7b59      	ldrb	r1, [r3, #13]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	7b98      	ldrb	r0, [r3, #14]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	8b12      	ldrh	r2, [r2, #24]
 8009b1a:	9202      	str	r2, [sp, #8]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	9201      	str	r2, [sp, #4]
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	4623      	mov	r3, r4
 8009b24:	4602      	mov	r2, r0
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 feca 	bl	800b8c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	7b19      	ldrb	r1, [r3, #12]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	7bd8      	ldrb	r0, [r3, #15]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	8b52      	ldrh	r2, [r2, #26]
 8009b44:	9202      	str	r2, [sp, #8]
 8009b46:	2202      	movs	r2, #2
 8009b48:	9201      	str	r2, [sp, #4]
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	4623      	mov	r3, r4
 8009b4e:	4602      	mov	r2, r0
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 feb5 	bl	800b8c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	7b5b      	ldrb	r3, [r3, #13]
 8009b62:	2200      	movs	r2, #0
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f002 f9c0 	bl	800beec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	7b1b      	ldrb	r3, [r3, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f002 f9b9 	bl	800beec <USBH_LL_SetToggle>

  return USBH_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd90      	pop	{r4, r7, pc}

08009b84 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f001 feaa 	bl	800b8fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 fed5 	bl	800b960 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	7b1b      	ldrb	r3, [r3, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00e      	beq.n	8009be2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	7b1b      	ldrb	r3, [r3, #12]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 fe97 	bl	800b8fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	7b1b      	ldrb	r3, [r3, #12]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f001 fec2 	bl	800b960 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	7b5b      	ldrb	r3, [r3, #13]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00e      	beq.n	8009c08 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	7b5b      	ldrb	r3, [r3, #13]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f001 fe84 	bl	800b8fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	7b5b      	ldrb	r3, [r3, #13]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 feaf 	bl	800b960 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c1a:	69db      	ldr	r3, [r3, #28]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f002 f9f3 	bl	800c008 <free>
    phost->pActiveClass->pData = 0U;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c28:	2200      	movs	r2, #0
 8009c2a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3340      	adds	r3, #64	@ 0x40
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8b1 	bl	8009db6 <GetLineCoding>
 8009c54:	4603      	mov	r3, r0
 8009c56:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d105      	bne.n	8009c6a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c64:	2102      	movs	r1, #2
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009c94:	2b04      	cmp	r3, #4
 8009c96:	d877      	bhi.n	8009d88 <USBH_CDC_Process+0x114>
 8009c98:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca0 <USBH_CDC_Process+0x2c>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009cb5 	.word	0x08009cb5
 8009ca4:	08009cbb 	.word	0x08009cbb
 8009ca8:	08009ceb 	.word	0x08009ceb
 8009cac:	08009d5f 	.word	0x08009d5f
 8009cb0:	08009d6d 	.word	0x08009d6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb8:	e06d      	b.n	8009d96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f897 	bl	8009df4 <SetLineCoding>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d104      	bne.n	8009cda <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009cd8:	e058      	b.n	8009d8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d055      	beq.n	8009d8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2204      	movs	r2, #4
 8009ce4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009ce8:	e050      	b.n	8009d8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	3340      	adds	r3, #64	@ 0x40
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f860 	bl	8009db6 <GetLineCoding>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d126      	bne.n	8009d4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d12:	791b      	ldrb	r3, [r3, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d13b      	bne.n	8009d90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d133      	bne.n	8009d90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d12b      	bne.n	8009d90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d124      	bne.n	8009d90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f958 	bl	8009ffc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009d4c:	e020      	b.n	8009d90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d01d      	beq.n	8009d90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2204      	movs	r2, #4
 8009d58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009d5c:	e018      	b.n	8009d90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f867 	bl	8009e32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f8da 	bl	8009f1e <CDC_ProcessReception>
      break;
 8009d6a:	e014      	b.n	8009d96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f001 f81e 	bl	800adb0 <USBH_ClrFeature>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10a      	bne.n	8009d94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009d86:	e005      	b.n	8009d94 <USBH_CDC_Process+0x120>

    default:
      break;
 8009d88:	bf00      	nop
 8009d8a:	e004      	b.n	8009d96 <USBH_CDC_Process+0x122>
      break;
 8009d8c:	bf00      	nop
 8009d8e:	e002      	b.n	8009d96 <USBH_CDC_Process+0x122>
      break;
 8009d90:	bf00      	nop
 8009d92:	e000      	b.n	8009d96 <USBH_CDC_Process+0x122>
      break;
 8009d94:	bf00      	nop

  }

  return status;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	22a1      	movs	r2, #161	@ 0xa1
 8009dc4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2221      	movs	r2, #33	@ 0x21
 8009dca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2207      	movs	r2, #7
 8009ddc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2207      	movs	r2, #7
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 fb17 	bl	800b418 <USBH_CtlReq>
 8009dea:	4603      	mov	r3, r0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2221      	movs	r2, #33	@ 0x21
 8009e02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2220      	movs	r2, #32
 8009e08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2207      	movs	r2, #7
 8009e1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2207      	movs	r2, #7
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 faf8 	bl	800b418 <USBH_CtlReq>
 8009e28:	4603      	mov	r3, r0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af02      	add	r7, sp, #8
 8009e38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e44:	2300      	movs	r3, #0
 8009e46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d002      	beq.n	8009e58 <CDC_ProcessTransmission+0x26>
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d023      	beq.n	8009e9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009e56:	e05e      	b.n	8009f16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	8b12      	ldrh	r2, [r2, #24]
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d90b      	bls.n	8009e7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	69d9      	ldr	r1, [r3, #28]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	8b1a      	ldrh	r2, [r3, #24]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	7b5b      	ldrb	r3, [r3, #13]
 8009e70:	2001      	movs	r0, #1
 8009e72:	9000      	str	r0, [sp, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 fce0 	bl	800b83a <USBH_BulkSendData>
 8009e7a:	e00b      	b.n	8009e94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	7b5b      	ldrb	r3, [r3, #13]
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	9000      	str	r0, [sp, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f001 fcd3 	bl	800b83a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009e9c:	e03b      	b.n	8009f16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	7b5b      	ldrb	r3, [r3, #13]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 fff7 	bl	800be98 <USBH_LL_GetURBState>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009eae:	7afb      	ldrb	r3, [r7, #11]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d128      	bne.n	8009f06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	8b12      	ldrh	r2, [r2, #24]
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d90e      	bls.n	8009ede <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	8b12      	ldrh	r2, [r2, #24]
 8009ec8:	1a9a      	subs	r2, r3, r2
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	8b12      	ldrh	r2, [r2, #24]
 8009ed6:	441a      	add	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	61da      	str	r2, [r3, #28]
 8009edc:	e002      	b.n	8009ee4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009ef4:	e00e      	b.n	8009f14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f868 	bl	8009fd4 <USBH_CDC_TransmitCallback>
      break;
 8009f04:	e006      	b.n	8009f14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009f06:	7afb      	ldrb	r3, [r7, #11]
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d103      	bne.n	8009f14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009f14:	bf00      	nop
  }
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b086      	sub	sp, #24
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f30:	2300      	movs	r3, #0
 8009f32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d002      	beq.n	8009f44 <CDC_ProcessReception+0x26>
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d00e      	beq.n	8009f60 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8009f42:	e043      	b.n	8009fcc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	6a19      	ldr	r1, [r3, #32]
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	8b5a      	ldrh	r2, [r3, #26]
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	7b1b      	ldrb	r3, [r3, #12]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fc97 	bl	800b884 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2204      	movs	r2, #4
 8009f5a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009f5e:	e035      	b.n	8009fcc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	7b1b      	ldrb	r3, [r3, #12]
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f001 ff96 	bl	800be98 <USBH_LL_GetURBState>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009f70:	7cfb      	ldrb	r3, [r7, #19]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d129      	bne.n	8009fca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	7b1b      	ldrb	r3, [r3, #12]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 fef9 	bl	800bd74 <USBH_LL_GetLastXferSize>
 8009f82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d016      	beq.n	8009fbc <CDC_ProcessReception+0x9e>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	8b5b      	ldrh	r3, [r3, #26]
 8009f92:	461a      	mov	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d110      	bne.n	8009fbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1ad2      	subs	r2, r2, r3
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	6a1a      	ldr	r2, [r3, #32]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	441a      	add	r2, r3
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2203      	movs	r2, #3
 8009fb6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009fba:	e006      	b.n	8009fca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f80f 	bl	8009fe8 <USBH_CDC_ReceiveCallback>
      break;
 8009fca:	bf00      	nop
  }
}
 8009fcc:	bf00      	nop
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4613      	mov	r3, r2
 800a01c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a024:	2302      	movs	r3, #2
 800a026:	e029      	b.n	800a07c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	79fa      	ldrb	r2, [r7, #7]
 800a02c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f81f 	bl	800a084 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f001 fdc9 	bl	800bc0c <USBH_LL_Init>

  return USBH_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a08c:	2300      	movs	r3, #0
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	e009      	b.n	800a0a6 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	33e0      	adds	r3, #224	@ 0xe0
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	2200      	movs	r2, #0
 800a09e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b0f      	cmp	r3, #15
 800a0aa:	d9f2      	bls.n	800a092 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	60fb      	str	r3, [r7, #12]
 800a0b0:	e009      	b.n	800a0c6 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a0bc:	2200      	movs	r2, #0
 800a0be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0cc:	d3f1      	bcc.n	800a0b2 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2240      	movs	r2, #64	@ 0x40
 800a0f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	331c      	adds	r3, #28
 800a11e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a122:	2100      	movs	r1, #0
 800a124:	4618      	mov	r0, r3
 800a126:	f002 f845 	bl	800c1b4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a134:	2100      	movs	r1, #0
 800a136:	4618      	mov	r0, r3
 800a138:	f002 f83c 	bl	800c1b4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a142:	2212      	movs	r2, #18
 800a144:	2100      	movs	r1, #0
 800a146:	4618      	mov	r0, r3
 800a148:	f002 f834 	bl	800c1b4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a152:	223e      	movs	r2, #62	@ 0x3e
 800a154:	2100      	movs	r1, #0
 800a156:	4618      	mov	r0, r3
 800a158:	f002 f82c 	bl	800c1b4 <memset>

  return USBH_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a166:	b480      	push	{r7}
 800a168:	b085      	sub	sp, #20
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d016      	beq.n	800a1a8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10e      	bne.n	800a1a2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a18a:	1c59      	adds	r1, r3, #1
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	33de      	adds	r3, #222	@ 0xde
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
 800a1a0:	e004      	b.n	800a1ac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	73fb      	strb	r3, [r7, #15]
 800a1a6:	e001      	b.n	800a1ac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a1d0:	78fa      	ldrb	r2, [r7, #3]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d204      	bcs.n	800a1e0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a1de:	e001      	b.n	800a1e4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b087      	sub	sp, #28
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	461a      	mov	r2, r3
 800a200:	4603      	mov	r3, r0
 800a202:	70fb      	strb	r3, [r7, #3]
 800a204:	460b      	mov	r3, r1
 800a206:	70bb      	strb	r3, [r7, #2]
 800a208:	4613      	mov	r3, r2
 800a20a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a210:	2300      	movs	r3, #0
 800a212:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a21a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a21c:	e025      	b.n	800a26a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	221a      	movs	r2, #26
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	3308      	adds	r3, #8
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4413      	add	r3, r2
 800a22c:	3302      	adds	r3, #2
 800a22e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	795b      	ldrb	r3, [r3, #5]
 800a234:	78fa      	ldrb	r2, [r7, #3]
 800a236:	429a      	cmp	r2, r3
 800a238:	d002      	beq.n	800a240 <USBH_FindInterface+0x4e>
 800a23a:	78fb      	ldrb	r3, [r7, #3]
 800a23c:	2bff      	cmp	r3, #255	@ 0xff
 800a23e:	d111      	bne.n	800a264 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a244:	78ba      	ldrb	r2, [r7, #2]
 800a246:	429a      	cmp	r2, r3
 800a248:	d002      	beq.n	800a250 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a24a:	78bb      	ldrb	r3, [r7, #2]
 800a24c:	2bff      	cmp	r3, #255	@ 0xff
 800a24e:	d109      	bne.n	800a264 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a254:	787a      	ldrb	r2, [r7, #1]
 800a256:	429a      	cmp	r2, r3
 800a258:	d002      	beq.n	800a260 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a25a:	787b      	ldrb	r3, [r7, #1]
 800a25c:	2bff      	cmp	r3, #255	@ 0xff
 800a25e:	d101      	bne.n	800a264 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	e006      	b.n	800a272 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a264:	7dfb      	ldrb	r3, [r7, #23]
 800a266:	3301      	adds	r3, #1
 800a268:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d9d6      	bls.n	800a21e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a270:	23ff      	movs	r3, #255	@ 0xff
}
 800a272:	4618      	mov	r0, r3
 800a274:	371c      	adds	r7, #28
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 fcfc 	bl	800bc84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a28c:	2101      	movs	r1, #1
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f001 fe15 	bl	800bebe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
	...

0800a2a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af04      	add	r7, sp, #16
 800a2a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d102      	bne.n	800a2c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2203      	movs	r2, #3
 800a2c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b0b      	cmp	r3, #11
 800a2ca:	f200 81bc 	bhi.w	800a646 <USBH_Process+0x3a6>
 800a2ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d4 <USBH_Process+0x34>)
 800a2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d4:	0800a305 	.word	0x0800a305
 800a2d8:	0800a337 	.word	0x0800a337
 800a2dc:	0800a3a1 	.word	0x0800a3a1
 800a2e0:	0800a5e1 	.word	0x0800a5e1
 800a2e4:	0800a647 	.word	0x0800a647
 800a2e8:	0800a441 	.word	0x0800a441
 800a2ec:	0800a587 	.word	0x0800a587
 800a2f0:	0800a477 	.word	0x0800a477
 800a2f4:	0800a497 	.word	0x0800a497
 800a2f8:	0800a4b5 	.word	0x0800a4b5
 800a2fc:	0800a4f9 	.word	0x0800a4f9
 800a300:	0800a5c9 	.word	0x0800a5c9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 819c 	beq.w	800a64a <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a318:	20c8      	movs	r0, #200	@ 0xc8
 800a31a:	f001 fe1a 	bl	800bf52 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f001 fd0d 	bl	800bd3e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a334:	e189      	b.n	800a64a <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d107      	bne.n	800a352 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2202      	movs	r2, #2
 800a34e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a350:	e18a      	b.n	800a668 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a358:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a35c:	d914      	bls.n	800a388 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a364:	3301      	adds	r3, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a374:	2b03      	cmp	r3, #3
 800a376:	d903      	bls.n	800a380 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	220d      	movs	r2, #13
 800a37c:	701a      	strb	r2, [r3, #0]
      break;
 800a37e:	e173      	b.n	800a668 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	701a      	strb	r2, [r3, #0]
      break;
 800a386:	e16f      	b.n	800a668 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a38e:	f103 020a 	add.w	r2, r3, #10
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a398:	200a      	movs	r0, #10
 800a39a:	f001 fdda 	bl	800bf52 <USBH_Delay>
      break;
 800a39e:	e163      	b.n	800a668 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d005      	beq.n	800a3b6 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a3b0:	2104      	movs	r1, #4
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a3b6:	2064      	movs	r0, #100	@ 0x64
 800a3b8:	f001 fdcb 	bl	800bf52 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 fc97 	bl	800bcf0 <USBH_LL_GetSpeed>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2205      	movs	r2, #5
 800a3d0:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f001 faa2 	bl	800b91e <USBH_AllocPipe>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	461a      	mov	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a3e2:	2180      	movs	r1, #128	@ 0x80
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 fa9a 	bl	800b91e <USBH_AllocPipe>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	7919      	ldrb	r1, [r3, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a406:	9202      	str	r2, [sp, #8]
 800a408:	2200      	movs	r2, #0
 800a40a:	9201      	str	r2, [sp, #4]
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	4603      	mov	r3, r0
 800a410:	2280      	movs	r2, #128	@ 0x80
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fa54 	bl	800b8c0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7959      	ldrb	r1, [r3, #5]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a42c:	9202      	str	r2, [sp, #8]
 800a42e:	2200      	movs	r2, #0
 800a430:	9201      	str	r2, [sp, #4]
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	4603      	mov	r3, r0
 800a436:	2200      	movs	r2, #0
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f001 fa41 	bl	800b8c0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a43e:	e113      	b.n	800a668 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f917 	bl	800a674 <USBH_HandleEnum>
 800a446:	4603      	mov	r3, r0
 800a448:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f040 80fd 	bne.w	800a64e <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a462:	2b01      	cmp	r3, #1
 800a464:	d103      	bne.n	800a46e <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2208      	movs	r2, #8
 800a46a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a46c:	e0ef      	b.n	800a64e <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2207      	movs	r2, #7
 800a472:	701a      	strb	r2, [r3, #0]
      break;
 800a474:	e0eb      	b.n	800a64e <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 80e8 	beq.w	800a652 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a488:	2101      	movs	r1, #1
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2208      	movs	r2, #8
 800a492:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a494:	e0dd      	b.n	800a652 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fc3f 	bl	800ad22 <USBH_SetCfg>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f040 80d5 	bne.w	800a656 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2209      	movs	r2, #9
 800a4b0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a4b2:	e0d0      	b.n	800a656 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a4ba:	f003 0320 	and.w	r3, r3, #32
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d016      	beq.n	800a4f0 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fc4f 	bl	800ad68 <USBH_SetFeature>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d103      	bne.n	800a4de <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	220a      	movs	r2, #10
 800a4da:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a4dc:	e0bd      	b.n	800a65a <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	f040 80b9 	bne.w	800a65a <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	220a      	movs	r2, #10
 800a4ec:	701a      	strb	r2, [r3, #0]
      break;
 800a4ee:	e0b4      	b.n	800a65a <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	220a      	movs	r2, #10
 800a4f4:	701a      	strb	r2, [r3, #0]
      break;
 800a4f6:	e0b0      	b.n	800a65a <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 80ad 	beq.w	800a65e <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
 800a510:	e016      	b.n	800a540 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a512:	7bfa      	ldrb	r2, [r7, #15]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	32de      	adds	r2, #222	@ 0xde
 800a518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51c:	791a      	ldrb	r2, [r3, #4]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a524:	429a      	cmp	r2, r3
 800a526:	d108      	bne.n	800a53a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a528:	7bfa      	ldrb	r2, [r7, #15]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	32de      	adds	r2, #222	@ 0xde
 800a52e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a538:	e005      	b.n	800a546 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
 800a53c:	3301      	adds	r3, #1
 800a53e:	73fb      	strb	r3, [r7, #15]
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0e5      	beq.n	800a512 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d016      	beq.n	800a57e <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	4798      	blx	r3
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d109      	bne.n	800a576 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2206      	movs	r2, #6
 800a566:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a56e:	2103      	movs	r1, #3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a574:	e073      	b.n	800a65e <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	220d      	movs	r2, #13
 800a57a:	701a      	strb	r2, [r3, #0]
      break;
 800a57c:	e06f      	b.n	800a65e <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	220d      	movs	r2, #13
 800a582:	701a      	strb	r2, [r3, #0]
      break;
 800a584:	e06b      	b.n	800a65e <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d017      	beq.n	800a5c0 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	4798      	blx	r3
 800a59c:	4603      	mov	r3, r0
 800a59e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d103      	bne.n	800a5b0 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	220b      	movs	r2, #11
 800a5ac:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a5ae:	e058      	b.n	800a662 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d154      	bne.n	800a662 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	220d      	movs	r2, #13
 800a5bc:	701a      	strb	r2, [r3, #0]
      break;
 800a5be:	e050      	b.n	800a662 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	220d      	movs	r2, #13
 800a5c4:	701a      	strb	r2, [r3, #0]
      break;
 800a5c6:	e04c      	b.n	800a662 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d049      	beq.n	800a666 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	4798      	blx	r3
      }
      break;
 800a5de:	e042      	b.n	800a666 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff fd4b 	bl	800a084 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d009      	beq.n	800a60c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a612:	2b00      	cmp	r3, #0
 800a614:	d005      	beq.n	800a622 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a61c:	2105      	movs	r1, #5
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d107      	bne.n	800a63e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff fe21 	bl	800a27e <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a63c:	e014      	b.n	800a668 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 fb20 	bl	800bc84 <USBH_LL_Start>
      break;
 800a644:	e010      	b.n	800a668 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a646:	bf00      	nop
 800a648:	e00e      	b.n	800a668 <USBH_Process+0x3c8>
      break;
 800a64a:	bf00      	nop
 800a64c:	e00c      	b.n	800a668 <USBH_Process+0x3c8>
      break;
 800a64e:	bf00      	nop
 800a650:	e00a      	b.n	800a668 <USBH_Process+0x3c8>
    break;
 800a652:	bf00      	nop
 800a654:	e008      	b.n	800a668 <USBH_Process+0x3c8>
      break;
 800a656:	bf00      	nop
 800a658:	e006      	b.n	800a668 <USBH_Process+0x3c8>
      break;
 800a65a:	bf00      	nop
 800a65c:	e004      	b.n	800a668 <USBH_Process+0x3c8>
      break;
 800a65e:	bf00      	nop
 800a660:	e002      	b.n	800a668 <USBH_Process+0x3c8>
      break;
 800a662:	bf00      	nop
 800a664:	e000      	b.n	800a668 <USBH_Process+0x3c8>
      break;
 800a666:	bf00      	nop
  }
  return USBH_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop

0800a674 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af04      	add	r7, sp, #16
 800a67a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a680:	2301      	movs	r3, #1
 800a682:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	785b      	ldrb	r3, [r3, #1]
 800a688:	2b07      	cmp	r3, #7
 800a68a:	f200 81bd 	bhi.w	800aa08 <USBH_HandleEnum+0x394>
 800a68e:	a201      	add	r2, pc, #4	@ (adr r2, 800a694 <USBH_HandleEnum+0x20>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6b5 	.word	0x0800a6b5
 800a698:	0800a76f 	.word	0x0800a76f
 800a69c:	0800a7d9 	.word	0x0800a7d9
 800a6a0:	0800a863 	.word	0x0800a863
 800a6a4:	0800a8cd 	.word	0x0800a8cd
 800a6a8:	0800a93d 	.word	0x0800a93d
 800a6ac:	0800a983 	.word	0x0800a983
 800a6b0:	0800a9c9 	.word	0x0800a9c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a6b4:	2108      	movs	r1, #8
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fa50 	bl	800ab5c <USBH_Get_DevDesc>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d12e      	bne.n	800a724 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	7919      	ldrb	r1, [r3, #4]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a6ea:	9202      	str	r2, [sp, #8]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	9201      	str	r2, [sp, #4]
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2280      	movs	r2, #128	@ 0x80
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f001 f8e2 	bl	800b8c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	7959      	ldrb	r1, [r3, #5]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a710:	9202      	str	r2, [sp, #8]
 800a712:	2200      	movs	r2, #0
 800a714:	9201      	str	r2, [sp, #4]
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	4603      	mov	r3, r0
 800a71a:	2200      	movs	r2, #0
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f001 f8cf 	bl	800b8c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a722:	e173      	b.n	800aa0c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	2b03      	cmp	r3, #3
 800a728:	f040 8170 	bne.w	800aa0c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a732:	3301      	adds	r3, #1
 800a734:	b2da      	uxtb	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a742:	2b03      	cmp	r3, #3
 800a744:	d903      	bls.n	800a74e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	220d      	movs	r2, #13
 800a74a:	701a      	strb	r2, [r3, #0]
      break;
 800a74c:	e15e      	b.n	800aa0c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	795b      	ldrb	r3, [r3, #5]
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f001 f903 	bl	800b960 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	791b      	ldrb	r3, [r3, #4]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f8fd 	bl	800b960 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	701a      	strb	r2, [r3, #0]
      break;
 800a76c:	e14e      	b.n	800aa0c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a76e:	2112      	movs	r1, #18
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f9f3 	bl	800ab5c <USBH_Get_DevDesc>
 800a776:	4603      	mov	r3, r0
 800a778:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a77a:	7bbb      	ldrb	r3, [r7, #14]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d103      	bne.n	800a788 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2202      	movs	r2, #2
 800a784:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a786:	e143      	b.n	800aa10 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a788:	7bbb      	ldrb	r3, [r7, #14]
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	f040 8140 	bne.w	800aa10 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a796:	3301      	adds	r3, #1
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d903      	bls.n	800a7b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	220d      	movs	r2, #13
 800a7ae:	701a      	strb	r2, [r3, #0]
      break;
 800a7b0:	e12e      	b.n	800aa10 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	795b      	ldrb	r3, [r3, #5]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f001 f8d1 	bl	800b960 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	791b      	ldrb	r3, [r3, #4]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f001 f8cb 	bl	800b960 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]
      break;
 800a7d6:	e11b      	b.n	800aa10 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a7d8:	2101      	movs	r1, #1
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fa7d 	bl	800acda <USBH_SetAddress>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d130      	bne.n	800a84c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a7ea:	2002      	movs	r0, #2
 800a7ec:	f001 fbb1 	bl	800bf52 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2203      	movs	r2, #3
 800a7fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	7919      	ldrb	r1, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a812:	9202      	str	r2, [sp, #8]
 800a814:	2200      	movs	r2, #0
 800a816:	9201      	str	r2, [sp, #4]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4603      	mov	r3, r0
 800a81c:	2280      	movs	r2, #128	@ 0x80
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 f84e 	bl	800b8c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	7959      	ldrb	r1, [r3, #5]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a838:	9202      	str	r2, [sp, #8]
 800a83a:	2200      	movs	r2, #0
 800a83c:	9201      	str	r2, [sp, #4]
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	4603      	mov	r3, r0
 800a842:	2200      	movs	r2, #0
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 f83b 	bl	800b8c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a84a:	e0e3      	b.n	800aa14 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	2b03      	cmp	r3, #3
 800a850:	f040 80e0 	bne.w	800aa14 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	220d      	movs	r2, #13
 800a858:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	705a      	strb	r2, [r3, #1]
      break;
 800a860:	e0d8      	b.n	800aa14 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a862:	2109      	movs	r1, #9
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f9a5 	bl	800abb4 <USBH_Get_CfgDesc>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d103      	bne.n	800a87c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2204      	movs	r2, #4
 800a878:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a87a:	e0cd      	b.n	800aa18 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
 800a87e:	2b03      	cmp	r3, #3
 800a880:	f040 80ca 	bne.w	800aa18 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a88a:	3301      	adds	r3, #1
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d903      	bls.n	800a8a6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	220d      	movs	r2, #13
 800a8a2:	701a      	strb	r2, [r3, #0]
      break;
 800a8a4:	e0b8      	b.n	800aa18 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	795b      	ldrb	r3, [r3, #5]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f001 f857 	bl	800b960 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	791b      	ldrb	r3, [r3, #4]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f001 f851 	bl	800b960 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	701a      	strb	r2, [r3, #0]
      break;
 800a8ca:	e0a5      	b.n	800aa18 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f96d 	bl	800abb4 <USBH_Get_CfgDesc>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d103      	bne.n	800a8ec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2205      	movs	r2, #5
 800a8e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a8ea:	e097      	b.n	800aa1c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	f040 8094 	bne.w	800aa1c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d903      	bls.n	800a916 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	220d      	movs	r2, #13
 800a912:	701a      	strb	r2, [r3, #0]
      break;
 800a914:	e082      	b.n	800aa1c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	795b      	ldrb	r3, [r3, #5]
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f001 f81f 	bl	800b960 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	791b      	ldrb	r3, [r3, #4]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f001 f819 	bl	800b960 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	701a      	strb	r2, [r3, #0]
      break;
 800a93a:	e06f      	b.n	800aa1c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a942:	2b00      	cmp	r3, #0
 800a944:	d019      	beq.n	800a97a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a952:	23ff      	movs	r3, #255	@ 0xff
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f957 	bl	800ac08 <USBH_Get_StringDesc>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d103      	bne.n	800a96c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2206      	movs	r2, #6
 800a968:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a96a:	e059      	b.n	800aa20 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d156      	bne.n	800aa20 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2206      	movs	r2, #6
 800a976:	705a      	strb	r2, [r3, #1]
      break;
 800a978:	e052      	b.n	800aa20 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2206      	movs	r2, #6
 800a97e:	705a      	strb	r2, [r3, #1]
      break;
 800a980:	e04e      	b.n	800aa20 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d019      	beq.n	800a9c0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a998:	23ff      	movs	r3, #255	@ 0xff
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f934 	bl	800ac08 <USBH_Get_StringDesc>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d103      	bne.n	800a9b2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2207      	movs	r2, #7
 800a9ae:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a9b0:	e038      	b.n	800aa24 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d135      	bne.n	800aa24 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2207      	movs	r2, #7
 800a9bc:	705a      	strb	r2, [r3, #1]
      break;
 800a9be:	e031      	b.n	800aa24 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2207      	movs	r2, #7
 800a9c4:	705a      	strb	r2, [r3, #1]
      break;
 800a9c6:	e02d      	b.n	800aa24 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d017      	beq.n	800aa02 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a9de:	23ff      	movs	r3, #255	@ 0xff
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f911 	bl	800ac08 <USBH_Get_StringDesc>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d102      	bne.n	800a9f6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a9f4:	e018      	b.n	800aa28 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	2b03      	cmp	r3, #3
 800a9fa:	d115      	bne.n	800aa28 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
      break;
 800aa00:	e012      	b.n	800aa28 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]
      break;
 800aa06:	e00f      	b.n	800aa28 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800aa08:	bf00      	nop
 800aa0a:	e00e      	b.n	800aa2a <USBH_HandleEnum+0x3b6>
      break;
 800aa0c:	bf00      	nop
 800aa0e:	e00c      	b.n	800aa2a <USBH_HandleEnum+0x3b6>
      break;
 800aa10:	bf00      	nop
 800aa12:	e00a      	b.n	800aa2a <USBH_HandleEnum+0x3b6>
      break;
 800aa14:	bf00      	nop
 800aa16:	e008      	b.n	800aa2a <USBH_HandleEnum+0x3b6>
      break;
 800aa18:	bf00      	nop
 800aa1a:	e006      	b.n	800aa2a <USBH_HandleEnum+0x3b6>
      break;
 800aa1c:	bf00      	nop
 800aa1e:	e004      	b.n	800aa2a <USBH_HandleEnum+0x3b6>
      break;
 800aa20:	bf00      	nop
 800aa22:	e002      	b.n	800aa2a <USBH_HandleEnum+0x3b6>
      break;
 800aa24:	bf00      	nop
 800aa26:	e000      	b.n	800aa2a <USBH_HandleEnum+0x3b6>
      break;
 800aa28:	bf00      	nop
  }
  return Status;
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800aa46:	bf00      	nop
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b082      	sub	sp, #8
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f804 	bl	800aa76 <USBH_HandleSof>
}
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b0b      	cmp	r3, #11
 800aa86:	d10a      	bne.n	800aa9e <USBH_HandleSof+0x28>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	4798      	blx	r3
  }
}
 800aa9e:	bf00      	nop
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b083      	sub	sp, #12
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800aab6:	bf00      	nop
}
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b083      	sub	sp, #12
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800aada:	bf00      	nop
}
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 f8c0 	bl	800bcba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	791b      	ldrb	r3, [r3, #4]
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 ff0d 	bl	800b960 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	795b      	ldrb	r3, [r3, #5]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 ff07 	bl	800b960 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af02      	add	r7, sp, #8
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ab68:	887b      	ldrh	r3, [r7, #2]
 800ab6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab6e:	d901      	bls.n	800ab74 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e01b      	b.n	800abac <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ab7a:	887b      	ldrh	r3, [r7, #2]
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ab84:	2100      	movs	r1, #0
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f872 	bl	800ac70 <USBH_GetDescriptor>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d109      	bne.n	800abaa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ab9c:	887a      	ldrh	r2, [r7, #2]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f929 	bl	800adf8 <USBH_ParseDevDesc>
 800aba6:	4603      	mov	r3, r0
 800aba8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af02      	add	r7, sp, #8
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	460b      	mov	r3, r1
 800abbe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	331c      	adds	r3, #28
 800abc4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800abc6:	887b      	ldrh	r3, [r7, #2]
 800abc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abcc:	d901      	bls.n	800abd2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800abce:	2303      	movs	r3, #3
 800abd0:	e016      	b.n	800ac00 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800abd2:	887b      	ldrh	r3, [r7, #2]
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abdc:	2100      	movs	r1, #0
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f846 	bl	800ac70 <USBH_GetDescriptor>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d107      	bne.n	800abfe <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800abee:	887b      	ldrh	r3, [r7, #2]
 800abf0:	461a      	mov	r2, r3
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f9af 	bl	800af58 <USBH_ParseCfgDesc>
 800abfa:	4603      	mov	r3, r0
 800abfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	607a      	str	r2, [r7, #4]
 800ac12:	461a      	mov	r2, r3
 800ac14:	460b      	mov	r3, r1
 800ac16:	72fb      	strb	r3, [r7, #11]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ac1c:	893b      	ldrh	r3, [r7, #8]
 800ac1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac22:	d802      	bhi.n	800ac2a <USBH_Get_StringDesc+0x22>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d101      	bne.n	800ac2e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e01c      	b.n	800ac68 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ac2e:	7afb      	ldrb	r3, [r7, #11]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ac36:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ac3e:	893b      	ldrh	r3, [r7, #8]
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	460b      	mov	r3, r1
 800ac44:	2100      	movs	r1, #0
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 f812 	bl	800ac70 <USBH_GetDescriptor>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ac50:	7dfb      	ldrb	r3, [r7, #23]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d107      	bne.n	800ac66 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ac5c:	893a      	ldrh	r2, [r7, #8]
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 fb8c 	bl	800b37e <USBH_ParseStringDesc>
  }

  return status;
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	607b      	str	r3, [r7, #4]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	72fb      	strb	r3, [r7, #11]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	789b      	ldrb	r3, [r3, #2]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d11c      	bne.n	800acc4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ac8a:	7afb      	ldrb	r3, [r7, #11]
 800ac8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2206      	movs	r2, #6
 800ac9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	893a      	ldrh	r2, [r7, #8]
 800aca0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aca2:	893b      	ldrh	r3, [r7, #8]
 800aca4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acac:	d104      	bne.n	800acb8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f240 4209 	movw	r2, #1033	@ 0x409
 800acb4:	829a      	strh	r2, [r3, #20]
 800acb6:	e002      	b.n	800acbe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	8b3a      	ldrh	r2, [r7, #24]
 800acc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800acc4:	8b3b      	ldrh	r3, [r7, #24]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 fba4 	bl	800b418 <USBH_CtlReq>
 800acd0:	4603      	mov	r3, r0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	460b      	mov	r3, r1
 800ace4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	789b      	ldrb	r3, [r3, #2]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d10f      	bne.n	800ad0e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2205      	movs	r2, #5
 800acf8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800acfa:	78fb      	ldrb	r3, [r7, #3]
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2100      	movs	r1, #0
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fb80 	bl	800b418 <USBH_CtlReq>
 800ad18:	4603      	mov	r3, r0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	789b      	ldrb	r3, [r3, #2]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d10e      	bne.n	800ad54 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2209      	movs	r2, #9
 800ad40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	887a      	ldrh	r2, [r7, #2]
 800ad46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ad54:	2200      	movs	r2, #0
 800ad56:	2100      	movs	r1, #0
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fb5d 	bl	800b418 <USBH_CtlReq>
 800ad5e:	4603      	mov	r3, r0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	789b      	ldrb	r3, [r3, #2]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d10f      	bne.n	800ad9c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2203      	movs	r2, #3
 800ad86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ad88:	78fb      	ldrb	r3, [r7, #3]
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2100      	movs	r1, #0
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fb39 	bl	800b418 <USBH_CtlReq>
 800ada6:	4603      	mov	r3, r0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	789b      	ldrb	r3, [r3, #2]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d10f      	bne.n	800ade4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2202      	movs	r2, #2
 800adc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	b29a      	uxth	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ade4:	2200      	movs	r2, #0
 800ade6:	2100      	movs	r1, #0
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fb15 	bl	800b418 <USBH_CtlReq>
 800adee:	4603      	mov	r3, r0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b087      	sub	sp, #28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	4613      	mov	r3, r2
 800ae04:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ae0c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800ae18:	2302      	movs	r3, #2
 800ae1a:	e094      	b.n	800af46 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	781a      	ldrb	r2, [r3, #0]
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	785a      	ldrb	r2, [r3, #1]
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	3302      	adds	r3, #2
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	3303      	adds	r3, #3
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	021b      	lsls	r3, r3, #8
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	791a      	ldrb	r2, [r3, #4]
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	795a      	ldrb	r2, [r3, #5]
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	799a      	ldrb	r2, [r3, #6]
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	79da      	ldrb	r2, [r3, #7]
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d004      	beq.n	800ae7a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d11b      	bne.n	800aeb2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	79db      	ldrb	r3, [r3, #7]
 800ae7e:	2b20      	cmp	r3, #32
 800ae80:	dc0f      	bgt.n	800aea2 <USBH_ParseDevDesc+0xaa>
 800ae82:	2b08      	cmp	r3, #8
 800ae84:	db0f      	blt.n	800aea6 <USBH_ParseDevDesc+0xae>
 800ae86:	3b08      	subs	r3, #8
 800ae88:	4a32      	ldr	r2, [pc, #200]	@ (800af54 <USBH_ParseDevDesc+0x15c>)
 800ae8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bf14      	ite	ne
 800ae96:	2301      	movne	r3, #1
 800ae98:	2300      	moveq	r3, #0
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d106      	bne.n	800aeae <USBH_ParseDevDesc+0xb6>
 800aea0:	e001      	b.n	800aea6 <USBH_ParseDevDesc+0xae>
 800aea2:	2b40      	cmp	r3, #64	@ 0x40
 800aea4:	d003      	beq.n	800aeae <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	2208      	movs	r2, #8
 800aeaa:	71da      	strb	r2, [r3, #7]
        break;
 800aeac:	e000      	b.n	800aeb0 <USBH_ParseDevDesc+0xb8>
        break;
 800aeae:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800aeb0:	e00e      	b.n	800aed0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d107      	bne.n	800aecc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	79db      	ldrb	r3, [r3, #7]
 800aec0:	2b08      	cmp	r3, #8
 800aec2:	d005      	beq.n	800aed0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	2208      	movs	r2, #8
 800aec8:	71da      	strb	r2, [r3, #7]
 800aeca:	e001      	b.n	800aed0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800aecc:	2303      	movs	r3, #3
 800aece:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800aed0:	88fb      	ldrh	r3, [r7, #6]
 800aed2:	2b08      	cmp	r3, #8
 800aed4:	d936      	bls.n	800af44 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	3308      	adds	r3, #8
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	461a      	mov	r2, r3
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	3309      	adds	r3, #9
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	021b      	lsls	r3, r3, #8
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	4313      	orrs	r3, r2
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	330a      	adds	r3, #10
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	330b      	adds	r3, #11
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	021b      	lsls	r3, r3, #8
 800af00:	b29b      	uxth	r3, r3
 800af02:	4313      	orrs	r3, r2
 800af04:	b29a      	uxth	r2, r3
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	330c      	adds	r3, #12
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	461a      	mov	r2, r3
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	330d      	adds	r3, #13
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	021b      	lsls	r3, r3, #8
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	4313      	orrs	r3, r2
 800af1e:	b29a      	uxth	r2, r3
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	7b9a      	ldrb	r2, [r3, #14]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	7bda      	ldrb	r2, [r3, #15]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	7c1a      	ldrb	r2, [r3, #16]
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	7c5a      	ldrb	r2, [r3, #17]
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
}
 800af46:	4618      	mov	r0, r3
 800af48:	371c      	adds	r7, #28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	01000101 	.word	0x01000101

0800af58 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08c      	sub	sp, #48	@ 0x30
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	4613      	mov	r3, r2
 800af64:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800af6c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800af74:	2300      	movs	r3, #0
 800af76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800af7a:	2300      	movs	r3, #0
 800af7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800af86:	2302      	movs	r3, #2
 800af88:	e0de      	b.n	800b148 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800af8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b09      	cmp	r3, #9
 800af94:	d002      	beq.n	800af9c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800af96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af98:	2209      	movs	r2, #9
 800af9a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	781a      	ldrb	r2, [r3, #0]
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	785a      	ldrb	r2, [r3, #1]
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	3302      	adds	r3, #2
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	3303      	adds	r3, #3
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	021b      	lsls	r3, r3, #8
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	4313      	orrs	r3, r2
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afc6:	bf28      	it	cs
 800afc8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800afcc:	b29a      	uxth	r2, r3
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	791a      	ldrb	r2, [r3, #4]
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	795a      	ldrb	r2, [r3, #5]
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	799a      	ldrb	r2, [r3, #6]
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	79da      	ldrb	r2, [r3, #7]
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	7a1a      	ldrb	r2, [r3, #8]
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800affa:	88fb      	ldrh	r3, [r7, #6]
 800affc:	2b09      	cmp	r3, #9
 800affe:	f240 80a1 	bls.w	800b144 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b002:	2309      	movs	r3, #9
 800b004:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b006:	2300      	movs	r3, #0
 800b008:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b00a:	e085      	b.n	800b118 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b00c:	f107 0316 	add.w	r3, r7, #22
 800b010:	4619      	mov	r1, r3
 800b012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b014:	f000 f9e6 	bl	800b3e4 <USBH_GetNextDesc>
 800b018:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01c:	785b      	ldrb	r3, [r3, #1]
 800b01e:	2b04      	cmp	r3, #4
 800b020:	d17a      	bne.n	800b118 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b09      	cmp	r3, #9
 800b028:	d002      	beq.n	800b030 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b02c:	2209      	movs	r2, #9
 800b02e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b034:	221a      	movs	r2, #26
 800b036:	fb02 f303 	mul.w	r3, r2, r3
 800b03a:	3308      	adds	r3, #8
 800b03c:	6a3a      	ldr	r2, [r7, #32]
 800b03e:	4413      	add	r3, r2
 800b040:	3302      	adds	r3, #2
 800b042:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b046:	69f8      	ldr	r0, [r7, #28]
 800b048:	f000 f882 	bl	800b150 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b04c:	2300      	movs	r3, #0
 800b04e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b052:	2300      	movs	r3, #0
 800b054:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b056:	e043      	b.n	800b0e0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b058:	f107 0316 	add.w	r3, r7, #22
 800b05c:	4619      	mov	r1, r3
 800b05e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b060:	f000 f9c0 	bl	800b3e4 <USBH_GetNextDesc>
 800b064:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b068:	785b      	ldrb	r3, [r3, #1]
 800b06a:	2b05      	cmp	r3, #5
 800b06c:	d138      	bne.n	800b0e0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	795b      	ldrb	r3, [r3, #5]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d113      	bne.n	800b09e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d003      	beq.n	800b086 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	799b      	ldrb	r3, [r3, #6]
 800b082:	2b03      	cmp	r3, #3
 800b084:	d10b      	bne.n	800b09e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	79db      	ldrb	r3, [r3, #7]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10b      	bne.n	800b0a6 <USBH_ParseCfgDesc+0x14e>
 800b08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	2b09      	cmp	r3, #9
 800b094:	d007      	beq.n	800b0a6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b098:	2209      	movs	r2, #9
 800b09a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b09c:	e003      	b.n	800b0a6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a0:	2207      	movs	r2, #7
 800b0a2:	701a      	strb	r2, [r3, #0]
 800b0a4:	e000      	b.n	800b0a8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b0a6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b0b0:	3201      	adds	r2, #1
 800b0b2:	00d2      	lsls	r2, r2, #3
 800b0b4:	211a      	movs	r1, #26
 800b0b6:	fb01 f303 	mul.w	r3, r1, r3
 800b0ba:	4413      	add	r3, r2
 800b0bc:	3308      	adds	r3, #8
 800b0be:	6a3a      	ldr	r2, [r7, #32]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b0c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0c8:	69b9      	ldr	r1, [r7, #24]
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 f86f 	bl	800b1ae <USBH_ParseEPDesc>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b0d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b0da:	3301      	adds	r3, #1
 800b0dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b0e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d80a      	bhi.n	800b0fe <USBH_ParseCfgDesc+0x1a6>
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	791b      	ldrb	r3, [r3, #4]
 800b0ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d204      	bcs.n	800b0fe <USBH_ParseCfgDesc+0x1a6>
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	885a      	ldrh	r2, [r3, #2]
 800b0f8:	8afb      	ldrh	r3, [r7, #22]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d8ac      	bhi.n	800b058 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	791b      	ldrb	r3, [r3, #4]
 800b102:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b106:	429a      	cmp	r2, r3
 800b108:	d201      	bcs.n	800b10e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e01c      	b.n	800b148 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b10e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b112:	3301      	adds	r3, #1
 800b114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d805      	bhi.n	800b12c <USBH_ParseCfgDesc+0x1d4>
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	885a      	ldrh	r2, [r3, #2]
 800b124:	8afb      	ldrh	r3, [r7, #22]
 800b126:	429a      	cmp	r2, r3
 800b128:	f63f af70 	bhi.w	800b00c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	791b      	ldrb	r3, [r3, #4]
 800b130:	2b02      	cmp	r3, #2
 800b132:	bf28      	it	cs
 800b134:	2302      	movcs	r3, #2
 800b136:	b2db      	uxtb	r3, r3
 800b138:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d201      	bcs.n	800b144 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b140:	2303      	movs	r3, #3
 800b142:	e001      	b.n	800b148 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b144:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3730      	adds	r7, #48	@ 0x30
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	785a      	ldrb	r2, [r3, #1]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	789a      	ldrb	r2, [r3, #2]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	78da      	ldrb	r2, [r3, #3]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	791a      	ldrb	r2, [r3, #4]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	795a      	ldrb	r2, [r3, #5]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	799a      	ldrb	r2, [r3, #6]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	79da      	ldrb	r2, [r3, #7]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	7a1a      	ldrb	r2, [r3, #8]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	721a      	strb	r2, [r3, #8]
}
 800b1a2:	bf00      	nop
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b087      	sub	sp, #28
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	781a      	ldrb	r2, [r3, #0]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	785a      	ldrb	r2, [r3, #1]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	789a      	ldrb	r2, [r3, #2]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	78da      	ldrb	r2, [r3, #3]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3305      	adds	r3, #5
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	021b      	lsls	r3, r3, #8
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	799a      	ldrb	r2, [r3, #6]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	889b      	ldrh	r3, [r3, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d009      	beq.n	800b21c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b20c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b210:	d804      	bhi.n	800b21c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b21a:	d901      	bls.n	800b220 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b21c:	2303      	movs	r3, #3
 800b21e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b226:	2b00      	cmp	r3, #0
 800b228:	d136      	bne.n	800b298 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	78db      	ldrb	r3, [r3, #3]
 800b22e:	f003 0303 	and.w	r3, r3, #3
 800b232:	2b02      	cmp	r3, #2
 800b234:	d108      	bne.n	800b248 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	889b      	ldrh	r3, [r3, #4]
 800b23a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b23e:	f240 8097 	bls.w	800b370 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b242:	2303      	movs	r3, #3
 800b244:	75fb      	strb	r3, [r7, #23]
 800b246:	e093      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	78db      	ldrb	r3, [r3, #3]
 800b24c:	f003 0303 	and.w	r3, r3, #3
 800b250:	2b00      	cmp	r3, #0
 800b252:	d107      	bne.n	800b264 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	889b      	ldrh	r3, [r3, #4]
 800b258:	2b40      	cmp	r3, #64	@ 0x40
 800b25a:	f240 8089 	bls.w	800b370 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b25e:	2303      	movs	r3, #3
 800b260:	75fb      	strb	r3, [r7, #23]
 800b262:	e085      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	78db      	ldrb	r3, [r3, #3]
 800b268:	f003 0303 	and.w	r3, r3, #3
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d005      	beq.n	800b27c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	78db      	ldrb	r3, [r3, #3]
 800b274:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d10a      	bne.n	800b292 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	799b      	ldrb	r3, [r3, #6]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <USBH_ParseEPDesc+0xde>
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	799b      	ldrb	r3, [r3, #6]
 800b288:	2b10      	cmp	r3, #16
 800b28a:	d970      	bls.n	800b36e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b28c:	2303      	movs	r3, #3
 800b28e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b290:	e06d      	b.n	800b36e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b292:	2303      	movs	r3, #3
 800b294:	75fb      	strb	r3, [r7, #23]
 800b296:	e06b      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d13c      	bne.n	800b31c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	78db      	ldrb	r3, [r3, #3]
 800b2a6:	f003 0303 	and.w	r3, r3, #3
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d005      	beq.n	800b2ba <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	78db      	ldrb	r3, [r3, #3]
 800b2b2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	889b      	ldrh	r3, [r3, #4]
 800b2be:	2b40      	cmp	r3, #64	@ 0x40
 800b2c0:	d956      	bls.n	800b370 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b2c6:	e053      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	78db      	ldrb	r3, [r3, #3]
 800b2cc:	f003 0303 	and.w	r3, r3, #3
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d10e      	bne.n	800b2f2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	799b      	ldrb	r3, [r3, #6]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d007      	beq.n	800b2ec <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b2e0:	2b10      	cmp	r3, #16
 800b2e2:	d803      	bhi.n	800b2ec <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b2e8:	2b40      	cmp	r3, #64	@ 0x40
 800b2ea:	d941      	bls.n	800b370 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	75fb      	strb	r3, [r7, #23]
 800b2f0:	e03e      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	78db      	ldrb	r3, [r3, #3]
 800b2f6:	f003 0303 	and.w	r3, r3, #3
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d10b      	bne.n	800b316 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	799b      	ldrb	r3, [r3, #6]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d004      	beq.n	800b310 <USBH_ParseEPDesc+0x162>
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	889b      	ldrh	r3, [r3, #4]
 800b30a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b30e:	d32f      	bcc.n	800b370 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b310:	2303      	movs	r3, #3
 800b312:	75fb      	strb	r3, [r7, #23]
 800b314:	e02c      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b316:	2303      	movs	r3, #3
 800b318:	75fb      	strb	r3, [r7, #23]
 800b31a:	e029      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b322:	2b02      	cmp	r3, #2
 800b324:	d120      	bne.n	800b368 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	78db      	ldrb	r3, [r3, #3]
 800b32a:	f003 0303 	and.w	r3, r3, #3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d106      	bne.n	800b340 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	889b      	ldrh	r3, [r3, #4]
 800b336:	2b08      	cmp	r3, #8
 800b338:	d01a      	beq.n	800b370 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b33a:	2303      	movs	r3, #3
 800b33c:	75fb      	strb	r3, [r7, #23]
 800b33e:	e017      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	78db      	ldrb	r3, [r3, #3]
 800b344:	f003 0303 	and.w	r3, r3, #3
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d10a      	bne.n	800b362 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	799b      	ldrb	r3, [r3, #6]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d003      	beq.n	800b35c <USBH_ParseEPDesc+0x1ae>
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	889b      	ldrh	r3, [r3, #4]
 800b358:	2b08      	cmp	r3, #8
 800b35a:	d909      	bls.n	800b370 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b35c:	2303      	movs	r3, #3
 800b35e:	75fb      	strb	r3, [r7, #23]
 800b360:	e006      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b362:	2303      	movs	r3, #3
 800b364:	75fb      	strb	r3, [r7, #23]
 800b366:	e003      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b368:	2303      	movs	r3, #3
 800b36a:	75fb      	strb	r3, [r7, #23]
 800b36c:	e000      	b.n	800b370 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b36e:	bf00      	nop
  }

  return status;
 800b370:	7dfb      	ldrb	r3, [r7, #23]
}
 800b372:	4618      	mov	r0, r3
 800b374:	371c      	adds	r7, #28
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b37e:	b480      	push	{r7}
 800b380:	b087      	sub	sp, #28
 800b382:	af00      	add	r7, sp, #0
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	4613      	mov	r3, r2
 800b38a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3301      	adds	r3, #1
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	2b03      	cmp	r3, #3
 800b394:	d120      	bne.n	800b3d8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	1e9a      	subs	r2, r3, #2
 800b39c:	88fb      	ldrh	r3, [r7, #6]
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	bf28      	it	cs
 800b3a2:	4613      	movcs	r3, r2
 800b3a4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3302      	adds	r3, #2
 800b3aa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	82fb      	strh	r3, [r7, #22]
 800b3b0:	e00b      	b.n	800b3ca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b3b2:	8afb      	ldrh	r3, [r7, #22]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	781a      	ldrb	r2, [r3, #0]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b3c4:	8afb      	ldrh	r3, [r7, #22]
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	82fb      	strh	r3, [r7, #22]
 800b3ca:	8afa      	ldrh	r2, [r7, #22]
 800b3cc:	8abb      	ldrh	r3, [r7, #20]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d3ef      	bcc.n	800b3b2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	701a      	strb	r2, [r3, #0]
  }
}
 800b3d8:	bf00      	nop
 800b3da:	371c      	adds	r7, #28
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	881b      	ldrh	r3, [r3, #0]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	7812      	ldrb	r2, [r2, #0]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4413      	add	r3, r2
 800b408:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b40a:	68fb      	ldr	r3, [r7, #12]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	4613      	mov	r3, r2
 800b424:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b426:	2301      	movs	r3, #1
 800b428:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	789b      	ldrb	r3, [r3, #2]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d002      	beq.n	800b438 <USBH_CtlReq+0x20>
 800b432:	2b02      	cmp	r3, #2
 800b434:	d00f      	beq.n	800b456 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b436:	e027      	b.n	800b488 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	88fa      	ldrh	r2, [r7, #6]
 800b442:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2201      	movs	r2, #1
 800b448:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2202      	movs	r2, #2
 800b44e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b450:	2301      	movs	r3, #1
 800b452:	75fb      	strb	r3, [r7, #23]
      break;
 800b454:	e018      	b.n	800b488 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 f81c 	bl	800b494 <USBH_HandleControl>
 800b45c:	4603      	mov	r3, r0
 800b45e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b460:	7dfb      	ldrb	r3, [r7, #23]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d002      	beq.n	800b46c <USBH_CtlReq+0x54>
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	2b03      	cmp	r3, #3
 800b46a:	d106      	bne.n	800b47a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2201      	movs	r2, #1
 800b470:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	761a      	strb	r2, [r3, #24]
      break;
 800b478:	e005      	b.n	800b486 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d102      	bne.n	800b486 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2201      	movs	r2, #1
 800b484:	709a      	strb	r2, [r3, #2]
      break;
 800b486:	bf00      	nop
  }
  return status;
 800b488:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
	...

0800b494 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af02      	add	r7, sp, #8
 800b49a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b49c:	2301      	movs	r3, #1
 800b49e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	7e1b      	ldrb	r3, [r3, #24]
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	2b0a      	cmp	r3, #10
 800b4ac:	f200 8157 	bhi.w	800b75e <USBH_HandleControl+0x2ca>
 800b4b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b8 <USBH_HandleControl+0x24>)
 800b4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b6:	bf00      	nop
 800b4b8:	0800b4e5 	.word	0x0800b4e5
 800b4bc:	0800b4ff 	.word	0x0800b4ff
 800b4c0:	0800b569 	.word	0x0800b569
 800b4c4:	0800b58f 	.word	0x0800b58f
 800b4c8:	0800b5c9 	.word	0x0800b5c9
 800b4cc:	0800b5f3 	.word	0x0800b5f3
 800b4d0:	0800b645 	.word	0x0800b645
 800b4d4:	0800b667 	.word	0x0800b667
 800b4d8:	0800b6a3 	.word	0x0800b6a3
 800b4dc:	0800b6c9 	.word	0x0800b6c9
 800b4e0:	0800b707 	.word	0x0800b707
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f103 0110 	add.w	r1, r3, #16
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	795b      	ldrb	r3, [r3, #5]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 f945 	bl	800b780 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	761a      	strb	r2, [r3, #24]
      break;
 800b4fc:	e13a      	b.n	800b774 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	795b      	ldrb	r3, [r3, #5]
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fcc7 	bl	800be98 <USBH_LL_GetURBState>
 800b50a:	4603      	mov	r3, r0
 800b50c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d11e      	bne.n	800b552 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	7c1b      	ldrb	r3, [r3, #16]
 800b518:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b51c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	8adb      	ldrh	r3, [r3, #22]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00a      	beq.n	800b53c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b526:	7b7b      	ldrb	r3, [r7, #13]
 800b528:	2b80      	cmp	r3, #128	@ 0x80
 800b52a:	d103      	bne.n	800b534 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2203      	movs	r2, #3
 800b530:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b532:	e116      	b.n	800b762 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2205      	movs	r2, #5
 800b538:	761a      	strb	r2, [r3, #24]
      break;
 800b53a:	e112      	b.n	800b762 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800b53c:	7b7b      	ldrb	r3, [r7, #13]
 800b53e:	2b80      	cmp	r3, #128	@ 0x80
 800b540:	d103      	bne.n	800b54a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2209      	movs	r2, #9
 800b546:	761a      	strb	r2, [r3, #24]
      break;
 800b548:	e10b      	b.n	800b762 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2207      	movs	r2, #7
 800b54e:	761a      	strb	r2, [r3, #24]
      break;
 800b550:	e107      	b.n	800b762 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b552:	7bbb      	ldrb	r3, [r7, #14]
 800b554:	2b04      	cmp	r3, #4
 800b556:	d003      	beq.n	800b560 <USBH_HandleControl+0xcc>
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	f040 8101 	bne.w	800b762 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	220b      	movs	r2, #11
 800b564:	761a      	strb	r2, [r3, #24]
      break;
 800b566:	e0fc      	b.n	800b762 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b56e:	b29a      	uxth	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6899      	ldr	r1, [r3, #8]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	899a      	ldrh	r2, [r3, #12]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	791b      	ldrb	r3, [r3, #4]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f93c 	bl	800b7fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2204      	movs	r2, #4
 800b58a:	761a      	strb	r2, [r3, #24]
      break;
 800b58c:	e0f2      	b.n	800b774 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	791b      	ldrb	r3, [r3, #4]
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fc7f 	bl	800be98 <USBH_LL_GetURBState>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d103      	bne.n	800b5ac <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2209      	movs	r2, #9
 800b5a8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b5aa:	e0dc      	b.n	800b766 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800b5ac:	7bbb      	ldrb	r3, [r7, #14]
 800b5ae:	2b05      	cmp	r3, #5
 800b5b0:	d102      	bne.n	800b5b8 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b5b6:	e0d6      	b.n	800b766 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	f040 80d3 	bne.w	800b766 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	220b      	movs	r2, #11
 800b5c4:	761a      	strb	r2, [r3, #24]
      break;
 800b5c6:	e0ce      	b.n	800b766 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6899      	ldr	r1, [r3, #8]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	899a      	ldrh	r2, [r3, #12]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	795b      	ldrb	r3, [r3, #5]
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	9000      	str	r0, [sp, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f8eb 	bl	800b7b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2206      	movs	r2, #6
 800b5ee:	761a      	strb	r2, [r3, #24]
      break;
 800b5f0:	e0c0      	b.n	800b774 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	795b      	ldrb	r3, [r3, #5]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fc4d 	bl	800be98 <USBH_LL_GetURBState>
 800b5fe:	4603      	mov	r3, r0
 800b600:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b602:	7bbb      	ldrb	r3, [r7, #14]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d103      	bne.n	800b610 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2207      	movs	r2, #7
 800b60c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b60e:	e0ac      	b.n	800b76a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	2b05      	cmp	r3, #5
 800b614:	d105      	bne.n	800b622 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	220c      	movs	r2, #12
 800b61a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b61c:	2303      	movs	r3, #3
 800b61e:	73fb      	strb	r3, [r7, #15]
      break;
 800b620:	e0a3      	b.n	800b76a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b622:	7bbb      	ldrb	r3, [r7, #14]
 800b624:	2b02      	cmp	r3, #2
 800b626:	d103      	bne.n	800b630 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2205      	movs	r2, #5
 800b62c:	761a      	strb	r2, [r3, #24]
      break;
 800b62e:	e09c      	b.n	800b76a <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	2b04      	cmp	r3, #4
 800b634:	f040 8099 	bne.w	800b76a <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	220b      	movs	r2, #11
 800b63c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b63e:	2302      	movs	r3, #2
 800b640:	73fb      	strb	r3, [r7, #15]
      break;
 800b642:	e092      	b.n	800b76a <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	791b      	ldrb	r3, [r3, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	2100      	movs	r1, #0
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f8d6 	bl	800b7fe <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b658:	b29a      	uxth	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2208      	movs	r2, #8
 800b662:	761a      	strb	r2, [r3, #24]

      break;
 800b664:	e086      	b.n	800b774 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	791b      	ldrb	r3, [r3, #4]
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fc13 	bl	800be98 <USBH_LL_GetURBState>
 800b672:	4603      	mov	r3, r0
 800b674:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d105      	bne.n	800b688 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	220d      	movs	r2, #13
 800b680:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b686:	e072      	b.n	800b76e <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800b688:	7bbb      	ldrb	r3, [r7, #14]
 800b68a:	2b04      	cmp	r3, #4
 800b68c:	d103      	bne.n	800b696 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	220b      	movs	r2, #11
 800b692:	761a      	strb	r2, [r3, #24]
      break;
 800b694:	e06b      	b.n	800b76e <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800b696:	7bbb      	ldrb	r3, [r7, #14]
 800b698:	2b05      	cmp	r3, #5
 800b69a:	d168      	bne.n	800b76e <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800b69c:	2303      	movs	r3, #3
 800b69e:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a0:	e065      	b.n	800b76e <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	795b      	ldrb	r3, [r3, #5]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	9200      	str	r2, [sp, #0]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f880 	bl	800b7b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	220a      	movs	r2, #10
 800b6c4:	761a      	strb	r2, [r3, #24]
      break;
 800b6c6:	e055      	b.n	800b774 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	795b      	ldrb	r3, [r3, #5]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fbe2 	bl	800be98 <USBH_LL_GetURBState>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b6d8:	7bbb      	ldrb	r3, [r7, #14]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d105      	bne.n	800b6ea <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	220d      	movs	r2, #13
 800b6e6:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b6e8:	e043      	b.n	800b772 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d103      	bne.n	800b6f8 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2209      	movs	r2, #9
 800b6f4:	761a      	strb	r2, [r3, #24]
      break;
 800b6f6:	e03c      	b.n	800b772 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b6f8:	7bbb      	ldrb	r3, [r7, #14]
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d139      	bne.n	800b772 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	220b      	movs	r2, #11
 800b702:	761a      	strb	r2, [r3, #24]
      break;
 800b704:	e035      	b.n	800b772 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	7e5b      	ldrb	r3, [r3, #25]
 800b70a:	3301      	adds	r3, #1
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	765a      	strb	r2, [r3, #25]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	7e5b      	ldrb	r3, [r3, #25]
 800b716:	2b02      	cmp	r3, #2
 800b718:	d806      	bhi.n	800b728 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2201      	movs	r2, #1
 800b71e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b726:	e025      	b.n	800b774 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b72e:	2106      	movs	r1, #6
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	795b      	ldrb	r3, [r3, #5]
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f90d 	bl	800b960 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	791b      	ldrb	r3, [r3, #4]
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f907 	bl	800b960 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b758:	2302      	movs	r3, #2
 800b75a:	73fb      	strb	r3, [r7, #15]
      break;
 800b75c:	e00a      	b.n	800b774 <USBH_HandleControl+0x2e0>

    default:
      break;
 800b75e:	bf00      	nop
 800b760:	e008      	b.n	800b774 <USBH_HandleControl+0x2e0>
      break;
 800b762:	bf00      	nop
 800b764:	e006      	b.n	800b774 <USBH_HandleControl+0x2e0>
      break;
 800b766:	bf00      	nop
 800b768:	e004      	b.n	800b774 <USBH_HandleControl+0x2e0>
      break;
 800b76a:	bf00      	nop
 800b76c:	e002      	b.n	800b774 <USBH_HandleControl+0x2e0>
      break;
 800b76e:	bf00      	nop
 800b770:	e000      	b.n	800b774 <USBH_HandleControl+0x2e0>
      break;
 800b772:	bf00      	nop
  }

  return status;
 800b774:	7bfb      	ldrb	r3, [r7, #15]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop

0800b780 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af04      	add	r7, sp, #16
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	4613      	mov	r3, r2
 800b78c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b78e:	79f9      	ldrb	r1, [r7, #7]
 800b790:	2300      	movs	r3, #0
 800b792:	9303      	str	r3, [sp, #12]
 800b794:	2308      	movs	r3, #8
 800b796:	9302      	str	r3, [sp, #8]
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	9301      	str	r3, [sp, #4]
 800b79c:	2300      	movs	r3, #0
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f000 fb46 	bl	800be36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af04      	add	r7, sp, #16
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	4611      	mov	r1, r2
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	80fb      	strh	r3, [r7, #6]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b7d8:	7979      	ldrb	r1, [r7, #5]
 800b7da:	7e3b      	ldrb	r3, [r7, #24]
 800b7dc:	9303      	str	r3, [sp, #12]
 800b7de:	88fb      	ldrh	r3, [r7, #6]
 800b7e0:	9302      	str	r3, [sp, #8]
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f000 fb21 	bl	800be36 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b088      	sub	sp, #32
 800b802:	af04      	add	r7, sp, #16
 800b804:	60f8      	str	r0, [r7, #12]
 800b806:	60b9      	str	r1, [r7, #8]
 800b808:	4611      	mov	r1, r2
 800b80a:	461a      	mov	r2, r3
 800b80c:	460b      	mov	r3, r1
 800b80e:	80fb      	strh	r3, [r7, #6]
 800b810:	4613      	mov	r3, r2
 800b812:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b814:	7979      	ldrb	r1, [r7, #5]
 800b816:	2300      	movs	r3, #0
 800b818:	9303      	str	r3, [sp, #12]
 800b81a:	88fb      	ldrh	r3, [r7, #6]
 800b81c:	9302      	str	r3, [sp, #8]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	2301      	movs	r3, #1
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	2300      	movs	r3, #0
 800b828:	2201      	movs	r2, #1
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f000 fb03 	bl	800be36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b830:	2300      	movs	r3, #0

}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b088      	sub	sp, #32
 800b83e:	af04      	add	r7, sp, #16
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	60b9      	str	r1, [r7, #8]
 800b844:	4611      	mov	r1, r2
 800b846:	461a      	mov	r2, r3
 800b848:	460b      	mov	r3, r1
 800b84a:	80fb      	strh	r3, [r7, #6]
 800b84c:	4613      	mov	r3, r2
 800b84e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b856:	2b00      	cmp	r3, #0
 800b858:	d001      	beq.n	800b85e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b85e:	7979      	ldrb	r1, [r7, #5]
 800b860:	7e3b      	ldrb	r3, [r7, #24]
 800b862:	9303      	str	r3, [sp, #12]
 800b864:	88fb      	ldrh	r3, [r7, #6]
 800b866:	9302      	str	r3, [sp, #8]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	9301      	str	r3, [sp, #4]
 800b86c:	2301      	movs	r3, #1
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	2302      	movs	r3, #2
 800b872:	2200      	movs	r2, #0
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 fade 	bl	800be36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b088      	sub	sp, #32
 800b888:	af04      	add	r7, sp, #16
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	4611      	mov	r1, r2
 800b890:	461a      	mov	r2, r3
 800b892:	460b      	mov	r3, r1
 800b894:	80fb      	strh	r3, [r7, #6]
 800b896:	4613      	mov	r3, r2
 800b898:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b89a:	7979      	ldrb	r1, [r7, #5]
 800b89c:	2300      	movs	r3, #0
 800b89e:	9303      	str	r3, [sp, #12]
 800b8a0:	88fb      	ldrh	r3, [r7, #6]
 800b8a2:	9302      	str	r3, [sp, #8]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	9301      	str	r3, [sp, #4]
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f000 fac0 	bl	800be36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af04      	add	r7, sp, #16
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	70fb      	strb	r3, [r7, #3]
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	70bb      	strb	r3, [r7, #2]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b8da:	7878      	ldrb	r0, [r7, #1]
 800b8dc:	78ba      	ldrb	r2, [r7, #2]
 800b8de:	78f9      	ldrb	r1, [r7, #3]
 800b8e0:	8b3b      	ldrh	r3, [r7, #24]
 800b8e2:	9302      	str	r3, [sp, #8]
 800b8e4:	7d3b      	ldrb	r3, [r7, #20]
 800b8e6:	9301      	str	r3, [sp, #4]
 800b8e8:	7c3b      	ldrb	r3, [r7, #16]
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fa53 	bl	800bd9a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b90a:	78fb      	ldrb	r3, [r7, #3]
 800b90c:	4619      	mov	r1, r3
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fa72 	bl	800bdf8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b084      	sub	sp, #16
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	460b      	mov	r3, r1
 800b928:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f836 	bl	800b99c <USBH_GetFreePipe>
 800b930:	4603      	mov	r3, r0
 800b932:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b934:	89fb      	ldrh	r3, [r7, #14]
 800b936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d00a      	beq.n	800b954 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b93e:	78fa      	ldrb	r2, [r7, #3]
 800b940:	89fb      	ldrh	r3, [r7, #14]
 800b942:	f003 030f 	and.w	r3, r3, #15
 800b946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	33e0      	adds	r3, #224	@ 0xe0
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	440b      	add	r3, r1
 800b952:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b954:	89fb      	ldrh	r3, [r7, #14]
 800b956:	b2db      	uxtb	r3, r3
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	460b      	mov	r3, r1
 800b96a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b96c:	78fb      	ldrb	r3, [r7, #3]
 800b96e:	2b0f      	cmp	r3, #15
 800b970:	d80d      	bhi.n	800b98e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b972:	78fb      	ldrb	r3, [r7, #3]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	33e0      	adds	r3, #224	@ 0xe0
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4413      	add	r3, r2
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b984:	6879      	ldr	r1, [r7, #4]
 800b986:	33e0      	adds	r3, #224	@ 0xe0
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	440b      	add	r3, r1
 800b98c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73fb      	strb	r3, [r7, #15]
 800b9ac:	e00f      	b.n	800b9ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	33e0      	adds	r3, #224	@ 0xe0
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d102      	bne.n	800b9c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	e007      	b.n	800b9d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	73fb      	strb	r3, [r7, #15]
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
 800b9d0:	2b0f      	cmp	r3, #15
 800b9d2:	d9ec      	bls.n	800b9ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b9d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	490e      	ldr	r1, [pc, #56]	@ (800ba24 <MX_USB_HOST_Init+0x40>)
 800b9ec:	480e      	ldr	r0, [pc, #56]	@ (800ba28 <MX_USB_HOST_Init+0x44>)
 800b9ee:	f7fe fb0f 	bl	800a010 <USBH_Init>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b9f8:	f7f6 f8da 	bl	8001bb0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b9fc:	490b      	ldr	r1, [pc, #44]	@ (800ba2c <MX_USB_HOST_Init+0x48>)
 800b9fe:	480a      	ldr	r0, [pc, #40]	@ (800ba28 <MX_USB_HOST_Init+0x44>)
 800ba00:	f7fe fbb1 	bl	800a166 <USBH_RegisterClass>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ba0a:	f7f6 f8d1 	bl	8001bb0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ba0e:	4806      	ldr	r0, [pc, #24]	@ (800ba28 <MX_USB_HOST_Init+0x44>)
 800ba10:	f7fe fc35 	bl	800a27e <USBH_Start>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ba1a:	f7f6 f8c9 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ba1e:	bf00      	nop
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	0800ba45 	.word	0x0800ba45
 800ba28:	20000534 	.word	0x20000534
 800ba2c:	2000000c 	.word	0x2000000c

0800ba30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ba34:	4802      	ldr	r0, [pc, #8]	@ (800ba40 <MX_USB_HOST_Process+0x10>)
 800ba36:	f7fe fc33 	bl	800a2a0 <USBH_Process>
}
 800ba3a:	bf00      	nop
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	20000534 	.word	0x20000534

0800ba44 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	3b01      	subs	r3, #1
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d819      	bhi.n	800ba8c <USBH_UserProcess+0x48>
 800ba58:	a201      	add	r2, pc, #4	@ (adr r2, 800ba60 <USBH_UserProcess+0x1c>)
 800ba5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5e:	bf00      	nop
 800ba60:	0800ba8d 	.word	0x0800ba8d
 800ba64:	0800ba7d 	.word	0x0800ba7d
 800ba68:	0800ba8d 	.word	0x0800ba8d
 800ba6c:	0800ba85 	.word	0x0800ba85
 800ba70:	0800ba75 	.word	0x0800ba75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ba74:	4b09      	ldr	r3, [pc, #36]	@ (800ba9c <USBH_UserProcess+0x58>)
 800ba76:	2203      	movs	r2, #3
 800ba78:	701a      	strb	r2, [r3, #0]
  break;
 800ba7a:	e008      	b.n	800ba8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ba7c:	4b07      	ldr	r3, [pc, #28]	@ (800ba9c <USBH_UserProcess+0x58>)
 800ba7e:	2202      	movs	r2, #2
 800ba80:	701a      	strb	r2, [r3, #0]
  break;
 800ba82:	e004      	b.n	800ba8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ba84:	4b05      	ldr	r3, [pc, #20]	@ (800ba9c <USBH_UserProcess+0x58>)
 800ba86:	2201      	movs	r2, #1
 800ba88:	701a      	strb	r2, [r3, #0]
  break;
 800ba8a:	e000      	b.n	800ba8e <USBH_UserProcess+0x4a>

  default:
  break;
 800ba8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ba8e:	bf00      	nop
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	2000090c 	.word	0x2000090c

0800baa0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b08a      	sub	sp, #40	@ 0x28
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800baa8:	f107 0314 	add.w	r3, r7, #20
 800baac:	2200      	movs	r2, #0
 800baae:	601a      	str	r2, [r3, #0]
 800bab0:	605a      	str	r2, [r3, #4]
 800bab2:	609a      	str	r2, [r3, #8]
 800bab4:	60da      	str	r2, [r3, #12]
 800bab6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bac0:	d147      	bne.n	800bb52 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bac2:	2300      	movs	r3, #0
 800bac4:	613b      	str	r3, [r7, #16]
 800bac6:	4b25      	ldr	r3, [pc, #148]	@ (800bb5c <HAL_HCD_MspInit+0xbc>)
 800bac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baca:	4a24      	ldr	r2, [pc, #144]	@ (800bb5c <HAL_HCD_MspInit+0xbc>)
 800bacc:	f043 0301 	orr.w	r3, r3, #1
 800bad0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bad2:	4b22      	ldr	r3, [pc, #136]	@ (800bb5c <HAL_HCD_MspInit+0xbc>)
 800bad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	613b      	str	r3, [r7, #16]
 800badc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bae4:	2300      	movs	r3, #0
 800bae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bae8:	2300      	movs	r3, #0
 800baea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800baec:	f107 0314 	add.w	r3, r7, #20
 800baf0:	4619      	mov	r1, r3
 800baf2:	481b      	ldr	r0, [pc, #108]	@ (800bb60 <HAL_HCD_MspInit+0xc0>)
 800baf4:	f7f7 fd58 	bl	80035a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800baf8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bafc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bafe:	2302      	movs	r3, #2
 800bb00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb02:	2300      	movs	r3, #0
 800bb04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb06:	2300      	movs	r3, #0
 800bb08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bb0a:	230a      	movs	r3, #10
 800bb0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb0e:	f107 0314 	add.w	r3, r7, #20
 800bb12:	4619      	mov	r1, r3
 800bb14:	4812      	ldr	r0, [pc, #72]	@ (800bb60 <HAL_HCD_MspInit+0xc0>)
 800bb16:	f7f7 fd47 	bl	80035a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb1a:	4b10      	ldr	r3, [pc, #64]	@ (800bb5c <HAL_HCD_MspInit+0xbc>)
 800bb1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb1e:	4a0f      	ldr	r2, [pc, #60]	@ (800bb5c <HAL_HCD_MspInit+0xbc>)
 800bb20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb24:	6353      	str	r3, [r2, #52]	@ 0x34
 800bb26:	2300      	movs	r3, #0
 800bb28:	60fb      	str	r3, [r7, #12]
 800bb2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb5c <HAL_HCD_MspInit+0xbc>)
 800bb2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb2e:	4a0b      	ldr	r2, [pc, #44]	@ (800bb5c <HAL_HCD_MspInit+0xbc>)
 800bb30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bb34:	6453      	str	r3, [r2, #68]	@ 0x44
 800bb36:	4b09      	ldr	r3, [pc, #36]	@ (800bb5c <HAL_HCD_MspInit+0xbc>)
 800bb38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb42:	2200      	movs	r2, #0
 800bb44:	2100      	movs	r1, #0
 800bb46:	2043      	movs	r0, #67	@ 0x43
 800bb48:	f7f7 f8f5 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb4c:	2043      	movs	r0, #67	@ 0x43
 800bb4e:	f7f7 f90e 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb52:	bf00      	nop
 800bb54:	3728      	adds	r7, #40	@ 0x28
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	40023800 	.word	0x40023800
 800bb60:	40020000 	.word	0x40020000

0800bb64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe ff6d 	bl	800aa52 <USBH_LL_IncTimer>
}
 800bb78:	bf00      	nop
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fe ffa9 	bl	800aae6 <USBH_LL_Connect>
}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fe ffb2 	bl	800ab14 <USBH_LL_Disconnect>
}
 800bbb0:	bf00      	nop
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	70fb      	strb	r3, [r7, #3]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe ff5f 	bl	800aaa6 <USBH_LL_PortEnabled>
}
 800bbe8:	bf00      	nop
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe ff5f 	bl	800aac2 <USBH_LL_PortDisabled>
}
 800bc04:	bf00      	nop
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d12a      	bne.n	800bc74 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bc1e:	4a18      	ldr	r2, [pc, #96]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a15      	ldr	r2, [pc, #84]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc2a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc2e:	4b14      	ldr	r3, [pc, #80]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bc34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bc36:	4b12      	ldr	r3, [pc, #72]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc38:	2208      	movs	r2, #8
 800bc3a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bc3c:	4b10      	ldr	r3, [pc, #64]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc3e:	2201      	movs	r2, #1
 800bc40:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bc42:	4b0f      	ldr	r3, [pc, #60]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bc48:	4b0d      	ldr	r3, [pc, #52]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc4e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bc54:	480a      	ldr	r0, [pc, #40]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc56:	f7f7 fe8d 	bl	8003974 <HAL_HCD_Init>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bc60:	f7f5 ffa6 	bl	8001bb0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bc64:	4806      	ldr	r0, [pc, #24]	@ (800bc80 <USBH_LL_Init+0x74>)
 800bc66:	f7f8 faed 	bl	8004244 <HAL_HCD_GetCurrentFrame>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7fe fee0 	bl	800aa34 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	20000910 	.word	0x20000910

0800bc84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7f8 fa5a 	bl	8004154 <HAL_HCD_Start>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f000 f95e 	bl	800bf68 <USBH_Get_USB_Status>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7f8 fa62 	bl	800419a <HAL_HCD_Stop>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 f943 	bl	800bf68 <USBH_Get_USB_Status>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7f8 faac 	bl	8004260 <HAL_HCD_GetCurrentSpeed>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d00c      	beq.n	800bd28 <USBH_LL_GetSpeed+0x38>
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d80d      	bhi.n	800bd2e <USBH_LL_GetSpeed+0x3e>
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d002      	beq.n	800bd1c <USBH_LL_GetSpeed+0x2c>
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d003      	beq.n	800bd22 <USBH_LL_GetSpeed+0x32>
 800bd1a:	e008      	b.n	800bd2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd20:	e008      	b.n	800bd34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bd22:	2301      	movs	r3, #1
 800bd24:	73fb      	strb	r3, [r7, #15]
    break;
 800bd26:	e005      	b.n	800bd34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd2c:	e002      	b.n	800bd34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	73fb      	strb	r3, [r7, #15]
    break;
 800bd32:	bf00      	nop
  }
  return  speed;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b084      	sub	sp, #16
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f8 fa3d 	bl	80041d4 <HAL_HCD_ResetPort>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 f901 	bl	800bf68 <USBH_Get_USB_Status>
 800bd66:	4603      	mov	r3, r0
 800bd68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd86:	78fa      	ldrb	r2, [r7, #3]
 800bd88:	4611      	mov	r1, r2
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7f8 fa45 	bl	800421a <HAL_HCD_HC_GetXferCount>
 800bd90:	4603      	mov	r3, r0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd9a:	b590      	push	{r4, r7, lr}
 800bd9c:	b089      	sub	sp, #36	@ 0x24
 800bd9e:	af04      	add	r7, sp, #16
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	4608      	mov	r0, r1
 800bda4:	4611      	mov	r1, r2
 800bda6:	461a      	mov	r2, r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	70fb      	strb	r3, [r7, #3]
 800bdac:	460b      	mov	r3, r1
 800bdae:	70bb      	strb	r3, [r7, #2]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bdc2:	787c      	ldrb	r4, [r7, #1]
 800bdc4:	78ba      	ldrb	r2, [r7, #2]
 800bdc6:	78f9      	ldrb	r1, [r7, #3]
 800bdc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bdca:	9302      	str	r3, [sp, #8]
 800bdcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bdd0:	9301      	str	r3, [sp, #4]
 800bdd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	4623      	mov	r3, r4
 800bdda:	f7f7 fe32 	bl	8003a42 <HAL_HCD_HC_Init>
 800bdde:	4603      	mov	r3, r0
 800bde0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f000 f8bf 	bl	800bf68 <USBH_Get_USB_Status>
 800bdea:	4603      	mov	r3, r0
 800bdec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdee:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd90      	pop	{r4, r7, pc}

0800bdf8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	460b      	mov	r3, r1
 800be02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be12:	78fa      	ldrb	r2, [r7, #3]
 800be14:	4611      	mov	r1, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f7f7 fecb 	bl	8003bb2 <HAL_HCD_HC_Halt>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	4618      	mov	r0, r3
 800be24:	f000 f8a0 	bl	800bf68 <USBH_Get_USB_Status>
 800be28:	4603      	mov	r3, r0
 800be2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800be36:	b590      	push	{r4, r7, lr}
 800be38:	b089      	sub	sp, #36	@ 0x24
 800be3a:	af04      	add	r7, sp, #16
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	4608      	mov	r0, r1
 800be40:	4611      	mov	r1, r2
 800be42:	461a      	mov	r2, r3
 800be44:	4603      	mov	r3, r0
 800be46:	70fb      	strb	r3, [r7, #3]
 800be48:	460b      	mov	r3, r1
 800be4a:	70bb      	strb	r3, [r7, #2]
 800be4c:	4613      	mov	r3, r2
 800be4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800be5e:	787c      	ldrb	r4, [r7, #1]
 800be60:	78ba      	ldrb	r2, [r7, #2]
 800be62:	78f9      	ldrb	r1, [r7, #3]
 800be64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800be68:	9303      	str	r3, [sp, #12]
 800be6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be6c:	9302      	str	r3, [sp, #8]
 800be6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be70:	9301      	str	r3, [sp, #4]
 800be72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	4623      	mov	r3, r4
 800be7a:	f7f7 febd 	bl	8003bf8 <HAL_HCD_HC_SubmitRequest>
 800be7e:	4603      	mov	r3, r0
 800be80:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	4618      	mov	r0, r3
 800be86:	f000 f86f 	bl	800bf68 <USBH_Get_USB_Status>
 800be8a:	4603      	mov	r3, r0
 800be8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	bd90      	pop	{r4, r7, pc}

0800be98 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800beaa:	78fa      	ldrb	r2, [r7, #3]
 800beac:	4611      	mov	r1, r2
 800beae:	4618      	mov	r0, r3
 800beb0:	f7f8 f99e 	bl	80041f0 <HAL_HCD_HC_GetURBState>
 800beb4:	4603      	mov	r3, r0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	460b      	mov	r3, r1
 800bec8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d103      	bne.n	800bedc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bed4:	78fb      	ldrb	r3, [r7, #3]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 f872 	bl	800bfc0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bedc:	20c8      	movs	r0, #200	@ 0xc8
 800bede:	f7f6 fa29 	bl	8002334 <HAL_Delay>
  return USBH_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	70fb      	strb	r3, [r7, #3]
 800bef8:	4613      	mov	r3, r2
 800befa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf02:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bf04:	78fa      	ldrb	r2, [r7, #3]
 800bf06:	68f9      	ldr	r1, [r7, #12]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	1a9b      	subs	r3, r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	440b      	add	r3, r1
 800bf12:	3317      	adds	r3, #23
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bf1a:	78fa      	ldrb	r2, [r7, #3]
 800bf1c:	68f9      	ldr	r1, [r7, #12]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	011b      	lsls	r3, r3, #4
 800bf22:	1a9b      	subs	r3, r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	440b      	add	r3, r1
 800bf28:	333c      	adds	r3, #60	@ 0x3c
 800bf2a:	78ba      	ldrb	r2, [r7, #2]
 800bf2c:	701a      	strb	r2, [r3, #0]
 800bf2e:	e009      	b.n	800bf44 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bf30:	78fa      	ldrb	r2, [r7, #3]
 800bf32:	68f9      	ldr	r1, [r7, #12]
 800bf34:	4613      	mov	r3, r2
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	1a9b      	subs	r3, r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	440b      	add	r3, r1
 800bf3e:	333d      	adds	r3, #61	@ 0x3d
 800bf40:	78ba      	ldrb	r2, [r7, #2]
 800bf42:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7f6 f9ea 	bl	8002334 <HAL_Delay>
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	4603      	mov	r3, r0
 800bf70:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf76:	79fb      	ldrb	r3, [r7, #7]
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d817      	bhi.n	800bfac <USBH_Get_USB_Status+0x44>
 800bf7c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf84 <USBH_Get_USB_Status+0x1c>)
 800bf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf82:	bf00      	nop
 800bf84:	0800bf95 	.word	0x0800bf95
 800bf88:	0800bf9b 	.word	0x0800bf9b
 800bf8c:	0800bfa1 	.word	0x0800bfa1
 800bf90:	0800bfa7 	.word	0x0800bfa7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73fb      	strb	r3, [r7, #15]
    break;
 800bf98:	e00b      	b.n	800bfb2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bf9a:	2302      	movs	r3, #2
 800bf9c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf9e:	e008      	b.n	800bfb2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfa4:	e005      	b.n	800bfb2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	73fb      	strb	r3, [r7, #15]
    break;
 800bfaa:	e002      	b.n	800bfb2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bfac:	2302      	movs	r3, #2
 800bfae:	73fb      	strb	r3, [r7, #15]
    break;
 800bfb0:	bf00      	nop
  }
  return usb_status;
 800bfb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bfca:	79fb      	ldrb	r3, [r7, #7]
 800bfcc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bfce:	79fb      	ldrb	r3, [r7, #7]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	73fb      	strb	r3, [r7, #15]
 800bfd8:	e001      	b.n	800bfde <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	2101      	movs	r1, #1
 800bfe4:	4803      	ldr	r0, [pc, #12]	@ (800bff4 <MX_DriverVbusFS+0x34>)
 800bfe6:	f7f7 fc93 	bl	8003910 <HAL_GPIO_WritePin>
}
 800bfea:	bf00      	nop
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	40020800 	.word	0x40020800

0800bff8 <malloc>:
 800bff8:	4b02      	ldr	r3, [pc, #8]	@ (800c004 <malloc+0xc>)
 800bffa:	4601      	mov	r1, r0
 800bffc:	6818      	ldr	r0, [r3, #0]
 800bffe:	f000 b82d 	b.w	800c05c <_malloc_r>
 800c002:	bf00      	nop
 800c004:	2000002c 	.word	0x2000002c

0800c008 <free>:
 800c008:	4b02      	ldr	r3, [pc, #8]	@ (800c014 <free+0xc>)
 800c00a:	4601      	mov	r1, r0
 800c00c:	6818      	ldr	r0, [r3, #0]
 800c00e:	f000 b915 	b.w	800c23c <_free_r>
 800c012:	bf00      	nop
 800c014:	2000002c 	.word	0x2000002c

0800c018 <sbrk_aligned>:
 800c018:	b570      	push	{r4, r5, r6, lr}
 800c01a:	4e0f      	ldr	r6, [pc, #60]	@ (800c058 <sbrk_aligned+0x40>)
 800c01c:	460c      	mov	r4, r1
 800c01e:	6831      	ldr	r1, [r6, #0]
 800c020:	4605      	mov	r5, r0
 800c022:	b911      	cbnz	r1, 800c02a <sbrk_aligned+0x12>
 800c024:	f000 f8ce 	bl	800c1c4 <_sbrk_r>
 800c028:	6030      	str	r0, [r6, #0]
 800c02a:	4621      	mov	r1, r4
 800c02c:	4628      	mov	r0, r5
 800c02e:	f000 f8c9 	bl	800c1c4 <_sbrk_r>
 800c032:	1c43      	adds	r3, r0, #1
 800c034:	d103      	bne.n	800c03e <sbrk_aligned+0x26>
 800c036:	f04f 34ff 	mov.w	r4, #4294967295
 800c03a:	4620      	mov	r0, r4
 800c03c:	bd70      	pop	{r4, r5, r6, pc}
 800c03e:	1cc4      	adds	r4, r0, #3
 800c040:	f024 0403 	bic.w	r4, r4, #3
 800c044:	42a0      	cmp	r0, r4
 800c046:	d0f8      	beq.n	800c03a <sbrk_aligned+0x22>
 800c048:	1a21      	subs	r1, r4, r0
 800c04a:	4628      	mov	r0, r5
 800c04c:	f000 f8ba 	bl	800c1c4 <_sbrk_r>
 800c050:	3001      	adds	r0, #1
 800c052:	d1f2      	bne.n	800c03a <sbrk_aligned+0x22>
 800c054:	e7ef      	b.n	800c036 <sbrk_aligned+0x1e>
 800c056:	bf00      	nop
 800c058:	20000cf0 	.word	0x20000cf0

0800c05c <_malloc_r>:
 800c05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c060:	1ccd      	adds	r5, r1, #3
 800c062:	f025 0503 	bic.w	r5, r5, #3
 800c066:	3508      	adds	r5, #8
 800c068:	2d0c      	cmp	r5, #12
 800c06a:	bf38      	it	cc
 800c06c:	250c      	movcc	r5, #12
 800c06e:	2d00      	cmp	r5, #0
 800c070:	4606      	mov	r6, r0
 800c072:	db01      	blt.n	800c078 <_malloc_r+0x1c>
 800c074:	42a9      	cmp	r1, r5
 800c076:	d904      	bls.n	800c082 <_malloc_r+0x26>
 800c078:	230c      	movs	r3, #12
 800c07a:	6033      	str	r3, [r6, #0]
 800c07c:	2000      	movs	r0, #0
 800c07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c082:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c158 <_malloc_r+0xfc>
 800c086:	f000 f869 	bl	800c15c <__malloc_lock>
 800c08a:	f8d8 3000 	ldr.w	r3, [r8]
 800c08e:	461c      	mov	r4, r3
 800c090:	bb44      	cbnz	r4, 800c0e4 <_malloc_r+0x88>
 800c092:	4629      	mov	r1, r5
 800c094:	4630      	mov	r0, r6
 800c096:	f7ff ffbf 	bl	800c018 <sbrk_aligned>
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	4604      	mov	r4, r0
 800c09e:	d158      	bne.n	800c152 <_malloc_r+0xf6>
 800c0a0:	f8d8 4000 	ldr.w	r4, [r8]
 800c0a4:	4627      	mov	r7, r4
 800c0a6:	2f00      	cmp	r7, #0
 800c0a8:	d143      	bne.n	800c132 <_malloc_r+0xd6>
 800c0aa:	2c00      	cmp	r4, #0
 800c0ac:	d04b      	beq.n	800c146 <_malloc_r+0xea>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	4639      	mov	r1, r7
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	eb04 0903 	add.w	r9, r4, r3
 800c0b8:	f000 f884 	bl	800c1c4 <_sbrk_r>
 800c0bc:	4581      	cmp	r9, r0
 800c0be:	d142      	bne.n	800c146 <_malloc_r+0xea>
 800c0c0:	6821      	ldr	r1, [r4, #0]
 800c0c2:	1a6d      	subs	r5, r5, r1
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	f7ff ffa6 	bl	800c018 <sbrk_aligned>
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	d03a      	beq.n	800c146 <_malloc_r+0xea>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	442b      	add	r3, r5
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	bb62      	cbnz	r2, 800c138 <_malloc_r+0xdc>
 800c0de:	f8c8 7000 	str.w	r7, [r8]
 800c0e2:	e00f      	b.n	800c104 <_malloc_r+0xa8>
 800c0e4:	6822      	ldr	r2, [r4, #0]
 800c0e6:	1b52      	subs	r2, r2, r5
 800c0e8:	d420      	bmi.n	800c12c <_malloc_r+0xd0>
 800c0ea:	2a0b      	cmp	r2, #11
 800c0ec:	d917      	bls.n	800c11e <_malloc_r+0xc2>
 800c0ee:	1961      	adds	r1, r4, r5
 800c0f0:	42a3      	cmp	r3, r4
 800c0f2:	6025      	str	r5, [r4, #0]
 800c0f4:	bf18      	it	ne
 800c0f6:	6059      	strne	r1, [r3, #4]
 800c0f8:	6863      	ldr	r3, [r4, #4]
 800c0fa:	bf08      	it	eq
 800c0fc:	f8c8 1000 	streq.w	r1, [r8]
 800c100:	5162      	str	r2, [r4, r5]
 800c102:	604b      	str	r3, [r1, #4]
 800c104:	4630      	mov	r0, r6
 800c106:	f000 f82f 	bl	800c168 <__malloc_unlock>
 800c10a:	f104 000b 	add.w	r0, r4, #11
 800c10e:	1d23      	adds	r3, r4, #4
 800c110:	f020 0007 	bic.w	r0, r0, #7
 800c114:	1ac2      	subs	r2, r0, r3
 800c116:	bf1c      	itt	ne
 800c118:	1a1b      	subne	r3, r3, r0
 800c11a:	50a3      	strne	r3, [r4, r2]
 800c11c:	e7af      	b.n	800c07e <_malloc_r+0x22>
 800c11e:	6862      	ldr	r2, [r4, #4]
 800c120:	42a3      	cmp	r3, r4
 800c122:	bf0c      	ite	eq
 800c124:	f8c8 2000 	streq.w	r2, [r8]
 800c128:	605a      	strne	r2, [r3, #4]
 800c12a:	e7eb      	b.n	800c104 <_malloc_r+0xa8>
 800c12c:	4623      	mov	r3, r4
 800c12e:	6864      	ldr	r4, [r4, #4]
 800c130:	e7ae      	b.n	800c090 <_malloc_r+0x34>
 800c132:	463c      	mov	r4, r7
 800c134:	687f      	ldr	r7, [r7, #4]
 800c136:	e7b6      	b.n	800c0a6 <_malloc_r+0x4a>
 800c138:	461a      	mov	r2, r3
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	42a3      	cmp	r3, r4
 800c13e:	d1fb      	bne.n	800c138 <_malloc_r+0xdc>
 800c140:	2300      	movs	r3, #0
 800c142:	6053      	str	r3, [r2, #4]
 800c144:	e7de      	b.n	800c104 <_malloc_r+0xa8>
 800c146:	230c      	movs	r3, #12
 800c148:	6033      	str	r3, [r6, #0]
 800c14a:	4630      	mov	r0, r6
 800c14c:	f000 f80c 	bl	800c168 <__malloc_unlock>
 800c150:	e794      	b.n	800c07c <_malloc_r+0x20>
 800c152:	6005      	str	r5, [r0, #0]
 800c154:	e7d6      	b.n	800c104 <_malloc_r+0xa8>
 800c156:	bf00      	nop
 800c158:	20000cf4 	.word	0x20000cf4

0800c15c <__malloc_lock>:
 800c15c:	4801      	ldr	r0, [pc, #4]	@ (800c164 <__malloc_lock+0x8>)
 800c15e:	f000 b86b 	b.w	800c238 <__retarget_lock_acquire_recursive>
 800c162:	bf00      	nop
 800c164:	20000e34 	.word	0x20000e34

0800c168 <__malloc_unlock>:
 800c168:	4801      	ldr	r0, [pc, #4]	@ (800c170 <__malloc_unlock+0x8>)
 800c16a:	f000 b866 	b.w	800c23a <__retarget_lock_release_recursive>
 800c16e:	bf00      	nop
 800c170:	20000e34 	.word	0x20000e34

0800c174 <siprintf>:
 800c174:	b40e      	push	{r1, r2, r3}
 800c176:	b500      	push	{lr}
 800c178:	b09c      	sub	sp, #112	@ 0x70
 800c17a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c17c:	9002      	str	r0, [sp, #8]
 800c17e:	9006      	str	r0, [sp, #24]
 800c180:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c184:	4809      	ldr	r0, [pc, #36]	@ (800c1ac <siprintf+0x38>)
 800c186:	9107      	str	r1, [sp, #28]
 800c188:	9104      	str	r1, [sp, #16]
 800c18a:	4909      	ldr	r1, [pc, #36]	@ (800c1b0 <siprintf+0x3c>)
 800c18c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c190:	9105      	str	r1, [sp, #20]
 800c192:	6800      	ldr	r0, [r0, #0]
 800c194:	9301      	str	r3, [sp, #4]
 800c196:	a902      	add	r1, sp, #8
 800c198:	f000 f8f6 	bl	800c388 <_svfiprintf_r>
 800c19c:	9b02      	ldr	r3, [sp, #8]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	b01c      	add	sp, #112	@ 0x70
 800c1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1a8:	b003      	add	sp, #12
 800c1aa:	4770      	bx	lr
 800c1ac:	2000002c 	.word	0x2000002c
 800c1b0:	ffff0208 	.word	0xffff0208

0800c1b4 <memset>:
 800c1b4:	4402      	add	r2, r0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d100      	bne.n	800c1be <memset+0xa>
 800c1bc:	4770      	bx	lr
 800c1be:	f803 1b01 	strb.w	r1, [r3], #1
 800c1c2:	e7f9      	b.n	800c1b8 <memset+0x4>

0800c1c4 <_sbrk_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d06      	ldr	r5, [pc, #24]	@ (800c1e0 <_sbrk_r+0x1c>)
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	4608      	mov	r0, r1
 800c1ce:	602b      	str	r3, [r5, #0]
 800c1d0:	f7f5 ffcc 	bl	800216c <_sbrk>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_sbrk_r+0x1a>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_sbrk_r+0x1a>
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	20000e30 	.word	0x20000e30

0800c1e4 <__errno>:
 800c1e4:	4b01      	ldr	r3, [pc, #4]	@ (800c1ec <__errno+0x8>)
 800c1e6:	6818      	ldr	r0, [r3, #0]
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	2000002c 	.word	0x2000002c

0800c1f0 <__libc_init_array>:
 800c1f0:	b570      	push	{r4, r5, r6, lr}
 800c1f2:	4d0d      	ldr	r5, [pc, #52]	@ (800c228 <__libc_init_array+0x38>)
 800c1f4:	4c0d      	ldr	r4, [pc, #52]	@ (800c22c <__libc_init_array+0x3c>)
 800c1f6:	1b64      	subs	r4, r4, r5
 800c1f8:	10a4      	asrs	r4, r4, #2
 800c1fa:	2600      	movs	r6, #0
 800c1fc:	42a6      	cmp	r6, r4
 800c1fe:	d109      	bne.n	800c214 <__libc_init_array+0x24>
 800c200:	4d0b      	ldr	r5, [pc, #44]	@ (800c230 <__libc_init_array+0x40>)
 800c202:	4c0c      	ldr	r4, [pc, #48]	@ (800c234 <__libc_init_array+0x44>)
 800c204:	f000 fba8 	bl	800c958 <_init>
 800c208:	1b64      	subs	r4, r4, r5
 800c20a:	10a4      	asrs	r4, r4, #2
 800c20c:	2600      	movs	r6, #0
 800c20e:	42a6      	cmp	r6, r4
 800c210:	d105      	bne.n	800c21e <__libc_init_array+0x2e>
 800c212:	bd70      	pop	{r4, r5, r6, pc}
 800c214:	f855 3b04 	ldr.w	r3, [r5], #4
 800c218:	4798      	blx	r3
 800c21a:	3601      	adds	r6, #1
 800c21c:	e7ee      	b.n	800c1fc <__libc_init_array+0xc>
 800c21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c222:	4798      	blx	r3
 800c224:	3601      	adds	r6, #1
 800c226:	e7f2      	b.n	800c20e <__libc_init_array+0x1e>
 800c228:	0800c9e8 	.word	0x0800c9e8
 800c22c:	0800c9e8 	.word	0x0800c9e8
 800c230:	0800c9e8 	.word	0x0800c9e8
 800c234:	0800c9ec 	.word	0x0800c9ec

0800c238 <__retarget_lock_acquire_recursive>:
 800c238:	4770      	bx	lr

0800c23a <__retarget_lock_release_recursive>:
 800c23a:	4770      	bx	lr

0800c23c <_free_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4605      	mov	r5, r0
 800c240:	2900      	cmp	r1, #0
 800c242:	d041      	beq.n	800c2c8 <_free_r+0x8c>
 800c244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c248:	1f0c      	subs	r4, r1, #4
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	bfb8      	it	lt
 800c24e:	18e4      	addlt	r4, r4, r3
 800c250:	f7ff ff84 	bl	800c15c <__malloc_lock>
 800c254:	4a1d      	ldr	r2, [pc, #116]	@ (800c2cc <_free_r+0x90>)
 800c256:	6813      	ldr	r3, [r2, #0]
 800c258:	b933      	cbnz	r3, 800c268 <_free_r+0x2c>
 800c25a:	6063      	str	r3, [r4, #4]
 800c25c:	6014      	str	r4, [r2, #0]
 800c25e:	4628      	mov	r0, r5
 800c260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c264:	f7ff bf80 	b.w	800c168 <__malloc_unlock>
 800c268:	42a3      	cmp	r3, r4
 800c26a:	d908      	bls.n	800c27e <_free_r+0x42>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	1821      	adds	r1, r4, r0
 800c270:	428b      	cmp	r3, r1
 800c272:	bf01      	itttt	eq
 800c274:	6819      	ldreq	r1, [r3, #0]
 800c276:	685b      	ldreq	r3, [r3, #4]
 800c278:	1809      	addeq	r1, r1, r0
 800c27a:	6021      	streq	r1, [r4, #0]
 800c27c:	e7ed      	b.n	800c25a <_free_r+0x1e>
 800c27e:	461a      	mov	r2, r3
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b10b      	cbz	r3, 800c288 <_free_r+0x4c>
 800c284:	42a3      	cmp	r3, r4
 800c286:	d9fa      	bls.n	800c27e <_free_r+0x42>
 800c288:	6811      	ldr	r1, [r2, #0]
 800c28a:	1850      	adds	r0, r2, r1
 800c28c:	42a0      	cmp	r0, r4
 800c28e:	d10b      	bne.n	800c2a8 <_free_r+0x6c>
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	4401      	add	r1, r0
 800c294:	1850      	adds	r0, r2, r1
 800c296:	4283      	cmp	r3, r0
 800c298:	6011      	str	r1, [r2, #0]
 800c29a:	d1e0      	bne.n	800c25e <_free_r+0x22>
 800c29c:	6818      	ldr	r0, [r3, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	6053      	str	r3, [r2, #4]
 800c2a2:	4408      	add	r0, r1
 800c2a4:	6010      	str	r0, [r2, #0]
 800c2a6:	e7da      	b.n	800c25e <_free_r+0x22>
 800c2a8:	d902      	bls.n	800c2b0 <_free_r+0x74>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	602b      	str	r3, [r5, #0]
 800c2ae:	e7d6      	b.n	800c25e <_free_r+0x22>
 800c2b0:	6820      	ldr	r0, [r4, #0]
 800c2b2:	1821      	adds	r1, r4, r0
 800c2b4:	428b      	cmp	r3, r1
 800c2b6:	bf04      	itt	eq
 800c2b8:	6819      	ldreq	r1, [r3, #0]
 800c2ba:	685b      	ldreq	r3, [r3, #4]
 800c2bc:	6063      	str	r3, [r4, #4]
 800c2be:	bf04      	itt	eq
 800c2c0:	1809      	addeq	r1, r1, r0
 800c2c2:	6021      	streq	r1, [r4, #0]
 800c2c4:	6054      	str	r4, [r2, #4]
 800c2c6:	e7ca      	b.n	800c25e <_free_r+0x22>
 800c2c8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20000cf4 	.word	0x20000cf4

0800c2d0 <__ssputs_r>:
 800c2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	688e      	ldr	r6, [r1, #8]
 800c2d6:	461f      	mov	r7, r3
 800c2d8:	42be      	cmp	r6, r7
 800c2da:	680b      	ldr	r3, [r1, #0]
 800c2dc:	4682      	mov	sl, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	4690      	mov	r8, r2
 800c2e2:	d82d      	bhi.n	800c340 <__ssputs_r+0x70>
 800c2e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2ec:	d026      	beq.n	800c33c <__ssputs_r+0x6c>
 800c2ee:	6965      	ldr	r5, [r4, #20]
 800c2f0:	6909      	ldr	r1, [r1, #16]
 800c2f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2f6:	eba3 0901 	sub.w	r9, r3, r1
 800c2fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2fe:	1c7b      	adds	r3, r7, #1
 800c300:	444b      	add	r3, r9
 800c302:	106d      	asrs	r5, r5, #1
 800c304:	429d      	cmp	r5, r3
 800c306:	bf38      	it	cc
 800c308:	461d      	movcc	r5, r3
 800c30a:	0553      	lsls	r3, r2, #21
 800c30c:	d527      	bpl.n	800c35e <__ssputs_r+0x8e>
 800c30e:	4629      	mov	r1, r5
 800c310:	f7ff fea4 	bl	800c05c <_malloc_r>
 800c314:	4606      	mov	r6, r0
 800c316:	b360      	cbz	r0, 800c372 <__ssputs_r+0xa2>
 800c318:	6921      	ldr	r1, [r4, #16]
 800c31a:	464a      	mov	r2, r9
 800c31c:	f000 fad8 	bl	800c8d0 <memcpy>
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	6126      	str	r6, [r4, #16]
 800c32e:	6165      	str	r5, [r4, #20]
 800c330:	444e      	add	r6, r9
 800c332:	eba5 0509 	sub.w	r5, r5, r9
 800c336:	6026      	str	r6, [r4, #0]
 800c338:	60a5      	str	r5, [r4, #8]
 800c33a:	463e      	mov	r6, r7
 800c33c:	42be      	cmp	r6, r7
 800c33e:	d900      	bls.n	800c342 <__ssputs_r+0x72>
 800c340:	463e      	mov	r6, r7
 800c342:	6820      	ldr	r0, [r4, #0]
 800c344:	4632      	mov	r2, r6
 800c346:	4641      	mov	r1, r8
 800c348:	f000 faa8 	bl	800c89c <memmove>
 800c34c:	68a3      	ldr	r3, [r4, #8]
 800c34e:	1b9b      	subs	r3, r3, r6
 800c350:	60a3      	str	r3, [r4, #8]
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	4433      	add	r3, r6
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	2000      	movs	r0, #0
 800c35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35e:	462a      	mov	r2, r5
 800c360:	f000 fac4 	bl	800c8ec <_realloc_r>
 800c364:	4606      	mov	r6, r0
 800c366:	2800      	cmp	r0, #0
 800c368:	d1e0      	bne.n	800c32c <__ssputs_r+0x5c>
 800c36a:	6921      	ldr	r1, [r4, #16]
 800c36c:	4650      	mov	r0, sl
 800c36e:	f7ff ff65 	bl	800c23c <_free_r>
 800c372:	230c      	movs	r3, #12
 800c374:	f8ca 3000 	str.w	r3, [sl]
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	e7e9      	b.n	800c35a <__ssputs_r+0x8a>
	...

0800c388 <_svfiprintf_r>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	4698      	mov	r8, r3
 800c38e:	898b      	ldrh	r3, [r1, #12]
 800c390:	061b      	lsls	r3, r3, #24
 800c392:	b09d      	sub	sp, #116	@ 0x74
 800c394:	4607      	mov	r7, r0
 800c396:	460d      	mov	r5, r1
 800c398:	4614      	mov	r4, r2
 800c39a:	d510      	bpl.n	800c3be <_svfiprintf_r+0x36>
 800c39c:	690b      	ldr	r3, [r1, #16]
 800c39e:	b973      	cbnz	r3, 800c3be <_svfiprintf_r+0x36>
 800c3a0:	2140      	movs	r1, #64	@ 0x40
 800c3a2:	f7ff fe5b 	bl	800c05c <_malloc_r>
 800c3a6:	6028      	str	r0, [r5, #0]
 800c3a8:	6128      	str	r0, [r5, #16]
 800c3aa:	b930      	cbnz	r0, 800c3ba <_svfiprintf_r+0x32>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	b01d      	add	sp, #116	@ 0x74
 800c3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ba:	2340      	movs	r3, #64	@ 0x40
 800c3bc:	616b      	str	r3, [r5, #20]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3c2:	2320      	movs	r3, #32
 800c3c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3cc:	2330      	movs	r3, #48	@ 0x30
 800c3ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c56c <_svfiprintf_r+0x1e4>
 800c3d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3d6:	f04f 0901 	mov.w	r9, #1
 800c3da:	4623      	mov	r3, r4
 800c3dc:	469a      	mov	sl, r3
 800c3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3e2:	b10a      	cbz	r2, 800c3e8 <_svfiprintf_r+0x60>
 800c3e4:	2a25      	cmp	r2, #37	@ 0x25
 800c3e6:	d1f9      	bne.n	800c3dc <_svfiprintf_r+0x54>
 800c3e8:	ebba 0b04 	subs.w	fp, sl, r4
 800c3ec:	d00b      	beq.n	800c406 <_svfiprintf_r+0x7e>
 800c3ee:	465b      	mov	r3, fp
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f7ff ff6b 	bl	800c2d0 <__ssputs_r>
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	f000 80a7 	beq.w	800c54e <_svfiprintf_r+0x1c6>
 800c400:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c402:	445a      	add	r2, fp
 800c404:	9209      	str	r2, [sp, #36]	@ 0x24
 800c406:	f89a 3000 	ldrb.w	r3, [sl]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 809f 	beq.w	800c54e <_svfiprintf_r+0x1c6>
 800c410:	2300      	movs	r3, #0
 800c412:	f04f 32ff 	mov.w	r2, #4294967295
 800c416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c41a:	f10a 0a01 	add.w	sl, sl, #1
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	9307      	str	r3, [sp, #28]
 800c422:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c426:	931a      	str	r3, [sp, #104]	@ 0x68
 800c428:	4654      	mov	r4, sl
 800c42a:	2205      	movs	r2, #5
 800c42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c430:	484e      	ldr	r0, [pc, #312]	@ (800c56c <_svfiprintf_r+0x1e4>)
 800c432:	f7f3 fed5 	bl	80001e0 <memchr>
 800c436:	9a04      	ldr	r2, [sp, #16]
 800c438:	b9d8      	cbnz	r0, 800c472 <_svfiprintf_r+0xea>
 800c43a:	06d0      	lsls	r0, r2, #27
 800c43c:	bf44      	itt	mi
 800c43e:	2320      	movmi	r3, #32
 800c440:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c444:	0711      	lsls	r1, r2, #28
 800c446:	bf44      	itt	mi
 800c448:	232b      	movmi	r3, #43	@ 0x2b
 800c44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c44e:	f89a 3000 	ldrb.w	r3, [sl]
 800c452:	2b2a      	cmp	r3, #42	@ 0x2a
 800c454:	d015      	beq.n	800c482 <_svfiprintf_r+0xfa>
 800c456:	9a07      	ldr	r2, [sp, #28]
 800c458:	4654      	mov	r4, sl
 800c45a:	2000      	movs	r0, #0
 800c45c:	f04f 0c0a 	mov.w	ip, #10
 800c460:	4621      	mov	r1, r4
 800c462:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c466:	3b30      	subs	r3, #48	@ 0x30
 800c468:	2b09      	cmp	r3, #9
 800c46a:	d94b      	bls.n	800c504 <_svfiprintf_r+0x17c>
 800c46c:	b1b0      	cbz	r0, 800c49c <_svfiprintf_r+0x114>
 800c46e:	9207      	str	r2, [sp, #28]
 800c470:	e014      	b.n	800c49c <_svfiprintf_r+0x114>
 800c472:	eba0 0308 	sub.w	r3, r0, r8
 800c476:	fa09 f303 	lsl.w	r3, r9, r3
 800c47a:	4313      	orrs	r3, r2
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	46a2      	mov	sl, r4
 800c480:	e7d2      	b.n	800c428 <_svfiprintf_r+0xa0>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	1d19      	adds	r1, r3, #4
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	9103      	str	r1, [sp, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfbb      	ittet	lt
 800c48e:	425b      	neglt	r3, r3
 800c490:	f042 0202 	orrlt.w	r2, r2, #2
 800c494:	9307      	strge	r3, [sp, #28]
 800c496:	9307      	strlt	r3, [sp, #28]
 800c498:	bfb8      	it	lt
 800c49a:	9204      	strlt	r2, [sp, #16]
 800c49c:	7823      	ldrb	r3, [r4, #0]
 800c49e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4a0:	d10a      	bne.n	800c4b8 <_svfiprintf_r+0x130>
 800c4a2:	7863      	ldrb	r3, [r4, #1]
 800c4a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4a6:	d132      	bne.n	800c50e <_svfiprintf_r+0x186>
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	1d1a      	adds	r2, r3, #4
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	9203      	str	r2, [sp, #12]
 800c4b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4b4:	3402      	adds	r4, #2
 800c4b6:	9305      	str	r3, [sp, #20]
 800c4b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c57c <_svfiprintf_r+0x1f4>
 800c4bc:	7821      	ldrb	r1, [r4, #0]
 800c4be:	2203      	movs	r2, #3
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	f7f3 fe8d 	bl	80001e0 <memchr>
 800c4c6:	b138      	cbz	r0, 800c4d8 <_svfiprintf_r+0x150>
 800c4c8:	9b04      	ldr	r3, [sp, #16]
 800c4ca:	eba0 000a 	sub.w	r0, r0, sl
 800c4ce:	2240      	movs	r2, #64	@ 0x40
 800c4d0:	4082      	lsls	r2, r0
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	3401      	adds	r4, #1
 800c4d6:	9304      	str	r3, [sp, #16]
 800c4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4dc:	4824      	ldr	r0, [pc, #144]	@ (800c570 <_svfiprintf_r+0x1e8>)
 800c4de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4e2:	2206      	movs	r2, #6
 800c4e4:	f7f3 fe7c 	bl	80001e0 <memchr>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d036      	beq.n	800c55a <_svfiprintf_r+0x1d2>
 800c4ec:	4b21      	ldr	r3, [pc, #132]	@ (800c574 <_svfiprintf_r+0x1ec>)
 800c4ee:	bb1b      	cbnz	r3, 800c538 <_svfiprintf_r+0x1b0>
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	3307      	adds	r3, #7
 800c4f4:	f023 0307 	bic.w	r3, r3, #7
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	9303      	str	r3, [sp, #12]
 800c4fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fe:	4433      	add	r3, r6
 800c500:	9309      	str	r3, [sp, #36]	@ 0x24
 800c502:	e76a      	b.n	800c3da <_svfiprintf_r+0x52>
 800c504:	fb0c 3202 	mla	r2, ip, r2, r3
 800c508:	460c      	mov	r4, r1
 800c50a:	2001      	movs	r0, #1
 800c50c:	e7a8      	b.n	800c460 <_svfiprintf_r+0xd8>
 800c50e:	2300      	movs	r3, #0
 800c510:	3401      	adds	r4, #1
 800c512:	9305      	str	r3, [sp, #20]
 800c514:	4619      	mov	r1, r3
 800c516:	f04f 0c0a 	mov.w	ip, #10
 800c51a:	4620      	mov	r0, r4
 800c51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c520:	3a30      	subs	r2, #48	@ 0x30
 800c522:	2a09      	cmp	r2, #9
 800c524:	d903      	bls.n	800c52e <_svfiprintf_r+0x1a6>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0c6      	beq.n	800c4b8 <_svfiprintf_r+0x130>
 800c52a:	9105      	str	r1, [sp, #20]
 800c52c:	e7c4      	b.n	800c4b8 <_svfiprintf_r+0x130>
 800c52e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c532:	4604      	mov	r4, r0
 800c534:	2301      	movs	r3, #1
 800c536:	e7f0      	b.n	800c51a <_svfiprintf_r+0x192>
 800c538:	ab03      	add	r3, sp, #12
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	462a      	mov	r2, r5
 800c53e:	4b0e      	ldr	r3, [pc, #56]	@ (800c578 <_svfiprintf_r+0x1f0>)
 800c540:	a904      	add	r1, sp, #16
 800c542:	4638      	mov	r0, r7
 800c544:	f3af 8000 	nop.w
 800c548:	1c42      	adds	r2, r0, #1
 800c54a:	4606      	mov	r6, r0
 800c54c:	d1d6      	bne.n	800c4fc <_svfiprintf_r+0x174>
 800c54e:	89ab      	ldrh	r3, [r5, #12]
 800c550:	065b      	lsls	r3, r3, #25
 800c552:	f53f af2d 	bmi.w	800c3b0 <_svfiprintf_r+0x28>
 800c556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c558:	e72c      	b.n	800c3b4 <_svfiprintf_r+0x2c>
 800c55a:	ab03      	add	r3, sp, #12
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	462a      	mov	r2, r5
 800c560:	4b05      	ldr	r3, [pc, #20]	@ (800c578 <_svfiprintf_r+0x1f0>)
 800c562:	a904      	add	r1, sp, #16
 800c564:	4638      	mov	r0, r7
 800c566:	f000 f879 	bl	800c65c <_printf_i>
 800c56a:	e7ed      	b.n	800c548 <_svfiprintf_r+0x1c0>
 800c56c:	0800c9ac 	.word	0x0800c9ac
 800c570:	0800c9b6 	.word	0x0800c9b6
 800c574:	00000000 	.word	0x00000000
 800c578:	0800c2d1 	.word	0x0800c2d1
 800c57c:	0800c9b2 	.word	0x0800c9b2

0800c580 <_printf_common>:
 800c580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c584:	4616      	mov	r6, r2
 800c586:	4698      	mov	r8, r3
 800c588:	688a      	ldr	r2, [r1, #8]
 800c58a:	690b      	ldr	r3, [r1, #16]
 800c58c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c590:	4293      	cmp	r3, r2
 800c592:	bfb8      	it	lt
 800c594:	4613      	movlt	r3, r2
 800c596:	6033      	str	r3, [r6, #0]
 800c598:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c59c:	4607      	mov	r7, r0
 800c59e:	460c      	mov	r4, r1
 800c5a0:	b10a      	cbz	r2, 800c5a6 <_printf_common+0x26>
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	6033      	str	r3, [r6, #0]
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	0699      	lsls	r1, r3, #26
 800c5aa:	bf42      	ittt	mi
 800c5ac:	6833      	ldrmi	r3, [r6, #0]
 800c5ae:	3302      	addmi	r3, #2
 800c5b0:	6033      	strmi	r3, [r6, #0]
 800c5b2:	6825      	ldr	r5, [r4, #0]
 800c5b4:	f015 0506 	ands.w	r5, r5, #6
 800c5b8:	d106      	bne.n	800c5c8 <_printf_common+0x48>
 800c5ba:	f104 0a19 	add.w	sl, r4, #25
 800c5be:	68e3      	ldr	r3, [r4, #12]
 800c5c0:	6832      	ldr	r2, [r6, #0]
 800c5c2:	1a9b      	subs	r3, r3, r2
 800c5c4:	42ab      	cmp	r3, r5
 800c5c6:	dc26      	bgt.n	800c616 <_printf_common+0x96>
 800c5c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5cc:	6822      	ldr	r2, [r4, #0]
 800c5ce:	3b00      	subs	r3, #0
 800c5d0:	bf18      	it	ne
 800c5d2:	2301      	movne	r3, #1
 800c5d4:	0692      	lsls	r2, r2, #26
 800c5d6:	d42b      	bmi.n	800c630 <_printf_common+0xb0>
 800c5d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5dc:	4641      	mov	r1, r8
 800c5de:	4638      	mov	r0, r7
 800c5e0:	47c8      	blx	r9
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d01e      	beq.n	800c624 <_printf_common+0xa4>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	6922      	ldr	r2, [r4, #16]
 800c5ea:	f003 0306 	and.w	r3, r3, #6
 800c5ee:	2b04      	cmp	r3, #4
 800c5f0:	bf02      	ittt	eq
 800c5f2:	68e5      	ldreq	r5, [r4, #12]
 800c5f4:	6833      	ldreq	r3, [r6, #0]
 800c5f6:	1aed      	subeq	r5, r5, r3
 800c5f8:	68a3      	ldr	r3, [r4, #8]
 800c5fa:	bf0c      	ite	eq
 800c5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c600:	2500      	movne	r5, #0
 800c602:	4293      	cmp	r3, r2
 800c604:	bfc4      	itt	gt
 800c606:	1a9b      	subgt	r3, r3, r2
 800c608:	18ed      	addgt	r5, r5, r3
 800c60a:	2600      	movs	r6, #0
 800c60c:	341a      	adds	r4, #26
 800c60e:	42b5      	cmp	r5, r6
 800c610:	d11a      	bne.n	800c648 <_printf_common+0xc8>
 800c612:	2000      	movs	r0, #0
 800c614:	e008      	b.n	800c628 <_printf_common+0xa8>
 800c616:	2301      	movs	r3, #1
 800c618:	4652      	mov	r2, sl
 800c61a:	4641      	mov	r1, r8
 800c61c:	4638      	mov	r0, r7
 800c61e:	47c8      	blx	r9
 800c620:	3001      	adds	r0, #1
 800c622:	d103      	bne.n	800c62c <_printf_common+0xac>
 800c624:	f04f 30ff 	mov.w	r0, #4294967295
 800c628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c62c:	3501      	adds	r5, #1
 800c62e:	e7c6      	b.n	800c5be <_printf_common+0x3e>
 800c630:	18e1      	adds	r1, r4, r3
 800c632:	1c5a      	adds	r2, r3, #1
 800c634:	2030      	movs	r0, #48	@ 0x30
 800c636:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c63a:	4422      	add	r2, r4
 800c63c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c640:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c644:	3302      	adds	r3, #2
 800c646:	e7c7      	b.n	800c5d8 <_printf_common+0x58>
 800c648:	2301      	movs	r3, #1
 800c64a:	4622      	mov	r2, r4
 800c64c:	4641      	mov	r1, r8
 800c64e:	4638      	mov	r0, r7
 800c650:	47c8      	blx	r9
 800c652:	3001      	adds	r0, #1
 800c654:	d0e6      	beq.n	800c624 <_printf_common+0xa4>
 800c656:	3601      	adds	r6, #1
 800c658:	e7d9      	b.n	800c60e <_printf_common+0x8e>
	...

0800c65c <_printf_i>:
 800c65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	7e0f      	ldrb	r7, [r1, #24]
 800c662:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c664:	2f78      	cmp	r7, #120	@ 0x78
 800c666:	4691      	mov	r9, r2
 800c668:	4680      	mov	r8, r0
 800c66a:	460c      	mov	r4, r1
 800c66c:	469a      	mov	sl, r3
 800c66e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c672:	d807      	bhi.n	800c684 <_printf_i+0x28>
 800c674:	2f62      	cmp	r7, #98	@ 0x62
 800c676:	d80a      	bhi.n	800c68e <_printf_i+0x32>
 800c678:	2f00      	cmp	r7, #0
 800c67a:	f000 80d2 	beq.w	800c822 <_printf_i+0x1c6>
 800c67e:	2f58      	cmp	r7, #88	@ 0x58
 800c680:	f000 80b9 	beq.w	800c7f6 <_printf_i+0x19a>
 800c684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c68c:	e03a      	b.n	800c704 <_printf_i+0xa8>
 800c68e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c692:	2b15      	cmp	r3, #21
 800c694:	d8f6      	bhi.n	800c684 <_printf_i+0x28>
 800c696:	a101      	add	r1, pc, #4	@ (adr r1, 800c69c <_printf_i+0x40>)
 800c698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c69c:	0800c6f5 	.word	0x0800c6f5
 800c6a0:	0800c709 	.word	0x0800c709
 800c6a4:	0800c685 	.word	0x0800c685
 800c6a8:	0800c685 	.word	0x0800c685
 800c6ac:	0800c685 	.word	0x0800c685
 800c6b0:	0800c685 	.word	0x0800c685
 800c6b4:	0800c709 	.word	0x0800c709
 800c6b8:	0800c685 	.word	0x0800c685
 800c6bc:	0800c685 	.word	0x0800c685
 800c6c0:	0800c685 	.word	0x0800c685
 800c6c4:	0800c685 	.word	0x0800c685
 800c6c8:	0800c809 	.word	0x0800c809
 800c6cc:	0800c733 	.word	0x0800c733
 800c6d0:	0800c7c3 	.word	0x0800c7c3
 800c6d4:	0800c685 	.word	0x0800c685
 800c6d8:	0800c685 	.word	0x0800c685
 800c6dc:	0800c82b 	.word	0x0800c82b
 800c6e0:	0800c685 	.word	0x0800c685
 800c6e4:	0800c733 	.word	0x0800c733
 800c6e8:	0800c685 	.word	0x0800c685
 800c6ec:	0800c685 	.word	0x0800c685
 800c6f0:	0800c7cb 	.word	0x0800c7cb
 800c6f4:	6833      	ldr	r3, [r6, #0]
 800c6f6:	1d1a      	adds	r2, r3, #4
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	6032      	str	r2, [r6, #0]
 800c6fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c704:	2301      	movs	r3, #1
 800c706:	e09d      	b.n	800c844 <_printf_i+0x1e8>
 800c708:	6833      	ldr	r3, [r6, #0]
 800c70a:	6820      	ldr	r0, [r4, #0]
 800c70c:	1d19      	adds	r1, r3, #4
 800c70e:	6031      	str	r1, [r6, #0]
 800c710:	0606      	lsls	r6, r0, #24
 800c712:	d501      	bpl.n	800c718 <_printf_i+0xbc>
 800c714:	681d      	ldr	r5, [r3, #0]
 800c716:	e003      	b.n	800c720 <_printf_i+0xc4>
 800c718:	0645      	lsls	r5, r0, #25
 800c71a:	d5fb      	bpl.n	800c714 <_printf_i+0xb8>
 800c71c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c720:	2d00      	cmp	r5, #0
 800c722:	da03      	bge.n	800c72c <_printf_i+0xd0>
 800c724:	232d      	movs	r3, #45	@ 0x2d
 800c726:	426d      	negs	r5, r5
 800c728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c72c:	4859      	ldr	r0, [pc, #356]	@ (800c894 <_printf_i+0x238>)
 800c72e:	230a      	movs	r3, #10
 800c730:	e011      	b.n	800c756 <_printf_i+0xfa>
 800c732:	6821      	ldr	r1, [r4, #0]
 800c734:	6833      	ldr	r3, [r6, #0]
 800c736:	0608      	lsls	r0, r1, #24
 800c738:	f853 5b04 	ldr.w	r5, [r3], #4
 800c73c:	d402      	bmi.n	800c744 <_printf_i+0xe8>
 800c73e:	0649      	lsls	r1, r1, #25
 800c740:	bf48      	it	mi
 800c742:	b2ad      	uxthmi	r5, r5
 800c744:	2f6f      	cmp	r7, #111	@ 0x6f
 800c746:	4853      	ldr	r0, [pc, #332]	@ (800c894 <_printf_i+0x238>)
 800c748:	6033      	str	r3, [r6, #0]
 800c74a:	bf14      	ite	ne
 800c74c:	230a      	movne	r3, #10
 800c74e:	2308      	moveq	r3, #8
 800c750:	2100      	movs	r1, #0
 800c752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c756:	6866      	ldr	r6, [r4, #4]
 800c758:	60a6      	str	r6, [r4, #8]
 800c75a:	2e00      	cmp	r6, #0
 800c75c:	bfa2      	ittt	ge
 800c75e:	6821      	ldrge	r1, [r4, #0]
 800c760:	f021 0104 	bicge.w	r1, r1, #4
 800c764:	6021      	strge	r1, [r4, #0]
 800c766:	b90d      	cbnz	r5, 800c76c <_printf_i+0x110>
 800c768:	2e00      	cmp	r6, #0
 800c76a:	d04b      	beq.n	800c804 <_printf_i+0x1a8>
 800c76c:	4616      	mov	r6, r2
 800c76e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c772:	fb03 5711 	mls	r7, r3, r1, r5
 800c776:	5dc7      	ldrb	r7, [r0, r7]
 800c778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c77c:	462f      	mov	r7, r5
 800c77e:	42bb      	cmp	r3, r7
 800c780:	460d      	mov	r5, r1
 800c782:	d9f4      	bls.n	800c76e <_printf_i+0x112>
 800c784:	2b08      	cmp	r3, #8
 800c786:	d10b      	bne.n	800c7a0 <_printf_i+0x144>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	07df      	lsls	r7, r3, #31
 800c78c:	d508      	bpl.n	800c7a0 <_printf_i+0x144>
 800c78e:	6923      	ldr	r3, [r4, #16]
 800c790:	6861      	ldr	r1, [r4, #4]
 800c792:	4299      	cmp	r1, r3
 800c794:	bfde      	ittt	le
 800c796:	2330      	movle	r3, #48	@ 0x30
 800c798:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c79c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c7a0:	1b92      	subs	r2, r2, r6
 800c7a2:	6122      	str	r2, [r4, #16]
 800c7a4:	f8cd a000 	str.w	sl, [sp]
 800c7a8:	464b      	mov	r3, r9
 800c7aa:	aa03      	add	r2, sp, #12
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	f7ff fee6 	bl	800c580 <_printf_common>
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d14a      	bne.n	800c84e <_printf_i+0x1f2>
 800c7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7bc:	b004      	add	sp, #16
 800c7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	f043 0320 	orr.w	r3, r3, #32
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	4833      	ldr	r0, [pc, #204]	@ (800c898 <_printf_i+0x23c>)
 800c7cc:	2778      	movs	r7, #120	@ 0x78
 800c7ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	6831      	ldr	r1, [r6, #0]
 800c7d6:	061f      	lsls	r7, r3, #24
 800c7d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7dc:	d402      	bmi.n	800c7e4 <_printf_i+0x188>
 800c7de:	065f      	lsls	r7, r3, #25
 800c7e0:	bf48      	it	mi
 800c7e2:	b2ad      	uxthmi	r5, r5
 800c7e4:	6031      	str	r1, [r6, #0]
 800c7e6:	07d9      	lsls	r1, r3, #31
 800c7e8:	bf44      	itt	mi
 800c7ea:	f043 0320 	orrmi.w	r3, r3, #32
 800c7ee:	6023      	strmi	r3, [r4, #0]
 800c7f0:	b11d      	cbz	r5, 800c7fa <_printf_i+0x19e>
 800c7f2:	2310      	movs	r3, #16
 800c7f4:	e7ac      	b.n	800c750 <_printf_i+0xf4>
 800c7f6:	4827      	ldr	r0, [pc, #156]	@ (800c894 <_printf_i+0x238>)
 800c7f8:	e7e9      	b.n	800c7ce <_printf_i+0x172>
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	f023 0320 	bic.w	r3, r3, #32
 800c800:	6023      	str	r3, [r4, #0]
 800c802:	e7f6      	b.n	800c7f2 <_printf_i+0x196>
 800c804:	4616      	mov	r6, r2
 800c806:	e7bd      	b.n	800c784 <_printf_i+0x128>
 800c808:	6833      	ldr	r3, [r6, #0]
 800c80a:	6825      	ldr	r5, [r4, #0]
 800c80c:	6961      	ldr	r1, [r4, #20]
 800c80e:	1d18      	adds	r0, r3, #4
 800c810:	6030      	str	r0, [r6, #0]
 800c812:	062e      	lsls	r6, r5, #24
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	d501      	bpl.n	800c81c <_printf_i+0x1c0>
 800c818:	6019      	str	r1, [r3, #0]
 800c81a:	e002      	b.n	800c822 <_printf_i+0x1c6>
 800c81c:	0668      	lsls	r0, r5, #25
 800c81e:	d5fb      	bpl.n	800c818 <_printf_i+0x1bc>
 800c820:	8019      	strh	r1, [r3, #0]
 800c822:	2300      	movs	r3, #0
 800c824:	6123      	str	r3, [r4, #16]
 800c826:	4616      	mov	r6, r2
 800c828:	e7bc      	b.n	800c7a4 <_printf_i+0x148>
 800c82a:	6833      	ldr	r3, [r6, #0]
 800c82c:	1d1a      	adds	r2, r3, #4
 800c82e:	6032      	str	r2, [r6, #0]
 800c830:	681e      	ldr	r6, [r3, #0]
 800c832:	6862      	ldr	r2, [r4, #4]
 800c834:	2100      	movs	r1, #0
 800c836:	4630      	mov	r0, r6
 800c838:	f7f3 fcd2 	bl	80001e0 <memchr>
 800c83c:	b108      	cbz	r0, 800c842 <_printf_i+0x1e6>
 800c83e:	1b80      	subs	r0, r0, r6
 800c840:	6060      	str	r0, [r4, #4]
 800c842:	6863      	ldr	r3, [r4, #4]
 800c844:	6123      	str	r3, [r4, #16]
 800c846:	2300      	movs	r3, #0
 800c848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c84c:	e7aa      	b.n	800c7a4 <_printf_i+0x148>
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	4632      	mov	r2, r6
 800c852:	4649      	mov	r1, r9
 800c854:	4640      	mov	r0, r8
 800c856:	47d0      	blx	sl
 800c858:	3001      	adds	r0, #1
 800c85a:	d0ad      	beq.n	800c7b8 <_printf_i+0x15c>
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	079b      	lsls	r3, r3, #30
 800c860:	d413      	bmi.n	800c88a <_printf_i+0x22e>
 800c862:	68e0      	ldr	r0, [r4, #12]
 800c864:	9b03      	ldr	r3, [sp, #12]
 800c866:	4298      	cmp	r0, r3
 800c868:	bfb8      	it	lt
 800c86a:	4618      	movlt	r0, r3
 800c86c:	e7a6      	b.n	800c7bc <_printf_i+0x160>
 800c86e:	2301      	movs	r3, #1
 800c870:	4632      	mov	r2, r6
 800c872:	4649      	mov	r1, r9
 800c874:	4640      	mov	r0, r8
 800c876:	47d0      	blx	sl
 800c878:	3001      	adds	r0, #1
 800c87a:	d09d      	beq.n	800c7b8 <_printf_i+0x15c>
 800c87c:	3501      	adds	r5, #1
 800c87e:	68e3      	ldr	r3, [r4, #12]
 800c880:	9903      	ldr	r1, [sp, #12]
 800c882:	1a5b      	subs	r3, r3, r1
 800c884:	42ab      	cmp	r3, r5
 800c886:	dcf2      	bgt.n	800c86e <_printf_i+0x212>
 800c888:	e7eb      	b.n	800c862 <_printf_i+0x206>
 800c88a:	2500      	movs	r5, #0
 800c88c:	f104 0619 	add.w	r6, r4, #25
 800c890:	e7f5      	b.n	800c87e <_printf_i+0x222>
 800c892:	bf00      	nop
 800c894:	0800c9bd 	.word	0x0800c9bd
 800c898:	0800c9ce 	.word	0x0800c9ce

0800c89c <memmove>:
 800c89c:	4288      	cmp	r0, r1
 800c89e:	b510      	push	{r4, lr}
 800c8a0:	eb01 0402 	add.w	r4, r1, r2
 800c8a4:	d902      	bls.n	800c8ac <memmove+0x10>
 800c8a6:	4284      	cmp	r4, r0
 800c8a8:	4623      	mov	r3, r4
 800c8aa:	d807      	bhi.n	800c8bc <memmove+0x20>
 800c8ac:	1e43      	subs	r3, r0, #1
 800c8ae:	42a1      	cmp	r1, r4
 800c8b0:	d008      	beq.n	800c8c4 <memmove+0x28>
 800c8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8ba:	e7f8      	b.n	800c8ae <memmove+0x12>
 800c8bc:	4402      	add	r2, r0
 800c8be:	4601      	mov	r1, r0
 800c8c0:	428a      	cmp	r2, r1
 800c8c2:	d100      	bne.n	800c8c6 <memmove+0x2a>
 800c8c4:	bd10      	pop	{r4, pc}
 800c8c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8ce:	e7f7      	b.n	800c8c0 <memmove+0x24>

0800c8d0 <memcpy>:
 800c8d0:	440a      	add	r2, r1
 800c8d2:	4291      	cmp	r1, r2
 800c8d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8d8:	d100      	bne.n	800c8dc <memcpy+0xc>
 800c8da:	4770      	bx	lr
 800c8dc:	b510      	push	{r4, lr}
 800c8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8e6:	4291      	cmp	r1, r2
 800c8e8:	d1f9      	bne.n	800c8de <memcpy+0xe>
 800c8ea:	bd10      	pop	{r4, pc}

0800c8ec <_realloc_r>:
 800c8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f0:	4680      	mov	r8, r0
 800c8f2:	4615      	mov	r5, r2
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	b921      	cbnz	r1, 800c902 <_realloc_r+0x16>
 800c8f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	f7ff bbad 	b.w	800c05c <_malloc_r>
 800c902:	b92a      	cbnz	r2, 800c910 <_realloc_r+0x24>
 800c904:	f7ff fc9a 	bl	800c23c <_free_r>
 800c908:	2400      	movs	r4, #0
 800c90a:	4620      	mov	r0, r4
 800c90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c910:	f000 f81a 	bl	800c948 <_malloc_usable_size_r>
 800c914:	4285      	cmp	r5, r0
 800c916:	4606      	mov	r6, r0
 800c918:	d802      	bhi.n	800c920 <_realloc_r+0x34>
 800c91a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c91e:	d8f4      	bhi.n	800c90a <_realloc_r+0x1e>
 800c920:	4629      	mov	r1, r5
 800c922:	4640      	mov	r0, r8
 800c924:	f7ff fb9a 	bl	800c05c <_malloc_r>
 800c928:	4607      	mov	r7, r0
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d0ec      	beq.n	800c908 <_realloc_r+0x1c>
 800c92e:	42b5      	cmp	r5, r6
 800c930:	462a      	mov	r2, r5
 800c932:	4621      	mov	r1, r4
 800c934:	bf28      	it	cs
 800c936:	4632      	movcs	r2, r6
 800c938:	f7ff ffca 	bl	800c8d0 <memcpy>
 800c93c:	4621      	mov	r1, r4
 800c93e:	4640      	mov	r0, r8
 800c940:	f7ff fc7c 	bl	800c23c <_free_r>
 800c944:	463c      	mov	r4, r7
 800c946:	e7e0      	b.n	800c90a <_realloc_r+0x1e>

0800c948 <_malloc_usable_size_r>:
 800c948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c94c:	1f18      	subs	r0, r3, #4
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bfbc      	itt	lt
 800c952:	580b      	ldrlt	r3, [r1, r0]
 800c954:	18c0      	addlt	r0, r0, r3
 800c956:	4770      	bx	lr

0800c958 <_init>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	bf00      	nop
 800c95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95e:	bc08      	pop	{r3}
 800c960:	469e      	mov	lr, r3
 800c962:	4770      	bx	lr

0800c964 <_fini>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	bf00      	nop
 800c968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96a:	bc08      	pop	{r3}
 800c96c:	469e      	mov	lr, r3
 800c96e:	4770      	bx	lr
