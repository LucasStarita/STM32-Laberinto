
Autito_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800be34  0800be34  0000ce34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be68  0800be68  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800be68  0800be68  0000ce68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be70  0800be70  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be70  0800be70  0000ce70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be74  0800be74  0000ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800be78  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00000dac  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e28  20000e28  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d299  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004050  00000000  00000000  0002a345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  0002e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013fd  00000000  00000000  0002fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262fc  00000000  00000000  0003112d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206d8  00000000  00000000  00057429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1a45  00000000  00000000  00077b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159546  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007118  00000000  00000000  0015958c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001606a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800be1c 	.word	0x0800be1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800be1c 	.word	0x0800be1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 fd74 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f87c 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 fae4 	bl	8000a90 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 faba 	bl	8000a40 <MX_DMA_Init>
  MX_I2C1_Init();
 80004cc:	f000 f984 	bl	80007d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d0:	f000 f9b0 	bl	8000834 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f00b f84c 	bl	800b570 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004d8:	f000 f8da 	bl	8000690 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004dc:	f000 f92a 	bl	8000734 <MX_ADC2_Init>
  MX_TIM14_Init();
 80004e0:	f000 fa60 	bl	80009a4 <MX_TIM14_Init>
  MX_TIM3_Init();
 80004e4:	f000 f9dc 	bl	80008a0 <MX_TIM3_Init>
  MX_UART5_Init();
 80004e8:	f000 fa80 	bl	80009ec <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	Inicio(); // Probamos los LED e Inicializamos
 80004ec:	f000 fc24 	bl	8000d38 <Inicio>
	Inicio_Motores();
 80004f0:	f000 fcb2 	bl	8000e58 <Inicio_Motores>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f4:	f00b f862 	bl	800b5bc <MX_USB_HOST_Process>
    while(pos==15){
		Bailar();
	}
*/

    while (pos==0){
 80004f8:	e001      	b.n	80004fe <main+0x46>
    				Frenar();
 80004fa:	f000 fe15 	bl	8001128 <Frenar>
    while (pos==0){
 80004fe:	4b27      	ldr	r3, [pc, #156]	@ (800059c <main+0xe4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <main+0x42>


// CONTROL FINAL -------------------------------------


    		if (linea == 1) {
 8000506:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <main+0xe8>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d124      	bne.n	8000558 <main+0xa0>

			cont_posible_linea++;
 800050e:	4b25      	ldr	r3, [pc, #148]	@ (80005a4 <main+0xec>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	4a23      	ldr	r2, [pc, #140]	@ (80005a4 <main+0xec>)
 8000516:	6013      	str	r3, [r2, #0]

			if (antirebote()) {
 8000518:	f000 fd18 	bl	8000f4c <antirebote>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d017      	beq.n	8000552 <main+0x9a>
				contlinea++;
 8000522:	4b21      	ldr	r3, [pc, #132]	@ (80005a8 <main+0xf0>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	b29b      	uxth	r3, r3
 8000528:	3301      	adds	r3, #1
 800052a:	b29a      	uxth	r2, r3
 800052c:	4b1e      	ldr	r3, [pc, #120]	@ (80005a8 <main+0xf0>)
 800052e:	801a      	strh	r2, [r3, #0]
				posicion();
 8000530:	f000 fed6 	bl	80012e0 <posicion>
				dir_min = DirMin(mapa);
 8000534:	481d      	ldr	r0, [pc, #116]	@ (80005ac <main+0xf4>)
 8000536:	f001 f851 	bl	80015dc <DirMin>
 800053a:	4603      	mov	r3, r0
 800053c:	4a1c      	ldr	r2, [pc, #112]	@ (80005b0 <main+0xf8>)
 800053e:	6013      	str	r3, [r2, #0]
				linea = 0;
 8000540:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <main+0xe8>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
				Avanzar();
 8000546:	f000 fdd1 	bl	80010ec <Avanzar>
				HAL_Delay(100);
 800054a:	2064      	movs	r0, #100	@ 0x64
 800054c:	f001 fd9e 	bl	800208c <HAL_Delay>
 8000550:	e002      	b.n	8000558 <main+0xa0>

			}
			else
				linea = 0;
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <main+0xe8>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
//			dir_min = DirMin(mapa);
//		}



		if (orientacion == dir_min)
 8000558:	4b16      	ldr	r3, [pc, #88]	@ (80005b4 <main+0xfc>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <main+0xf8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d102      	bne.n	800056a <main+0xb2>
			Centrado();
 8000564:	f000 fd36 	bl	8000fd4 <Centrado>
 8000568:	e7c4      	b.n	80004f4 <main+0x3c>
		else {
			direccion_de_giro = PrioridadDeGiro(dir_min);
 800056a:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <main+0xf8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f000 ffb6 	bl	80014e0 <PrioridadDeGiro>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <main+0x100>)
 800057a:	701a      	strb	r2, [r3, #0]
			Girar(direccion_de_giro);
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <main+0x100>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fdef 	bl	8001164 <Girar>
			calcular_orientacion(direccion_de_giro);
 8000586:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <main+0x100>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fe6c 	bl	8001268 <calcular_orientacion>
			Frenar();
 8000590:	f000 fdca 	bl	8001128 <Frenar>
			HAL_Delay(200);
 8000594:	20c8      	movs	r0, #200	@ 0xc8
 8000596:	f001 fd79 	bl	800208c <HAL_Delay>
    MX_USB_HOST_Process();
 800059a:	e7ab      	b.n	80004f4 <main+0x3c>
 800059c:	2000047c 	.word	0x2000047c
 80005a0:	20000470 	.word	0x20000470
 80005a4:	2000050c 	.word	0x2000050c
 80005a8:	20000516 	.word	0x20000516
 80005ac:	20000488 	.word	0x20000488
 80005b0:	20000508 	.word	0x20000508
 80005b4:	20000480 	.word	0x20000480
 80005b8:	20000484 	.word	0x20000484

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00b fb98 	bl	800bd00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	@ (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	@ (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062c:	2308      	movs	r3, #8
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000630:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000634:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063a:	2307      	movs	r3, #7
 800063c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	4618      	mov	r0, r3
 8000644:	f005 faba 	bl	8005bbc <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064e:	f001 f95f 	bl	8001910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2105      	movs	r1, #5
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fd1b 	bl	80060ac <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800067c:	f001 f948 	bl	8001910 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	@ 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <MX_ADC1_Init+0x9c>)
 80006a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006be:	2201      	movs	r2, #1
 80006c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006d2:	4a17      	ldr	r2, [pc, #92]	@ (8000730 <MX_ADC1_Init+0xa0>)
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006de:	2201      	movs	r2, #1
 80006e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006f2:	f001 fcef 	bl	80020d4 <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006fc:	f001 f908 	bl	8001910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000700:	2308      	movs	r3, #8
 8000702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000708:	2303      	movs	r3, #3
 800070a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_ADC1_Init+0x98>)
 8000712:	f001 fe41 	bl	8002398 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800071c:	f001 f8f8 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000098 	.word	0x20000098
 800072c:	40012000 	.word	0x40012000
 8000730:	0f000001 	.word	0x0f000001

08000734 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000746:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <MX_ADC2_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_ADC2_Init+0x98>)
 800074e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000752:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_ADC2_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000762:	2201      	movs	r2, #1
 8000764:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000776:	4a17      	ldr	r2, [pc, #92]	@ (80007d4 <MX_ADC2_Init+0xa0>)
 8000778:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_ADC2_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000788:	2201      	movs	r2, #1
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	@ (80007cc <MX_ADC2_Init+0x98>)
 8000796:	f001 fc9d 	bl	80020d4 <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80007a0:	f001 f8b6 	bl	8001910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007a4:	2309      	movs	r3, #9
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80007ac:	2303      	movs	r3, #3
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_ADC2_Init+0x98>)
 80007b6:	f001 fdef 	bl	8002398 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80007c0:	f001 f8a6 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000e0 	.word	0x200000e0
 80007d0:	40012100 	.word	0x40012100
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	@ (800082c <MX_I2C1_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x58>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_I2C1_Init+0x50>)
 8000816:	f005 f88d 	bl	8005934 <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f001 f876 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200001e8 	.word	0x200001e8
 800082c:	40005400 	.word	0x40005400
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_SPI1_Init+0x64>)
 800083a:	4a18      	ldr	r2, [pc, #96]	@ (800089c <MX_SPI1_Init+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000840:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000866:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000880:	220a      	movs	r2, #10
 8000882:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000886:	f005 fe31 	bl	80064ec <HAL_SPI_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000890:	f001 f83e 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000023c 	.word	0x2000023c
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	@ 0x38
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d0:	4b32      	ldr	r3, [pc, #200]	@ (800099c <MX_TIM3_Init+0xfc>)
 80008d2:	4a33      	ldr	r2, [pc, #204]	@ (80009a0 <MX_TIM3_Init+0x100>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008d6:	4b31      	ldr	r3, [pc, #196]	@ (800099c <MX_TIM3_Init+0xfc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <MX_TIM3_Init+0xfc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 80008e2:	4b2e      	ldr	r3, [pc, #184]	@ (800099c <MX_TIM3_Init+0xfc>)
 80008e4:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80008e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <MX_TIM3_Init+0xfc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <MX_TIM3_Init+0xfc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008f6:	4829      	ldr	r0, [pc, #164]	@ (800099c <MX_TIM3_Init+0xfc>)
 80008f8:	f005 fe81 	bl	80065fe <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000902:	f001 f805 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800090c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000910:	4619      	mov	r1, r3
 8000912:	4822      	ldr	r0, [pc, #136]	@ (800099c <MX_TIM3_Init+0xfc>)
 8000914:	f006 f8a6 	bl	8006a64 <HAL_TIM_ConfigClockSource>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800091e:	f000 fff7 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000922:	481e      	ldr	r0, [pc, #120]	@ (800099c <MX_TIM3_Init+0xfc>)
 8000924:	f005 feba 	bl	800669c <HAL_TIM_PWM_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800092e:	f000 ffef 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	4619      	mov	r1, r3
 8000940:	4816      	ldr	r0, [pc, #88]	@ (800099c <MX_TIM3_Init+0xfc>)
 8000942:	f006 fc6d 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800094c:	f000 ffe0 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000950:	2360      	movs	r3, #96	@ 0x60
 8000952:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2208      	movs	r2, #8
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <MX_TIM3_Init+0xfc>)
 8000968:	f005 ffba 	bl	80068e0 <HAL_TIM_PWM_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000972:	f000 ffcd 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	220c      	movs	r2, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4807      	ldr	r0, [pc, #28]	@ (800099c <MX_TIM3_Init+0xfc>)
 800097e:	f005 ffaf 	bl	80068e0 <HAL_TIM_PWM_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000988:	f000 ffc2 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800098c:	4803      	ldr	r0, [pc, #12]	@ (800099c <MX_TIM3_Init+0xfc>)
 800098e:	f001 f991 	bl	8001cb4 <HAL_TIM_MspPostInit>

}
 8000992:	bf00      	nop
 8000994:	3738      	adds	r7, #56	@ 0x38
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000294 	.word	0x20000294
 80009a0:	40000400 	.word	0x40000400

080009a4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_TIM14_Init+0x40>)
 80009aa:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <MX_TIM14_Init+0x44>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 41999;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <MX_TIM14_Init+0x40>)
 80009b0:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80009b4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_TIM14_Init+0x40>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 199;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_TIM14_Init+0x40>)
 80009be:	22c7      	movs	r2, #199	@ 0xc7
 80009c0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_TIM14_Init+0x40>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_TIM14_Init+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_TIM14_Init+0x40>)
 80009d0:	f005 fe15 	bl	80065fe <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80009da:	f000 ff99 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200002dc 	.word	0x200002dc
 80009e8:	40002000 	.word	0x40002000

080009ec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_UART5_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <MX_UART5_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_UART5_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a24:	f006 fc78 	bl	8007318 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 ff6f 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000324 	.word	0x20000324
 8000a3c:	40005000 	.word	0x40005000

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_DMA_Init+0x4c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a8c <MX_DMA_Init+0x4c>)
 8000a50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <MX_DMA_Init+0x4c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2038      	movs	r0, #56	@ 0x38
 8000a68:	f002 f811 	bl	8002a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a6c:	2038      	movs	r0, #56	@ 0x38
 8000a6e:	f002 f82a 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	203a      	movs	r0, #58	@ 0x3a
 8000a78:	f002 f809 	bl	8002a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a7c:	203a      	movs	r0, #58	@ 0x3a
 8000a7e:	f002 f822 	bl	8002ac6 <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	@ 0x30
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	4b9d      	ldr	r3, [pc, #628]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b9a      	ldr	r3, [pc, #616]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	4b96      	ldr	r3, [pc, #600]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a95      	ldr	r2, [pc, #596]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b93      	ldr	r3, [pc, #588]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b8f      	ldr	r3, [pc, #572]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a8e      	ldr	r2, [pc, #568]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b8c      	ldr	r3, [pc, #560]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b88      	ldr	r3, [pc, #544]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a87      	ldr	r2, [pc, #540]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b85      	ldr	r3, [pc, #532]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b81      	ldr	r3, [pc, #516]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a80      	ldr	r2, [pc, #512]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b7e      	ldr	r3, [pc, #504]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b7a      	ldr	r3, [pc, #488]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a79      	ldr	r2, [pc, #484]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b77      	ldr	r3, [pc, #476]	@ (8000d20 <MX_GPIO_Init+0x290>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2108      	movs	r1, #8
 8000b52:	4874      	ldr	r0, [pc, #464]	@ (8000d24 <MX_GPIO_Init+0x294>)
 8000b54:	f002 fd88 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4872      	ldr	r0, [pc, #456]	@ (8000d28 <MX_GPIO_Init+0x298>)
 8000b5e:	f002 fd83 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mi0_Pin|mi1_Pin|md0_Pin|md1_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000b68:	4870      	ldr	r0, [pc, #448]	@ (8000d2c <MX_GPIO_Init+0x29c>)
 8000b6a:	f002 fd7d 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|LED_VERDE_Pin|LD3_Pin|LED_ROJO_Pin
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f64f 0110 	movw	r1, #63504	@ 0xf810
 8000b74:	486e      	ldr	r0, [pc, #440]	@ (8000d30 <MX_GPIO_Init+0x2a0>)
 8000b76:	f002 fd77 	bl	8003668 <HAL_GPIO_WritePin>
                          |LED_AZUL_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4864      	ldr	r0, [pc, #400]	@ (8000d24 <MX_GPIO_Init+0x294>)
 8000b92:	f002 fbb5 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	485e      	ldr	r0, [pc, #376]	@ (8000d28 <MX_GPIO_Init+0x298>)
 8000bae:	f002 fba7 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4856      	ldr	r0, [pc, #344]	@ (8000d28 <MX_GPIO_Init+0x298>)
 8000bce:	f002 fb97 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : boton_azul_Pin */
  GPIO_InitStruct.Pin = boton_azul_Pin;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(boton_azul_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4853      	ldr	r0, [pc, #332]	@ (8000d34 <MX_GPIO_Init+0x2a4>)
 8000be6:	f002 fb8b 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bea:	2310      	movs	r3, #16
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	484b      	ldr	r0, [pc, #300]	@ (8000d34 <MX_GPIO_Init+0x2a4>)
 8000c06:	f002 fb7b 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4843      	ldr	r0, [pc, #268]	@ (8000d2c <MX_GPIO_Init+0x29c>)
 8000c1e:	f002 fb6f 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c34:	2305      	movs	r3, #5
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	483b      	ldr	r0, [pc, #236]	@ (8000d2c <MX_GPIO_Init+0x29c>)
 8000c40:	f002 fb5e 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pins : mi0_Pin mi1_Pin md0_Pin md1_Pin */
  GPIO_InitStruct.Pin = mi0_Pin|mi1_Pin|md0_Pin|md1_Pin;
 8000c44:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4833      	ldr	r0, [pc, #204]	@ (8000d2c <MX_GPIO_Init+0x29c>)
 8000c5e:	f002 fb4f 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 LED_VERDE_Pin LD3_Pin LED_ROJO_Pin
                           LED_AZUL_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|LED_VERDE_Pin|LD3_Pin|LED_ROJO_Pin
 8000c62:	f64f 0310 	movw	r3, #63504	@ 0xf810
 8000c66:	61fb      	str	r3, [r7, #28]
                          |LED_AZUL_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	482d      	ldr	r0, [pc, #180]	@ (8000d30 <MX_GPIO_Init+0x2a0>)
 8000c7c:	f002 fb40 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : sensor_pared_Pin */
  GPIO_InitStruct.Pin = sensor_pared_Pin;
 8000c80:	2340      	movs	r3, #64	@ 0x40
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(sensor_pared_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4825      	ldr	r0, [pc, #148]	@ (8000d28 <MX_GPIO_Init+0x298>)
 8000c94:	f002 fb34 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : sensor_linea_Pin */
  GPIO_InitStruct.Pin = sensor_linea_Pin;
 8000c98:	2380      	movs	r3, #128	@ 0x80
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c9c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(sensor_linea_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	481e      	ldr	r0, [pc, #120]	@ (8000d28 <MX_GPIO_Init+0x298>)
 8000cae:	f002 fb27 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4816      	ldr	r0, [pc, #88]	@ (8000d28 <MX_GPIO_Init+0x298>)
 8000cd0:	f002 fb16 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4812      	ldr	r0, [pc, #72]	@ (8000d30 <MX_GPIO_Init+0x2a0>)
 8000ce8:	f002 fb0a 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <MX_GPIO_Init+0x294>)
 8000d02:	f002 fafd 	bl	8003300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2017      	movs	r0, #23
 8000d0c:	f001 febf 	bl	8002a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d10:	2017      	movs	r0, #23
 8000d12:	f001 fed8 	bl	8002ac6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	@ 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40020000 	.word	0x40020000

08000d38 <Inicio>:

/* USER CODE BEGIN 4 */

void Inicio(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
// Encendemos todos los LED y esperamos un tiempo
	EncenderTodos();
 8000d3c:	f000 fd5c 	bl	80017f8 <EncenderTodos>
	HAL_Delay(TENCENDIDO);
 8000d40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d44:	f001 f9a2 	bl	800208c <HAL_Delay>
// Apagamos todos los LED y esperamos un tiempo
	ApagarTodos();
 8000d48:	f000 fd6e 	bl	8001828 <ApagarTodos>
	HAL_Delay(TAPAGADO);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d50:	f001 f99c 	bl	800208c <HAL_Delay>
// Iniciamos las conversiones
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer1, BUFFER_TOTAL);
 8000d54:	2240      	movs	r2, #64	@ 0x40
 8000d56:	492f      	ldr	r1, [pc, #188]	@ (8000e14 <Inicio+0xdc>)
 8000d58:	482f      	ldr	r0, [pc, #188]	@ (8000e18 <Inicio+0xe0>)
 8000d5a:	f001 f9ff 	bl	800215c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) dma_buffer2, BUFFER_TOTAL);
 8000d5e:	2240      	movs	r2, #64	@ 0x40
 8000d60:	492e      	ldr	r1, [pc, #184]	@ (8000e1c <Inicio+0xe4>)
 8000d62:	482f      	ldr	r0, [pc, #188]	@ (8000e20 <Inicio+0xe8>)
 8000d64:	f001 f9fa 	bl	800215c <HAL_ADC_Start_DMA>
// Setea los PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PC8 - Velocidad izquierda
 8000d68:	2108      	movs	r1, #8
 8000d6a:	482e      	ldr	r0, [pc, #184]	@ (8000e24 <Inicio+0xec>)
 8000d6c:	f005 fcf0 	bl	8006750 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PC9 - Velocidad derecha
 8000d70:	210c      	movs	r1, #12
 8000d72:	482c      	ldr	r0, [pc, #176]	@ (8000e24 <Inicio+0xec>)
 8000d74:	f005 fcec 	bl	8006750 <HAL_TIM_PWM_Start>
	setVelocidadIzquierda(75);  // 75% al motor izquierdo
 8000d78:	204b      	movs	r0, #75	@ 0x4b
 8000d7a:	f000 f88b 	bl	8000e94 <setVelocidadIzquierda>
	setVelocidadDerecha(75);    // 75% al motor derecho
 8000d7e:	204b      	movs	r0, #75	@ 0x4b
 8000d80:	f000 f8ae 	bl	8000ee0 <setVelocidadDerecha>
	InicializarMapa(mapa);     // Inicializa la matriz de pesos y paredes
 8000d84:	4828      	ldr	r0, [pc, #160]	@ (8000e28 <Inicio+0xf0>)
 8000d86:	f000 faf7 	bl	8001378 <InicializarMapa>
	ActualizarPesos(mapa);
 8000d8a:	4827      	ldr	r0, [pc, #156]	@ (8000e28 <Inicio+0xf0>)
 8000d8c:	f000 fb50 	bl	8001430 <ActualizarPesos>
	linea = 0;
 8000d90:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <Inicio+0xf4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
	pared = 0; //inicializar variables de interrupcion
 8000d96:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <Inicio+0xf8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
	orientacion = 0;
 8000d9c:	4b25      	ldr	r3, [pc, #148]	@ (8000e34 <Inicio+0xfc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
	pos = 15;
 8000da2:	4b25      	ldr	r3, [pc, #148]	@ (8000e38 <Inicio+0x100>)
 8000da4:	220f      	movs	r2, #15
 8000da6:	601a      	str	r2, [r3, #0]
	dir_min = 0;
 8000da8:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <Inicio+0x104>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
	UMBRAL_DERECHO=1700;
 8000dae:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <Inicio+0x108>)
 8000db0:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000db4:	801a      	strh	r2, [r3, #0]
	UMBRAL_IZQUIERDO=3700;
 8000db6:	4b23      	ldr	r3, [pc, #140]	@ (8000e44 <Inicio+0x10c>)
 8000db8:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000dbc:	801a      	strh	r2, [r3, #0]
	Calibrar_Sensores();
 8000dbe:	f000 fbc5 	bl	800154c <Calibrar_Sensores>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000dc2:	e00b      	b.n	8000ddc <Inicio+0xa4>
		EncenderLed(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f000 fd47 	bl	8001858 <EncenderLed>
	HAL_Delay(100);
 8000dca:	2064      	movs	r0, #100	@ 0x64
 8000dcc:	f001 f95e 	bl	800208c <HAL_Delay>
	ApagarLed(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f000 fd6f 	bl	80018b4 <ApagarLed>
	HAL_Delay(100);
 8000dd6:	2064      	movs	r0, #100	@ 0x64
 8000dd8:	f001 f958 	bl	800208c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000ddc:	2101      	movs	r1, #1
 8000dde:	481a      	ldr	r0, [pc, #104]	@ (8000e48 <Inicio+0x110>)
 8000de0:	f002 fc2a 	bl	8003638 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0ec      	beq.n	8000dc4 <Inicio+0x8c>
	}
	HAL_Delay(1000);
 8000dea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dee:	f001 f94d 	bl	800208c <HAL_Delay>
	linea=0;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <Inicio+0xf4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
	pared=0;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <Inicio+0xf8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
	contpared = 0;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <Inicio+0x114>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	801a      	strh	r2, [r3, #0]
	contlinea = 0;
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <Inicio+0x118>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	801a      	strh	r2, [r3, #0]
	paredprueba = 0;
 8000e0a:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <Inicio+0x11c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000036c 	.word	0x2000036c
 8000e18:	20000098 	.word	0x20000098
 8000e1c:	200003ec 	.word	0x200003ec
 8000e20:	200000e0 	.word	0x200000e0
 8000e24:	20000294 	.word	0x20000294
 8000e28:	20000488 	.word	0x20000488
 8000e2c:	20000470 	.word	0x20000470
 8000e30:	20000474 	.word	0x20000474
 8000e34:	20000480 	.word	0x20000480
 8000e38:	2000047c 	.word	0x2000047c
 8000e3c:	20000508 	.word	0x20000508
 8000e40:	20000510 	.word	0x20000510
 8000e44:	20000512 	.word	0x20000512
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	20000514 	.word	0x20000514
 8000e50:	20000516 	.word	0x20000516
 8000e54:	20000518 	.word	0x20000518

08000e58 <Inicio_Motores>:

void Inicio_Motores(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e62:	480b      	ldr	r0, [pc, #44]	@ (8000e90 <Inicio_Motores+0x38>)
 8000e64:	f002 fc00 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e6e:	4808      	ldr	r0, [pc, #32]	@ (8000e90 <Inicio_Motores+0x38>)
 8000e70:	f002 fbfa 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <Inicio_Motores+0x38>)
 8000e7c:	f002 fbf4 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e86:	4802      	ldr	r0, [pc, #8]	@ (8000e90 <Inicio_Motores+0x38>)
 8000e88:	f002 fbee 	bl	8003668 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40020400 	.word	0x40020400

08000e94 <setVelocidadIzquierda>:
/**
 * @brief Establece la velocidad del motor izquierdo (PC8 - TIM3_CH3)
 * @param duty Duty cycle (0 a 100%)
 */

void setVelocidadIzquierda(int duty) {
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	if (duty > 100)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b64      	cmp	r3, #100	@ 0x64
 8000ea0:	dd01      	ble.n	8000ea6 <setVelocidadIzquierda+0x12>
		duty = 100;
 8000ea2:	2364      	movs	r3, #100	@ 0x64
 8000ea4:	607b      	str	r3, [r7, #4]

	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3) + 1;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <setVelocidadIzquierda+0x44>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eac:	3301      	adds	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
	uint32_t pulse = (duty * arr) / 100;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	fb02 f303 	mul.w	r3, r2, r3
 8000eb8:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <setVelocidadIzquierda+0x48>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse); // Motor izquierdo
 8000ec2:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <setVelocidadIzquierda+0x44>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000294 	.word	0x20000294
 8000edc:	51eb851f 	.word	0x51eb851f

08000ee0 <setVelocidadDerecha>:
/**
 * @brief Establece la velocidad del motor derecho (PC9 - TIM3_CH4)
 * @param duty Duty cycle (0 a 100%)
 */

void setVelocidadDerecha(int duty) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	if (duty > 100)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b64      	cmp	r3, #100	@ 0x64
 8000eec:	dd01      	ble.n	8000ef2 <setVelocidadDerecha+0x12>
		duty = 100;
 8000eee:	2364      	movs	r3, #100	@ 0x64
 8000ef0:	607b      	str	r3, [r7, #4]

	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3) + 1;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <setVelocidadDerecha+0x44>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
	uint32_t pulse = (duty * arr) / 100;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	fb02 f303 	mul.w	r3, r2, r3
 8000f04:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <setVelocidadDerecha+0x48>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pulse); // Motor derecho
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <setVelocidadDerecha+0x44>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000294 	.word	0x20000294
 8000f28:	51eb851f 	.word	0x51eb851f

08000f2c <Sensor_Linea>:

int Sensor_Linea(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin)
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <Sensor_Linea+0x1c>)
 8000f34:	f002 fb80 	bl	8003638 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
			== GPIO_PIN_SET) ? 1 : 0;
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2301      	moveq	r3, #1
 8000f40:	2300      	movne	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40020800 	.word	0x40020800

08000f4c <antirebote>:

bool antirebote(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	int es_linea = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]

	HAL_Delay(5); //5ms de delay
 8000f56:	2005      	movs	r0, #5
 8000f58:	f001 f898 	bl	800208c <HAL_Delay>
	if (Sensor_Linea() == 1)
 8000f5c:	f7ff ffe6 	bl	8000f2c <Sensor_Linea>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <antirebote+0x1e>
		return false;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e030      	b.n	8000fcc <antirebote+0x80>
	HAL_Delay(5); //5ms de delay
 8000f6a:	2005      	movs	r0, #5
 8000f6c:	f001 f88e 	bl	800208c <HAL_Delay>
	if (Sensor_Linea() == 1)
 8000f70:	f7ff ffdc 	bl	8000f2c <Sensor_Linea>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d101      	bne.n	8000f7e <antirebote+0x32>
		return false;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e026      	b.n	8000fcc <antirebote+0x80>
	HAL_Delay(5); //5ms de delay
 8000f7e:	2005      	movs	r0, #5
 8000f80:	f001 f884 	bl	800208c <HAL_Delay>
	if (Sensor_Linea() == 1)
 8000f84:	f7ff ffd2 	bl	8000f2c <Sensor_Linea>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <antirebote+0x46>
		return false;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e01c      	b.n	8000fcc <antirebote+0x80>
	es_linea = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]

	while (es_linea == 1) {
 8000f96:	e015      	b.n	8000fc4 <antirebote+0x78>
		while (Sensor_Linea() == 0)
			Avanzar();
 8000f98:	f000 f8a8 	bl	80010ec <Avanzar>
		while (Sensor_Linea() == 0)
 8000f9c:	f7ff ffc6 	bl	8000f2c <Sensor_Linea>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f8      	beq.n	8000f98 <antirebote+0x4c>

		if (Sensor_Linea() == 1)
 8000fa6:	f7ff ffc1 	bl	8000f2c <Sensor_Linea>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d102      	bne.n	8000fb6 <antirebote+0x6a>
			HAL_Delay(5); //5ms de delay
 8000fb0:	2005      	movs	r0, #5
 8000fb2:	f001 f86b 	bl	800208c <HAL_Delay>
		if (Sensor_Linea() == 1)
 8000fb6:	f7ff ffb9 	bl	8000f2c <Sensor_Linea>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <antirebote+0x78>
			return true;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e003      	b.n	8000fcc <antirebote+0x80>
	while (es_linea == 1) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d0e8      	beq.n	8000f9c <antirebote+0x50>
	}
	return false; //no deberia pasar nunca, en caso de falla
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <Centrado>:

void Centrado(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

	if ((sensor_der_avg < UMBRAL_DERECHO)
 8000fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80010d8 <Centrado+0x104>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b3f      	ldr	r3, [pc, #252]	@ (80010dc <Centrado+0x108>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d226      	bcs.n	8001036 <Centrado+0x62>
			&& (sensor_izq_avg > UMBRAL_IZQUIERDO)) {
 8000fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80010e0 <Centrado+0x10c>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b3d      	ldr	r3, [pc, #244]	@ (80010e4 <Centrado+0x110>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d91e      	bls.n	8001036 <Centrado+0x62>
		EncenderLed(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f000 fc2d 	bl	8001858 <EncenderLed>
		ApagarLed(2);
 8000ffe:	2002      	movs	r0, #2
 8001000:	f000 fc58 	bl	80018b4 <ApagarLed>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800100a:	4837      	ldr	r0, [pc, #220]	@ (80010e8 <Centrado+0x114>)
 800100c:	f002 fb2c 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001016:	4834      	ldr	r0, [pc, #208]	@ (80010e8 <Centrado+0x114>)
 8001018:	f002 fb26 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001022:	4831      	ldr	r0, [pc, #196]	@ (80010e8 <Centrado+0x114>)
 8001024:	f002 fb20 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800102e:	482e      	ldr	r0, [pc, #184]	@ (80010e8 <Centrado+0x114>)
 8001030:	f002 fb1a 	bl	8003668 <HAL_GPIO_WritePin>
 8001034:	e04d      	b.n	80010d2 <Centrado+0xfe>
	} else if ((sensor_der_avg > UMBRAL_DERECHO)
 8001036:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <Centrado+0x104>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <Centrado+0x108>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	429a      	cmp	r2, r3
 8001044:	d926      	bls.n	8001094 <Centrado+0xc0>
			&& (sensor_izq_avg < UMBRAL_IZQUIERDO)) {
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <Centrado+0x10c>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <Centrado+0x110>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	b29b      	uxth	r3, r3
 8001052:	429a      	cmp	r2, r3
 8001054:	d21e      	bcs.n	8001094 <Centrado+0xc0>
		EncenderLed(2);
 8001056:	2002      	movs	r0, #2
 8001058:	f000 fbfe 	bl	8001858 <EncenderLed>
		ApagarLed(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f000 fc29 	bl	80018b4 <ApagarLed>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001068:	481f      	ldr	r0, [pc, #124]	@ (80010e8 <Centrado+0x114>)
 800106a:	f002 fafd 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001074:	481c      	ldr	r0, [pc, #112]	@ (80010e8 <Centrado+0x114>)
 8001076:	f002 faf7 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);   // MD0
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001080:	4819      	ldr	r0, [pc, #100]	@ (80010e8 <Centrado+0x114>)
 8001082:	f002 faf1 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800108c:	4816      	ldr	r0, [pc, #88]	@ (80010e8 <Centrado+0x114>)
 800108e:	f002 faeb 	bl	8003668 <HAL_GPIO_WritePin>
 8001092:	e01e      	b.n	80010d2 <Centrado+0xfe>

	} else {
		ApagarLed(2);
 8001094:	2002      	movs	r0, #2
 8001096:	f000 fc0d 	bl	80018b4 <ApagarLed>
		ApagarLed(1);
 800109a:	2001      	movs	r0, #1
 800109c:	f000 fc0a 	bl	80018b4 <ApagarLed>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010a6:	4810      	ldr	r0, [pc, #64]	@ (80010e8 <Centrado+0x114>)
 80010a8:	f002 fade 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <Centrado+0x114>)
 80010b4:	f002 fad8 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010be:	480a      	ldr	r0, [pc, #40]	@ (80010e8 <Centrado+0x114>)
 80010c0:	f002 fad2 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010ca:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <Centrado+0x114>)
 80010cc:	f002 facc 	bl	8003668 <HAL_GPIO_WritePin>
	}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000046c 	.word	0x2000046c
 80010dc:	20000510 	.word	0x20000510
 80010e0:	2000046e 	.word	0x2000046e
 80010e4:	20000512 	.word	0x20000512
 80010e8:	40020400 	.word	0x40020400

080010ec <Avanzar>:
	GirarDer();
	HAL_Delay(150);
	}
}

void Avanzar(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010f6:	480b      	ldr	r0, [pc, #44]	@ (8001124 <Avanzar+0x38>)
 80010f8:	f002 fab6 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001102:	4808      	ldr	r0, [pc, #32]	@ (8001124 <Avanzar+0x38>)
 8001104:	f002 fab0 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <Avanzar+0x38>)
 8001110:	f002 faaa 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800111a:	4802      	ldr	r0, [pc, #8]	@ (8001124 <Avanzar+0x38>)
 800111c:	f002 faa4 	bl	8003668 <HAL_GPIO_WritePin>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020400 	.word	0x40020400

08001128 <Frenar>:

void Frenar(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001132:	480b      	ldr	r0, [pc, #44]	@ (8001160 <Frenar+0x38>)
 8001134:	f002 fa98 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800113e:	4808      	ldr	r0, [pc, #32]	@ (8001160 <Frenar+0x38>)
 8001140:	f002 fa92 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);   // MD0
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <Frenar+0x38>)
 800114c:	f002 fa8c 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001156:	4802      	ldr	r0, [pc, #8]	@ (8001160 <Frenar+0x38>)
 8001158:	f002 fa86 	bl	8003668 <HAL_GPIO_WritePin>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020400 	.word	0x40020400

08001164 <Girar>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // MI1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // MD0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // MD1
}

uint16_t Girar(dir_giro giro) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	uint16_t duracion_ms = 525;
 800116e:	f240 230d 	movw	r3, #525	@ 0x20d
 8001172:	81fb      	strh	r3, [r7, #14]

	if ((giro) == (dir_giro) (izq)) {
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d118      	bne.n	80011ac <Girar+0x48>
		// Girar a la izquierda
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001180:	4838      	ldr	r0, [pc, #224]	@ (8001264 <Girar+0x100>)
 8001182:	f002 fa71 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // MI1
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118c:	4835      	ldr	r0, [pc, #212]	@ (8001264 <Girar+0x100>)
 800118e:	f002 fa6b 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001198:	4832      	ldr	r0, [pc, #200]	@ (8001264 <Girar+0x100>)
 800119a:	f002 fa65 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011a4:	482f      	ldr	r0, [pc, #188]	@ (8001264 <Girar+0x100>)
 80011a6:	f002 fa5f 	bl	8003668 <HAL_GPIO_WritePin>
 80011aa:	e039      	b.n	8001220 <Girar+0xbc>

		//duracion_ms = 700;

	} else if ((giro) == (dir_giro) (der)) {
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d118      	bne.n	80011e4 <Girar+0x80>
		// Girar a la derecha
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   // MI0
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011b8:	482a      	ldr	r0, [pc, #168]	@ (8001264 <Girar+0x100>)
 80011ba:	f002 fa55 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // MI1
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c4:	4827      	ldr	r0, [pc, #156]	@ (8001264 <Girar+0x100>)
 80011c6:	f002 fa4f 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // MD0
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011d0:	4824      	ldr	r0, [pc, #144]	@ (8001264 <Girar+0x100>)
 80011d2:	f002 fa49 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // MD1
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011dc:	4821      	ldr	r0, [pc, #132]	@ (8001264 <Girar+0x100>)
 80011de:	f002 fa43 	bl	8003668 <HAL_GPIO_WritePin>
 80011e2:	e01d      	b.n	8001220 <Girar+0xbc>

		//duracion_ms = 700;

	} else if ((giro) == (dir_giro) (atras)) {
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d118      	bne.n	800121c <Girar+0xb8>
		// Girar 180°
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011f0:	481c      	ldr	r0, [pc, #112]	@ (8001264 <Girar+0x100>)
 80011f2:	f002 fa39 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // MI1
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011fc:	4819      	ldr	r0, [pc, #100]	@ (8001264 <Girar+0x100>)
 80011fe:	f002 fa33 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001208:	4816      	ldr	r0, [pc, #88]	@ (8001264 <Girar+0x100>)
 800120a:	f002 fa2d 	bl	8003668 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001214:	4813      	ldr	r0, [pc, #76]	@ (8001264 <Girar+0x100>)
 8001216:	f002 fa27 	bl	8003668 <HAL_GPIO_WritePin>
 800121a:	e001      	b.n	8001220 <Girar+0xbc>
		//duracion_ms = 800;

	} else {
		return 1; // Comando inválido
 800121c:	2301      	movs	r3, #1
 800121e:	e01c      	b.n	800125a <Girar+0xf6>
	}

	HAL_Delay(duracion_ms); // Espera el tiempo necesario
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 ff32 	bl	800208c <HAL_Delay>

	// Desactiva todos los pines (frena)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800122e:	480d      	ldr	r0, [pc, #52]	@ (8001264 <Girar+0x100>)
 8001230:	f002 fa1a 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // MI1
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800123a:	480a      	ldr	r0, [pc, #40]	@ (8001264 <Girar+0x100>)
 800123c:	f002 fa14 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // MD0
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001246:	4807      	ldr	r0, [pc, #28]	@ (8001264 <Girar+0x100>)
 8001248:	f002 fa0e 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001252:	4804      	ldr	r0, [pc, #16]	@ (8001264 <Girar+0x100>)
 8001254:	f002 fa08 	bl	8003668 <HAL_GPIO_WritePin>

	return 0; // Éxito
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <calcular_orientacion>:

void calcular_orientacion(dir_giro girohecho) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]

	if (girohecho == izq)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10c      	bne.n	8001292 <calcular_orientacion+0x2a>
		orientacion = (orientacion + 3) % 4;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <calcular_orientacion+0x74>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3303      	adds	r3, #3
 800127e:	425a      	negs	r2, r3
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	bf58      	it	pl
 800128a:	4253      	negpl	r3, r2
 800128c:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <calcular_orientacion+0x74>)
 800128e:	6013      	str	r3, [r2, #0]
		orientacion = (orientacion + 1) % 4;
	else if (girohecho == atras) {
		orientacion = (orientacion + 2) % 4;

	}
}
 8001290:	e01e      	b.n	80012d0 <calcular_orientacion+0x68>
	else if (girohecho == der)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d10c      	bne.n	80012b2 <calcular_orientacion+0x4a>
		orientacion = (orientacion + 1) % 4;
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <calcular_orientacion+0x74>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	425a      	negs	r2, r3
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	f002 0203 	and.w	r2, r2, #3
 80012a8:	bf58      	it	pl
 80012aa:	4253      	negpl	r3, r2
 80012ac:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <calcular_orientacion+0x74>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	e00e      	b.n	80012d0 <calcular_orientacion+0x68>
	else if (girohecho == atras) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d10b      	bne.n	80012d0 <calcular_orientacion+0x68>
		orientacion = (orientacion + 2) % 4;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <calcular_orientacion+0x74>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3302      	adds	r3, #2
 80012be:	425a      	negs	r2, r3
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	f002 0203 	and.w	r2, r2, #3
 80012c8:	bf58      	it	pl
 80012ca:	4253      	negpl	r3, r2
 80012cc:	4a03      	ldr	r2, [pc, #12]	@ (80012dc <calcular_orientacion+0x74>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000480 	.word	0x20000480

080012e0 <posicion>:

void posicion(void) { //norte=0, este=1, sur=2, oeste=
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

	if (orientacion == 0 && pos > 3)
 80012e4:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <posicion+0x90>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d109      	bne.n	8001300 <posicion+0x20>
 80012ec:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <posicion+0x94>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	dd05      	ble.n	8001300 <posicion+0x20>
		pos = (pos - 4);
 80012f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <posicion+0x94>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3b04      	subs	r3, #4
 80012fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001374 <posicion+0x94>)
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e032      	b.n	8001366 <posicion+0x86>
	else if (orientacion == 1 && (pos % 4 != 3))
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <posicion+0x90>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d110      	bne.n	800132a <posicion+0x4a>
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <posicion+0x94>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	425a      	negs	r2, r3
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	bf58      	it	pl
 8001318:	4253      	negpl	r3, r2
 800131a:	2b03      	cmp	r3, #3
 800131c:	d005      	beq.n	800132a <posicion+0x4a>
		pos = (pos + 1);
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <posicion+0x94>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a13      	ldr	r2, [pc, #76]	@ (8001374 <posicion+0x94>)
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e01d      	b.n	8001366 <posicion+0x86>
	else if (orientacion == 2 && pos < 12)
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <posicion+0x90>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d109      	bne.n	8001346 <posicion+0x66>
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <posicion+0x94>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b0b      	cmp	r3, #11
 8001338:	dc05      	bgt.n	8001346 <posicion+0x66>
		pos = (pos + 4);
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <posicion+0x94>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3304      	adds	r3, #4
 8001340:	4a0c      	ldr	r2, [pc, #48]	@ (8001374 <posicion+0x94>)
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e00f      	b.n	8001366 <posicion+0x86>
	else if (orientacion == 3 && (pos % 4 != 0))
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <posicion+0x90>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d10b      	bne.n	8001366 <posicion+0x86>
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <posicion+0x94>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <posicion+0x86>
		pos = (pos - 1);
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <posicion+0x94>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3b01      	subs	r3, #1
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <posicion+0x94>)
 8001362:	6013      	str	r3, [r2, #0]
//	sprintf(mensaje, "%d", pos); //Convierte la variable numérica contador en un string
//	Transmision(); //Ejecuta la función de transmisión    //volado
}
 8001364:	e7ff      	b.n	8001366 <posicion+0x86>
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	20000480 	.word	0x20000480
 8001374:	2000047c 	.word	0x2000047c

08001378 <InicializarMapa>:

	if (orientacion == 1 && (pos % 4 != 3))
		mapa[pos + 1].pared[orientacion + 2] = true;
}

void InicializarMapa(celda *mapa) {
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

	for (int x = 0; x < 16; x++) {
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e047      	b.n	8001416 <InicializarMapa+0x9e>

		mapa[x].peso = 15;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	220f      	movs	r2, #15
 8001390:	601a      	str	r2, [r3, #0]
		for (int d = 0; d < 4; d++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	e038      	b.n	800140a <InicializarMapa+0x92>
			mapa[x].pared[d] = false;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	441a      	add	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4413      	add	r3, r2
 80013a4:	3304      	adds	r3, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

			if (x < 4)                          // estoy en borde superior
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	dc05      	bgt.n	80013bc <InicializarMapa+0x44>
				mapa[x].pared[0] = true;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	2201      	movs	r2, #1
 80013ba:	711a      	strb	r2, [r3, #4]
			if (x > 11)                         // estoy en borde inferior
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b0b      	cmp	r3, #11
 80013c0:	dd05      	ble.n	80013ce <InicializarMapa+0x56>
				mapa[x].pared[2] = true;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	2201      	movs	r2, #1
 80013cc:	719a      	strb	r2, [r3, #6]
			if (x % 4 == 3)                  // estoy en borde derecho
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	425a      	negs	r2, r3
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	f002 0203 	and.w	r2, r2, #3
 80013da:	bf58      	it	pl
 80013dc:	4253      	negpl	r3, r2
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d105      	bne.n	80013ee <InicializarMapa+0x76>
				mapa[x].pared[1] = true;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	2201      	movs	r2, #1
 80013ec:	715a      	strb	r2, [r3, #5]
			if (x % 4 == 0)                  // estoy en borde izquierdo
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <InicializarMapa+0x8c>
				mapa[x].pared[3] = true;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	2201      	movs	r2, #1
 8001402:	71da      	strb	r2, [r3, #7]
		for (int d = 0; d < 4; d++) {
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	3301      	adds	r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2b03      	cmp	r3, #3
 800140e:	ddc3      	ble.n	8001398 <InicializarMapa+0x20>
	for (int x = 0; x < 16; x++) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3301      	adds	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	ddb4      	ble.n	8001386 <InicializarMapa+0xe>
		}

	}
	mapa[0].peso = 0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <ActualizarPesos>:

void ActualizarPesos(celda *mapa) {
 8001430:	b490      	push	{r4, r7}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	int peso_min_vecino = INF;
 8001438:	2311      	movs	r3, #17
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
	int offset[4] = { -4, 1, +4, -1 }; // norte=0 offset con el vecino -4, este=0 offset con el vecino +1
 800143c:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <ActualizarPesos+0xac>)
 800143e:	f107 040c 	add.w	r4, r7, #12
 8001442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int i = 1; i < 16; i++) {           //elijo casilla
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	e03d      	b.n	80014ca <ActualizarPesos+0x9a>
		for (int j = 0; j < 4; j++) {          //elijo dir
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e02b      	b.n	80014ac <ActualizarPesos+0x7c>
			if (!mapa[i].pared[j] && peso_min_vecino > mapa[i + offset[j]].peso) { // si no hay pared en esa dir y peso en esa dir es menor que el minimo actual de los vecinos
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	441a      	add	r2, r3
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	4413      	add	r3, r2
 8001460:	3304      	adds	r3, #4
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f083 0301 	eor.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01b      	beq.n	80014a6 <ActualizarPesos+0x76>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	3328      	adds	r3, #40	@ 0x28
 8001474:	443b      	add	r3, r7
 8001476:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001488:	429a      	cmp	r2, r3
 800148a:	dd0c      	ble.n	80014a6 <ActualizarPesos+0x76>
				peso_min_vecino = mapa[i + offset[j]].peso;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	3328      	adds	r3, #40	@ 0x28
 8001492:	443b      	add	r3, r7
 8001494:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < 4; j++) {          //elijo dir
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	ddd0      	ble.n	8001454 <ActualizarPesos+0x24>
			}

		}
		mapa[i].peso = peso_min_vecino + 1;
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014bc:	3201      	adds	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
		peso_min_vecino = INF;
 80014c0:	2311      	movs	r3, #17
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 1; i < 16; i++) {           //elijo casilla
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	3301      	adds	r3, #1
 80014c8:	623b      	str	r3, [r7, #32]
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	ddbe      	ble.n	800144e <ActualizarPesos+0x1e>
	}
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	@ 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc90      	pop	{r4, r7}
 80014da:	4770      	bx	lr
 80014dc:	0800be34 	.word	0x0800be34

080014e0 <PrioridadDeGiro>:
		ActualizarPesos(mapa);
		i++;
	}
}

dir_giro PrioridadDeGiro(int dir_min1) {
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	dir_giro aux;//inicializo auxiliar
	if (orientacion == 0 && dir_min == 3)
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <PrioridadDeGiro+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d106      	bne.n	80014fe <PrioridadDeGiro+0x1e>
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <PrioridadDeGiro+0x68>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d102      	bne.n	80014fe <PrioridadDeGiro+0x1e>
		aux = izq;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e01b      	b.n	8001536 <PrioridadDeGiro+0x56>
	else if (orientacion == 3 && dir_min == 0)
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <PrioridadDeGiro+0x64>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d106      	bne.n	8001514 <PrioridadDeGiro+0x34>
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <PrioridadDeGiro+0x68>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <PrioridadDeGiro+0x34>
		aux = der;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e010      	b.n	8001536 <PrioridadDeGiro+0x56>
	else if (orientacion < dir_min)
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <PrioridadDeGiro+0x64>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <PrioridadDeGiro+0x68>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	da02      	bge.n	8001526 <PrioridadDeGiro+0x46>
		aux = der;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e007      	b.n	8001536 <PrioridadDeGiro+0x56>
	else if (orientacion > dir_min)
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <PrioridadDeGiro+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <PrioridadDeGiro+0x68>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	dd01      	ble.n	8001536 <PrioridadDeGiro+0x56>
		aux = izq;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
	return aux;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	20000480 	.word	0x20000480
 8001548:	20000508 	.word	0x20000508

0800154c <Calibrar_Sensores>:


void Calibrar_Sensores(void){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	                                      //caca

while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001550:	e00b      	b.n	800156a <Calibrar_Sensores+0x1e>
	EncenderLed(2);
 8001552:	2002      	movs	r0, #2
 8001554:	f000 f980 	bl	8001858 <EncenderLed>
HAL_Delay(100);
 8001558:	2064      	movs	r0, #100	@ 0x64
 800155a:	f000 fd97 	bl	800208c <HAL_Delay>
ApagarLed(2);
 800155e:	2002      	movs	r0, #2
 8001560:	f000 f9a8 	bl	80018b4 <ApagarLed>
HAL_Delay(100);
 8001564:	2064      	movs	r0, #100	@ 0x64
 8001566:	f000 fd91 	bl	800208c <HAL_Delay>
while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 800156a:	2101      	movs	r1, #1
 800156c:	4816      	ldr	r0, [pc, #88]	@ (80015c8 <Calibrar_Sensores+0x7c>)
 800156e:	f002 f863 	bl	8003638 <HAL_GPIO_ReadPin>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ec      	beq.n	8001552 <Calibrar_Sensores+0x6>
}


UMBRAL_DERECHO=sensor_der_avg;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <Calibrar_Sensores+0x80>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <Calibrar_Sensores+0x84>)
 8001580:	801a      	strh	r2, [r3, #0]
HAL_Delay(3000);
 8001582:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001586:	f000 fd81 	bl	800208c <HAL_Delay>


while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 800158a:	e00b      	b.n	80015a4 <Calibrar_Sensores+0x58>
	EncenderLed(2);
 800158c:	2002      	movs	r0, #2
 800158e:	f000 f963 	bl	8001858 <EncenderLed>
HAL_Delay(100);
 8001592:	2064      	movs	r0, #100	@ 0x64
 8001594:	f000 fd7a 	bl	800208c <HAL_Delay>
ApagarLed(2);
 8001598:	2002      	movs	r0, #2
 800159a:	f000 f98b 	bl	80018b4 <ApagarLed>
HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	@ 0x64
 80015a0:	f000 fd74 	bl	800208c <HAL_Delay>
while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80015a4:	2101      	movs	r1, #1
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <Calibrar_Sensores+0x7c>)
 80015a8:	f002 f846 	bl	8003638 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0ec      	beq.n	800158c <Calibrar_Sensores+0x40>
}

UMBRAL_IZQUIERDO=sensor_izq_avg;
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <Calibrar_Sensores+0x88>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <Calibrar_Sensores+0x8c>)
 80015ba:	801a      	strh	r2, [r3, #0]

HAL_Delay(2000);
 80015bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015c0:	f000 fd64 	bl	800208c <HAL_Delay>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020000 	.word	0x40020000
 80015cc:	2000046c 	.word	0x2000046c
 80015d0:	20000510 	.word	0x20000510
 80015d4:	2000046e 	.word	0x2000046e
 80015d8:	20000512 	.word	0x20000512

080015dc <DirMin>:



int DirMin(celda *mapa) {
 80015dc:	b480      	push	{r7}
 80015de:	b08b      	sub	sp, #44	@ 0x2c
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	int minimo = 0;   //orientacion final
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
	int pesos[4];   //orden intermedio antes de fijar muros
	int i;   //variable auxiliar

	////sujeto a variar con eleccion
	pesos[0] = mapa[pos - 4].peso;   //inicializo variable peso norte
 80015e8:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <DirMin+0xc8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80015f0:	3b04      	subs	r3, #4
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60fb      	str	r3, [r7, #12]
	pesos[1] = mapa[pos + 1].peso;   //inicializo variable peso este
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <DirMin+0xc8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	613b      	str	r3, [r7, #16]
	pesos[2] = mapa[pos + 4].peso;   //inicializo variable peso sur
 800160c:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <DirMin+0xc8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3304      	adds	r3, #4
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	617b      	str	r3, [r7, #20]
	pesos[3] = mapa[pos - 1].peso;   //inicializo variable peso oeste
 800161c:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <DirMin+0xc8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001624:	3b01      	subs	r3, #1
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i <= 3; i++)   //miro paredes
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
 8001634:	e014      	b.n	8001660 <DirMin+0x84>
		if (mapa[pos].pared[i])
 8001636:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <DirMin+0xc8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	441a      	add	r2, r3
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	4413      	add	r3, r2
 8001644:	3304      	adds	r3, #4
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <DirMin+0x7e>
			pesos[i] = 15;
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	3328      	adds	r3, #40	@ 0x28
 8001652:	443b      	add	r3, r7
 8001654:	220f      	movs	r2, #15
 8001656:	f843 2c1c 	str.w	r2, [r3, #-28]
	for (i = 0; i <= 3; i++)   //miro paredes
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	3301      	adds	r3, #1
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	2b03      	cmp	r3, #3
 8001664:	dde7      	ble.n	8001636 <DirMin+0x5a>
	//////////////////
	int pesominimo = pesos[0];
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 3; i++) //para buscar el peso minimo (se puede invertir la prioridad de NESO a OSEN con cambiar de > a >=)
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
 800166e:	e00f      	b.n	8001690 <DirMin+0xb4>
		if (pesominimo > pesos[i + 1])
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3301      	adds	r3, #1
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	3328      	adds	r3, #40	@ 0x28
 8001678:	443b      	add	r3, r7
 800167a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	429a      	cmp	r2, r3
 8001682:	dd02      	ble.n	800168a <DirMin+0xae>
			minimo = i + 1;
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	3301      	adds	r3, #1
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0; i < 3; i++) //para buscar el peso minimo (se puede invertir la prioridad de NESO a OSEN con cambiar de > a >=)
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	3301      	adds	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	2b02      	cmp	r3, #2
 8001694:	ddec      	ble.n	8001670 <DirMin+0x94>

	return minimo;
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001698:	4618      	mov	r0, r3
 800169a:	372c      	adds	r7, #44	@ 0x2c
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	2000047c 	.word	0x2000047c

080016a8 <HAL_GPIO_EXTI_Callback>:

// rutina de atencion de interrupciones

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
	ENTRE_INT=1;
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <HAL_GPIO_EXTI_Callback+0x28>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]




 if (GPIO_Pin == GPIO_PIN_7) {
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	2b80      	cmp	r3, #128	@ 0x80
 80016bc:	d102      	bne.n	80016c4 <HAL_GPIO_EXTI_Callback+0x1c>

		linea = 1;
 80016be:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

}
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	20000478 	.word	0x20000478
 80016d4:	20000470 	.word	0x20000470

080016d8 <HAL_ADC_ConvHalfCpltCallback>:

// Rutina de antención a la interrupción de buffer a mitad
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	if (hadc->Instance == ADC1) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a09      	ldr	r2, [pc, #36]	@ (800170c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d103      	bne.n	80016f2 <HAL_ADC_ConvHalfCpltCallback+0x1a>
		Promediar1(&dma_buffer1[0]);
 80016ea:	4809      	ldr	r0, [pc, #36]	@ (8001710 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80016ec:	f000 f838 	bl	8001760 <Promediar1>
	} else if (hadc->Instance == ADC2) {
		Promediar2(&dma_buffer2[0]);
	}
}
 80016f0:	e007      	b.n	8001702 <HAL_ADC_ConvHalfCpltCallback+0x2a>
	} else if (hadc->Instance == ADC2) {
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d102      	bne.n	8001702 <HAL_ADC_ConvHalfCpltCallback+0x2a>
		Promediar2(&dma_buffer2[0]);
 80016fc:	4806      	ldr	r0, [pc, #24]	@ (8001718 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 80016fe:	f000 f855 	bl	80017ac <Promediar2>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40012000 	.word	0x40012000
 8001710:	2000036c 	.word	0x2000036c
 8001714:	40012100 	.word	0x40012100
 8001718:	200003ec 	.word	0x200003ec

0800171c <HAL_ADC_ConvCpltCallback>:
// Rutina de antención a la interrupción de buffer a tope
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	if (hadc->Instance == ADC1) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <HAL_ADC_ConvCpltCallback+0x34>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d103      	bne.n	8001736 <HAL_ADC_ConvCpltCallback+0x1a>
		Promediar1(&dma_buffer1[BUFFER_MINIMO]);
 800172e:	4809      	ldr	r0, [pc, #36]	@ (8001754 <HAL_ADC_ConvCpltCallback+0x38>)
 8001730:	f000 f816 	bl	8001760 <Promediar1>
	} else if (hadc->Instance == ADC2) {
		Promediar2(&dma_buffer2[BUFFER_MINIMO]);
	}
}
 8001734:	e007      	b.n	8001746 <HAL_ADC_ConvCpltCallback+0x2a>
	} else if (hadc->Instance == ADC2) {
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x3c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d102      	bne.n	8001746 <HAL_ADC_ConvCpltCallback+0x2a>
		Promediar2(&dma_buffer2[BUFFER_MINIMO]);
 8001740:	4806      	ldr	r0, [pc, #24]	@ (800175c <HAL_ADC_ConvCpltCallback+0x40>)
 8001742:	f000 f833 	bl	80017ac <Promediar2>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40012000 	.word	0x40012000
 8001754:	200003ac 	.word	0x200003ac
 8001758:	40012100 	.word	0x40012100
 800175c:	2000042c 	.word	0x2000042c

08001760 <Promediar1>:

// Calcula los promedios de ADC1
void Promediar1(uint16_t *buffer) {
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
// Inicializamos variables para acumular la suma de las muestras
	uint32_t sum = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
// Ralizamos la suma incrementando el puntero a las muestras
	for (int i = 0; i < MUESTRAS; ++i) {
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	e00b      	b.n	800178a <Promediar1+0x2a>
		sum += buffer[0];
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
		buffer += 1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3302      	adds	r3, #2
 8001782:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MUESTRAS; ++i) {
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	3301      	adds	r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	ddf0      	ble.n	8001772 <Promediar1+0x12>
	}
// Dividimos las sumas para obtener el promedio
#if SEL_AUTITO == 1
	sensor_der_avg = sum / MUESTRAS;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <Promediar1+0x48>)
 8001798:	801a      	strh	r2, [r3, #0]
#else
		sensor_izq_avg = sum / MUESTRAS;
	#endif
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2000046c 	.word	0x2000046c

080017ac <Promediar2>:

// Calcula los promedios de ADC2
void Promediar2(uint16_t *buffer) {
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
// Inicializamos variables para acumular la suma de las muestras
	uint32_t sum = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
// Ralizamos la suma incrementando el puntero a las muestras
	for (int i = 0; i < MUESTRAS; ++i) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	e00b      	b.n	80017d6 <Promediar2+0x2a>
		sum += buffer[0];
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
		buffer += 1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3302      	adds	r3, #2
 80017ce:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MUESTRAS; ++i) {
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	ddf0      	ble.n	80017be <Promediar2+0x12>
// Dividimos las sumas para obtener el promedio

#if SEL_AUTITO == 0
	sensor_izq_avg = sum / MUESTRAS;
#else
		sensor_der_avg = sum / MUESTRAS;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <Promediar2+0x48>)
 80017e4:	801a      	strh	r2, [r3, #0]
	#endif
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2000046c 	.word	0x2000046c

080017f8 <EncenderTodos>:

void EncenderTodos(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001802:	4808      	ldr	r0, [pc, #32]	@ (8001824 <EncenderTodos+0x2c>)
 8001804:	f001 ff30 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <EncenderTodos+0x2c>)
 8001810:	f001 ff2a 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800181a:	4802      	ldr	r0, [pc, #8]	@ (8001824 <EncenderTodos+0x2c>)
 800181c:	f001 ff24 	bl	8003668 <HAL_GPIO_WritePin>
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40020c00 	.word	0x40020c00

08001828 <ApagarTodos>:

void ApagarTodos(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001832:	4808      	ldr	r0, [pc, #32]	@ (8001854 <ApagarTodos+0x2c>)
 8001834:	f001 ff18 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800183e:	4805      	ldr	r0, [pc, #20]	@ (8001854 <ApagarTodos+0x2c>)
 8001840:	f001 ff12 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800184a:	4802      	ldr	r0, [pc, #8]	@ (8001854 <ApagarTodos+0x2c>)
 800184c:	f001 ff0c 	bl	8003668 <HAL_GPIO_WritePin>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40020c00 	.word	0x40020c00

08001858 <EncenderLed>:

void EncenderLed(int numero) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	switch (numero) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d017      	beq.n	8001896 <EncenderLed+0x3e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b03      	cmp	r3, #3
 800186a:	dc1b      	bgt.n	80018a4 <EncenderLed+0x4c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d003      	beq.n	800187a <EncenderLed+0x22>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d007      	beq.n	8001888 <EncenderLed+0x30>
	case 3:
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
		break;
	default:
		// Número inválido
		break;
 8001878:	e014      	b.n	80018a4 <EncenderLed+0x4c>
		HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001880:	480b      	ldr	r0, [pc, #44]	@ (80018b0 <EncenderLed+0x58>)
 8001882:	f001 fef1 	bl	8003668 <HAL_GPIO_WritePin>
		break;
 8001886:	e00e      	b.n	80018a6 <EncenderLed+0x4e>
		HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800188e:	4808      	ldr	r0, [pc, #32]	@ (80018b0 <EncenderLed+0x58>)
 8001890:	f001 feea 	bl	8003668 <HAL_GPIO_WritePin>
		break;
 8001894:	e007      	b.n	80018a6 <EncenderLed+0x4e>
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800189c:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <EncenderLed+0x58>)
 800189e:	f001 fee3 	bl	8003668 <HAL_GPIO_WritePin>
		break;
 80018a2:	e000      	b.n	80018a6 <EncenderLed+0x4e>
		break;
 80018a4:	bf00      	nop
	}
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40020c00 	.word	0x40020c00

080018b4 <ApagarLed>:

void ApagarLed(int numero) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	switch (numero) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d017      	beq.n	80018f2 <ApagarLed+0x3e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	dc1b      	bgt.n	8001900 <ApagarLed+0x4c>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d003      	beq.n	80018d6 <ApagarLed+0x22>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d007      	beq.n	80018e4 <ApagarLed+0x30>
	case 3:
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
		break;
	default:
		// Número inválido
		break;
 80018d4:	e014      	b.n	8001900 <ApagarLed+0x4c>
		HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018dc:	480b      	ldr	r0, [pc, #44]	@ (800190c <ApagarLed+0x58>)
 80018de:	f001 fec3 	bl	8003668 <HAL_GPIO_WritePin>
		break;
 80018e2:	e00e      	b.n	8001902 <ApagarLed+0x4e>
		HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ea:	4808      	ldr	r0, [pc, #32]	@ (800190c <ApagarLed+0x58>)
 80018ec:	f001 febc 	bl	8003668 <HAL_GPIO_WritePin>
		break;
 80018f0:	e007      	b.n	8001902 <ApagarLed+0x4e>
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <ApagarLed+0x58>)
 80018fa:	f001 feb5 	bl	8003668 <HAL_GPIO_WritePin>
		break;
 80018fe:	e000      	b.n	8001902 <ApagarLed+0x4e>
		break;
 8001900:	bf00      	nop
	}
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020c00 	.word	0x40020c00

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <Error_Handler+0x8>

0800191c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	4a0f      	ldr	r2, [pc, #60]	@ (8001968 <HAL_MspInit+0x4c>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001930:	6453      	str	r3, [r2, #68]	@ 0x44
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <HAL_MspInit+0x4c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_MspInit+0x4c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800195a:	2007      	movs	r0, #7
 800195c:	f001 f88c 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a5e      	ldr	r2, [pc, #376]	@ (8001b04 <HAL_ADC_MspInit+0x198>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d158      	bne.n	8001a40 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	4b5d      	ldr	r3, [pc, #372]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	4a5c      	ldr	r2, [pc, #368]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199c:	6453      	str	r3, [r2, #68]	@ 0x44
 800199e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	4b56      	ldr	r3, [pc, #344]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a55      	ldr	r2, [pc, #340]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ca:	2303      	movs	r3, #3
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	484c      	ldr	r0, [pc, #304]	@ (8001b0c <HAL_ADC_MspInit+0x1a0>)
 80019da:	f001 fc91 	bl	8003300 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019de:	4b4c      	ldr	r3, [pc, #304]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001b14 <HAL_ADC_MspInit+0x1a8>)
 80019e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ea:	4b49      	ldr	r3, [pc, #292]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f0:	4b47      	ldr	r3, [pc, #284]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019f6:	4b46      	ldr	r3, [pc, #280]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019fe:	4b44      	ldr	r3, [pc, #272]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a06:	4b42      	ldr	r3, [pc, #264]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a0e:	4b40      	ldr	r3, [pc, #256]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a16:	4b3e      	ldr	r3, [pc, #248]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a22:	483b      	ldr	r0, [pc, #236]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a24:	f001 f86a 	bl	8002afc <HAL_DMA_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a2e:	f7ff ff6f 	bl	8001910 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a36      	ldr	r2, [pc, #216]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a36:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a38:	4a35      	ldr	r2, [pc, #212]	@ (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a3e:	e05d      	b.n	8001afc <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a34      	ldr	r2, [pc, #208]	@ (8001b18 <HAL_ADC_MspInit+0x1ac>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d158      	bne.n	8001afc <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	4a2d      	ldr	r2, [pc, #180]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 8001a54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a26      	ldr	r2, [pc, #152]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_ADC_MspInit+0x19c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a86:	2303      	movs	r3, #3
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	481d      	ldr	r0, [pc, #116]	@ (8001b0c <HAL_ADC_MspInit+0x1a0>)
 8001a96:	f001 fc33 	bl	8003300 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001a9a:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001a9c:	4a20      	ldr	r2, [pc, #128]	@ (8001b20 <HAL_ADC_MspInit+0x1b4>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001aa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aa6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aae:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aba:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001abc:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ac2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ac6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aca:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001acc:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ae0:	480e      	ldr	r0, [pc, #56]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ae2:	f001 f80b 	bl	8002afc <HAL_DMA_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8001aec:	f7ff ff10 	bl	8001910 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001af4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001af6:	4a09      	ldr	r2, [pc, #36]	@ (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001afc:	bf00      	nop
 8001afe:	3730      	adds	r7, #48	@ 0x30
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40012000 	.word	0x40012000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	20000128 	.word	0x20000128
 8001b14:	40026410 	.word	0x40026410
 8001b18:	40012100 	.word	0x40012100
 8001b1c:	20000188 	.word	0x20000188
 8001b20:	40026440 	.word	0x40026440

08001b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	@ (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12c      	bne.n	8001ba0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a17      	ldr	r2, [pc, #92]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001b62:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b74:	2304      	movs	r3, #4
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <HAL_I2C_MspInit+0x8c>)
 8001b80:	f001 fbbe 	bl	8003300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	@ (8001c38 <HAL_SPI_MspInit+0x84>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d12b      	bne.n	8001c2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <HAL_SPI_MspInit+0x88>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a17      	ldr	r2, [pc, #92]	@ (8001c3c <HAL_SPI_MspInit+0x88>)
 8001be0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_SPI_MspInit+0x88>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_SPI_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a10      	ldr	r2, [pc, #64]	@ (8001c3c <HAL_SPI_MspInit+0x88>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_SPI_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c0e:	23e0      	movs	r3, #224	@ 0xe0
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c1e:	2305      	movs	r3, #5
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <HAL_SPI_MspInit+0x8c>)
 8001c2a:	f001 fb69 	bl	8003300 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	@ 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40013000 	.word	0x40013000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000

08001c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x64>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d10e      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <HAL_TIM_Base_MspInit+0x68>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	4a13      	ldr	r2, [pc, #76]	@ (8001cac <HAL_TIM_Base_MspInit+0x68>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_TIM_Base_MspInit+0x68>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c72:	e012      	b.n	8001c9a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10d      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_TIM_Base_MspInit+0x68>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	4a09      	ldr	r2, [pc, #36]	@ (8001cac <HAL_TIM_Base_MspInit+0x68>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8e:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <HAL_TIM_Base_MspInit+0x68>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40002000 	.word	0x40002000

08001cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <HAL_TIM_MspPostInit+0x68>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d11e      	bne.n	8001d14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a10      	ldr	r2, [pc, #64]	@ (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <HAL_TIM_MspPostInit+0x70>)
 8001d10:	f001 faf6 	bl	8003300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020800 	.word	0x40020800

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2c      	ldr	r2, [pc, #176]	@ (8001df8 <HAL_UART_MspInit+0xd0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d152      	bne.n	8001df0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dfc <HAL_UART_MspInit+0xd4>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4a2a      	ldr	r2, [pc, #168]	@ (8001dfc <HAL_UART_MspInit+0xd4>)
 8001d54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5a:	4b28      	ldr	r3, [pc, #160]	@ (8001dfc <HAL_UART_MspInit+0xd4>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <HAL_UART_MspInit+0xd4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a23      	ldr	r2, [pc, #140]	@ (8001dfc <HAL_UART_MspInit+0xd4>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <HAL_UART_MspInit+0xd4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <HAL_UART_MspInit+0xd4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dfc <HAL_UART_MspInit+0xd4>)
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <HAL_UART_MspInit+0xd4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001db0:	2308      	movs	r3, #8
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	4811      	ldr	r0, [pc, #68]	@ (8001e00 <HAL_UART_MspInit+0xd8>)
 8001dbc:	f001 faa0 	bl	8003300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480a      	ldr	r0, [pc, #40]	@ (8001e04 <HAL_UART_MspInit+0xdc>)
 8001ddc:	f001 fa90 	bl	8003300 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2035      	movs	r0, #53	@ 0x35
 8001de6:	f000 fe52 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001dea:	2035      	movs	r0, #53	@ 0x35
 8001dec:	f000 fe6b 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	@ 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40005000 	.word	0x40005000
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <NMI_Handler+0x4>

08001e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <MemManage_Handler+0x4>

08001e20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <BusFault_Handler+0x4>

08001e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <UsageFault_Handler+0x4>

08001e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5e:	f000 f8f5 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor_linea_Pin);
 8001e6a:	2080      	movs	r0, #128	@ 0x80
 8001e6c:	f001 fc16 	bl	800369c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <UART5_IRQHandler+0x10>)
 8001e7a:	f005 fa9d 	bl	80073b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000324 	.word	0x20000324

08001e88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <DMA2_Stream0_IRQHandler+0x10>)
 8001e8e:	f000 ffcd 	bl	8002e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000128 	.word	0x20000128

08001e9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <DMA2_Stream2_IRQHandler+0x10>)
 8001ea2:	f000 ffc3 	bl	8002e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000188 	.word	0x20000188

08001eb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <OTG_FS_IRQHandler+0x10>)
 8001eb6:	f001 fee9 	bl	8003c8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000900 	.word	0x20000900

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f009 ff1c 	bl	800bd30 <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20020000 	.word	0x20020000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	2000051c 	.word	0x2000051c
 8001f2c:	20000e28 	.word	0x20000e28

08001f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f58:	f7ff ffea 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f5e:	490d      	ldr	r1, [pc, #52]	@ (8001f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f60:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f74:	4c0a      	ldr	r4, [pc, #40]	@ (8001fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f82:	f009 fedb 	bl	800bd3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7fe fa97 	bl	80004b8 <main>
  bx  lr    
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001f98:	0800be78 	.word	0x0800be78
  ldr r2, =_sbss
 8001f9c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001fa0:	20000e28 	.word	0x20000e28

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fac:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <HAL_Init+0x40>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <HAL_Init+0x40>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	@ (8001fe8 <HAL_Init+0x40>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 fd51 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f000 f808 	bl	8001fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7ff fc9e 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <HAL_InitTick+0x54>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_InitTick+0x58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fd69 	bl	8002ae2 <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00e      	b.n	8002038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d80a      	bhi.n	8002036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 fd31 	bl	8002a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800202c:	4a06      	ldr	r2, [pc, #24]	@ (8002048 <HAL_InitTick+0x5c>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000000 	.word	0x20000000
 8002044:	20000008 	.word	0x20000008
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000008 	.word	0x20000008
 8002070:	20000520 	.word	0x20000520

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000520 	.word	0x20000520

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <HAL_Delay+0x44>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020b2:	bf00      	nop
 80020b4:	f7ff ffde 	bl	8002074 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e033      	b.n	8002152 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fc3a 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800211a:	f023 0302 	bic.w	r3, r3, #2
 800211e:	f043 0202 	orr.w	r2, r3, #2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa58 	bl	80025dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	641a      	str	r2, [r3, #64]	@ 0x40
 8002142:	e001      	b.n	8002148 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_ADC_Start_DMA+0x22>
 800217a:	2302      	movs	r3, #2
 800217c:	e0eb      	b.n	8002356 <HAL_ADC_Start_DMA+0x1fa>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d018      	beq.n	80021c6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002360 <HAL_ADC_Start_DMA+0x204>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002364 <HAL_ADC_Start_DMA+0x208>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9a      	lsrs	r2, r3, #18
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80021b8:	e002      	b.n	80021c0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3b01      	subs	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f9      	bne.n	80021ba <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021d4:	d107      	bne.n	80021e6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 80a3 	bne.w	800233c <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002220:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002234:	d106      	bne.n	8002244 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f023 0206 	bic.w	r2, r3, #6
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
 8002242:	e002      	b.n	800224a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002252:	4b45      	ldr	r3, [pc, #276]	@ (8002368 <HAL_ADC_Start_DMA+0x20c>)
 8002254:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225a:	4a44      	ldr	r2, [pc, #272]	@ (800236c <HAL_ADC_Start_DMA+0x210>)
 800225c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002262:	4a43      	ldr	r2, [pc, #268]	@ (8002370 <HAL_ADC_Start_DMA+0x214>)
 8002264:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226a:	4a42      	ldr	r2, [pc, #264]	@ (8002374 <HAL_ADC_Start_DMA+0x218>)
 800226c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002276:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002286:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002296:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	334c      	adds	r3, #76	@ 0x4c
 80022a2:	4619      	mov	r1, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f000 fcd6 	bl	8002c58 <HAL_DMA_Start_IT>
 80022ac:	4603      	mov	r3, r0
 80022ae:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d12a      	bne.n	8002312 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002378 <HAL_ADC_Start_DMA+0x21c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d015      	beq.n	80022f2 <HAL_ADC_Start_DMA+0x196>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2c      	ldr	r2, [pc, #176]	@ (800237c <HAL_ADC_Start_DMA+0x220>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_Start_DMA+0x180>
 80022d0:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <HAL_ADC_Start_DMA+0x20c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a27      	ldr	r2, [pc, #156]	@ (8002380 <HAL_ADC_Start_DMA+0x224>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d136      	bne.n	8002354 <HAL_ADC_Start_DMA+0x1f8>
 80022e6:	4b20      	ldr	r3, [pc, #128]	@ (8002368 <HAL_ADC_Start_DMA+0x20c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d130      	bne.n	8002354 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d129      	bne.n	8002354 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e020      	b.n	8002354 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a18      	ldr	r2, [pc, #96]	@ (8002378 <HAL_ADC_Start_DMA+0x21c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d11b      	bne.n	8002354 <HAL_ADC_Start_DMA+0x1f8>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d114      	bne.n	8002354 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	e00b      	b.n	8002354 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	f043 0210 	orr.w	r2, r3, #16
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234c:	f043 0201 	orr.w	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002354:	7ffb      	ldrb	r3, [r7, #31]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000
 8002364:	431bde83 	.word	0x431bde83
 8002368:	40012300 	.word	0x40012300
 800236c:	080027d5 	.word	0x080027d5
 8002370:	0800288f 	.word	0x0800288f
 8002374:	080028ab 	.word	0x080028ab
 8002378:	40012000 	.word	0x40012000
 800237c:	40012100 	.word	0x40012100
 8002380:	40012200 	.word	0x40012200

08002384 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1c>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e105      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x228>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b09      	cmp	r3, #9
 80023c2:	d925      	bls.n	8002410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68d9      	ldr	r1, [r3, #12]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	3b1e      	subs	r3, #30
 80023da:	2207      	movs	r2, #7
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43da      	mvns	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	400a      	ands	r2, r1
 80023e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68d9      	ldr	r1, [r3, #12]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	4603      	mov	r3, r0
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4403      	add	r3, r0
 8002402:	3b1e      	subs	r3, #30
 8002404:	409a      	lsls	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	e022      	b.n	8002456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6919      	ldr	r1, [r3, #16]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	2207      	movs	r2, #7
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	400a      	ands	r2, r1
 8002432:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6919      	ldr	r1, [r3, #16]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	4603      	mov	r3, r0
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4403      	add	r3, r0
 800244c:	409a      	lsls	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b06      	cmp	r3, #6
 800245c:	d824      	bhi.n	80024a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b05      	subs	r3, #5
 8002470:	221f      	movs	r2, #31
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b05      	subs	r3, #5
 800249a:	fa00 f203 	lsl.w	r2, r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80024a6:	e04c      	b.n	8002542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d824      	bhi.n	80024fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	3b23      	subs	r3, #35	@ 0x23
 80024c2:	221f      	movs	r2, #31
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43da      	mvns	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	400a      	ands	r2, r1
 80024d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	3b23      	subs	r3, #35	@ 0x23
 80024ec:	fa00 f203 	lsl.w	r2, r0, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024f8:	e023      	b.n	8002542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b41      	subs	r3, #65	@ 0x41
 800250c:	221f      	movs	r2, #31
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	4618      	mov	r0, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b41      	subs	r3, #65	@ 0x41
 8002536:	fa00 f203 	lsl.w	r2, r0, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002542:	4b22      	ldr	r3, [pc, #136]	@ (80025cc <HAL_ADC_ConfigChannel+0x234>)
 8002544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a21      	ldr	r2, [pc, #132]	@ (80025d0 <HAL_ADC_ConfigChannel+0x238>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d109      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1cc>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b12      	cmp	r3, #18
 8002556:	d105      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a19      	ldr	r2, [pc, #100]	@ (80025d0 <HAL_ADC_ConfigChannel+0x238>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d123      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x21e>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b10      	cmp	r3, #16
 8002574:	d003      	beq.n	800257e <HAL_ADC_ConfigChannel+0x1e6>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b11      	cmp	r3, #17
 800257c:	d11b      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b10      	cmp	r3, #16
 8002590:	d111      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <HAL_ADC_ConfigChannel+0x23c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a10      	ldr	r2, [pc, #64]	@ (80025d8 <HAL_ADC_ConfigChannel+0x240>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	0c9a      	lsrs	r2, r3, #18
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025a8:	e002      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f9      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40012300 	.word	0x40012300
 80025d0:	40012000 	.word	0x40012000
 80025d4:	20000000 	.word	0x20000000
 80025d8:	431bde83 	.word	0x431bde83

080025dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e4:	4b79      	ldr	r3, [pc, #484]	@ (80027cc <ADC_Init+0x1f0>)
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6899      	ldr	r1, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266e:	4a58      	ldr	r2, [pc, #352]	@ (80027d0 <ADC_Init+0x1f4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d022      	beq.n	80026ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6899      	ldr	r1, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6899      	ldr	r1, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	e00f      	b.n	80026da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0202 	bic.w	r2, r2, #2
 80026e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	7e1b      	ldrb	r3, [r3, #24]
 80026f4:	005a      	lsls	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01b      	beq.n	8002740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002716:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	3b01      	subs	r3, #1
 8002734:	035a      	lsls	r2, r3, #13
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	e007      	b.n	8002750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800275e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	3b01      	subs	r3, #1
 800276c:	051a      	lsls	r2, r3, #20
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6899      	ldr	r1, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002792:	025a      	lsls	r2, r3, #9
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	029a      	lsls	r2, r3, #10
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40012300 	.word	0x40012300
 80027d0:	0f000001 	.word	0x0f000001

080027d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d13c      	bne.n	8002868 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d12b      	bne.n	8002860 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800280c:	2b00      	cmp	r3, #0
 800280e:	d127      	bne.n	8002860 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002816:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002828:	2b00      	cmp	r3, #0
 800282a:	d119      	bne.n	8002860 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0220 	bic.w	r2, r2, #32
 800283a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7fe ff5b 	bl	800171c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002866:	e00e      	b.n	8002886 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7ff fd85 	bl	8002384 <HAL_ADC_ErrorCallback>
}
 800287a:	e004      	b.n	8002886 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7fe ff1b 	bl	80016d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2240      	movs	r2, #64	@ 0x40
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	f043 0204 	orr.w	r2, r3, #4
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff fd5a 	bl	8002384 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290a:	4a04      	ldr	r2, [pc, #16]	@ (800291c <__NVIC_SetPriorityGrouping+0x44>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60d3      	str	r3, [r2, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4907      	ldr	r1, [pc, #28]	@ (8002974 <__NVIC_EnableIRQ+0x38>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	@ (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	@ (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	@ 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	@ 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a44:	d301      	bcc.n	8002a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00f      	b.n	8002a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <SysTick_Config+0x40>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a52:	210f      	movs	r1, #15
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f7ff ff8e 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5c:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <SysTick_Config+0x40>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a62:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <SysTick_Config+0x40>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	e000e010 	.word	0xe000e010

08002a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ff29 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa0:	f7ff ff3e 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff ff8e 	bl	80029cc <NVIC_EncodePriority>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff5d 	bl	8002978 <__NVIC_SetPriority>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff31 	bl	800293c <__NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffa2 	bl	8002a34 <SysTick_Config>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff fab4 	bl	8002074 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e099      	b.n	8002c4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b38:	e00f      	b.n	8002b5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3a:	f7ff fa9b 	bl	8002074 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d908      	bls.n	8002b5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2203      	movs	r2, #3
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e078      	b.n	8002c4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e8      	bne.n	8002b3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4b38      	ldr	r3, [pc, #224]	@ (8002c54 <HAL_DMA_Init+0x158>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d107      	bne.n	8002bc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f023 0307 	bic.w	r3, r3, #7
 8002bda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d117      	bne.n	8002c1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00e      	beq.n	8002c1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fb01 	bl	8003208 <DMA_CheckFifoParam>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	@ 0x40
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e016      	b.n	8002c4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fab8 	bl	800319c <DMA_CalcBaseAndBitshift>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	223f      	movs	r2, #63	@ 0x3f
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	f010803f 	.word	0xf010803f

08002c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_DMA_Start_IT+0x26>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e040      	b.n	8002d00 <HAL_DMA_Start_IT+0xa8>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d12f      	bne.n	8002cf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fa4a 	bl	8003140 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb0:	223f      	movs	r2, #63	@ 0x3f
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0216 	orr.w	r2, r2, #22
 8002cc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0208 	orr.w	r2, r2, #8
 8002cde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e005      	b.n	8002cfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d16:	f7ff f9ad 	bl	8002074 <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d008      	beq.n	8002d3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2280      	movs	r2, #128	@ 0x80
 8002d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e052      	b.n	8002de0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0216 	bic.w	r2, r2, #22
 8002d48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <HAL_DMA_Abort+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0208 	bic.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8a:	e013      	b.n	8002db4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d8c:	f7ff f972 	bl	8002074 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d90c      	bls.n	8002db4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2203      	movs	r2, #3
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e015      	b.n	8002de0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e4      	bne.n	8002d8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	223f      	movs	r2, #63	@ 0x3f
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d004      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2280      	movs	r2, #128	@ 0x80
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00c      	b.n	8002e20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2205      	movs	r2, #5
 8002e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e38:	4b8e      	ldr	r3, [pc, #568]	@ (8003074 <HAL_DMA_IRQHandler+0x248>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a8e      	ldr	r2, [pc, #568]	@ (8003078 <HAL_DMA_IRQHandler+0x24c>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0a9b      	lsrs	r3, r3, #10
 8002e44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e56:	2208      	movs	r2, #8
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01a      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0204 	bic.w	r2, r2, #4
 8002e7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	2208      	movs	r2, #8
 8002e86:	409a      	lsls	r2, r3
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	f043 0201 	orr.w	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec6:	f043 0202 	orr.w	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d012      	beq.n	8002f04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efc:	f043 0204 	orr.w	r2, r3, #4
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f08:	2210      	movs	r2, #16
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d043      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03c      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f26:	2210      	movs	r2, #16
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d018      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d108      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d024      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
 8002f5a:	e01f      	b.n	8002f9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
 8002f6c:	e016      	b.n	8002f9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0208 	bic.w	r2, r2, #8
 8002f8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 808f 	beq.w	80030cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8087 	beq.w	80030cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d136      	bne.n	8003044 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0216 	bic.w	r2, r2, #22
 8002fe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ff4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <HAL_DMA_IRQHandler+0x1da>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0208 	bic.w	r2, r2, #8
 8003014:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301a:	223f      	movs	r2, #63	@ 0x3f
 800301c:	409a      	lsls	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003036:	2b00      	cmp	r3, #0
 8003038:	d07e      	beq.n	8003138 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
        }
        return;
 8003042:	e079      	b.n	8003138 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01d      	beq.n	800308e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10d      	bne.n	800307c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	2b00      	cmp	r3, #0
 8003066:	d031      	beq.n	80030cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
 8003070:	e02c      	b.n	80030cc <HAL_DMA_IRQHandler+0x2a0>
 8003072:	bf00      	nop
 8003074:	20000000 	.word	0x20000000
 8003078:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d023      	beq.n	80030cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	e01e      	b.n	80030cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10f      	bne.n	80030bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0210 	bic.w	r2, r2, #16
 80030aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d032      	beq.n	800313a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d022      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2205      	movs	r2, #5
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	3301      	adds	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	d307      	bcc.n	8003114 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f2      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x2cc>
 8003112:	e000      	b.n	8003116 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003114:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
 8003136:	e000      	b.n	800313a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003138:	bf00      	nop
    }
  }
}
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800315c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b40      	cmp	r3, #64	@ 0x40
 800316c:	d108      	bne.n	8003180 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800317e:	e007      	b.n	8003190 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	60da      	str	r2, [r3, #12]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	3b10      	subs	r3, #16
 80031ac:	4a14      	ldr	r2, [pc, #80]	@ (8003200 <DMA_CalcBaseAndBitshift+0x64>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031b6:	4a13      	ldr	r2, [pc, #76]	@ (8003204 <DMA_CalcBaseAndBitshift+0x68>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d909      	bls.n	80031de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031d2:	f023 0303 	bic.w	r3, r3, #3
 80031d6:	1d1a      	adds	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	659a      	str	r2, [r3, #88]	@ 0x58
 80031dc:	e007      	b.n	80031ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	aaaaaaab 	.word	0xaaaaaaab
 8003204:	0800be60 	.word	0x0800be60

08003208 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d11f      	bne.n	8003262 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d856      	bhi.n	80032d6 <DMA_CheckFifoParam+0xce>
 8003228:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <DMA_CheckFifoParam+0x28>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003241 	.word	0x08003241
 8003234:	08003253 	.word	0x08003253
 8003238:	08003241 	.word	0x08003241
 800323c:	080032d7 	.word	0x080032d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d046      	beq.n	80032da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003250:	e043      	b.n	80032da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800325a:	d140      	bne.n	80032de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003260:	e03d      	b.n	80032de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800326a:	d121      	bne.n	80032b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d837      	bhi.n	80032e2 <DMA_CheckFifoParam+0xda>
 8003272:	a201      	add	r2, pc, #4	@ (adr r2, 8003278 <DMA_CheckFifoParam+0x70>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	08003289 	.word	0x08003289
 800327c:	0800328f 	.word	0x0800328f
 8003280:	08003289 	.word	0x08003289
 8003284:	080032a1 	.word	0x080032a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
      break;
 800328c:	e030      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003292:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d025      	beq.n	80032e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329e:	e022      	b.n	80032e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032a8:	d11f      	bne.n	80032ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032ae:	e01c      	b.n	80032ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d903      	bls.n	80032be <DMA_CheckFifoParam+0xb6>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d003      	beq.n	80032c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032bc:	e018      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
      break;
 80032c2:	e015      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      break;
 80032d4:	e00b      	b.n	80032ee <DMA_CheckFifoParam+0xe6>
      break;
 80032d6:	bf00      	nop
 80032d8:	e00a      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
 80032dc:	e008      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032de:	bf00      	nop
 80032e0:	e006      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032e2:	bf00      	nop
 80032e4:	e004      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
 80032e8:	e002      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
    }
  } 
  
  return status; 
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	@ 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	e16b      	b.n	80035f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	429a      	cmp	r2, r3
 8003336:	f040 815a 	bne.w	80035ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d005      	beq.n	8003352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800334e:	2b02      	cmp	r3, #2
 8003350:	d130      	bne.n	80033b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2203      	movs	r2, #3
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003388:	2201      	movs	r2, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 0201 	and.w	r2, r3, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d017      	beq.n	80033f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d123      	bne.n	8003444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	08da      	lsrs	r2, r3, #3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3208      	adds	r2, #8
 8003404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	220f      	movs	r2, #15
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	08da      	lsrs	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3208      	adds	r2, #8
 800343e:	69b9      	ldr	r1, [r7, #24]
 8003440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0203 	and.w	r2, r3, #3
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80b4 	beq.w	80035ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	4b60      	ldr	r3, [pc, #384]	@ (800360c <HAL_GPIO_Init+0x30c>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	4a5f      	ldr	r2, [pc, #380]	@ (800360c <HAL_GPIO_Init+0x30c>)
 8003490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003494:	6453      	str	r3, [r2, #68]	@ 0x44
 8003496:	4b5d      	ldr	r3, [pc, #372]	@ (800360c <HAL_GPIO_Init+0x30c>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003610 <HAL_GPIO_Init+0x310>)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	3302      	adds	r3, #2
 80034aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	220f      	movs	r2, #15
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a52      	ldr	r2, [pc, #328]	@ (8003614 <HAL_GPIO_Init+0x314>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d02b      	beq.n	8003526 <HAL_GPIO_Init+0x226>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a51      	ldr	r2, [pc, #324]	@ (8003618 <HAL_GPIO_Init+0x318>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d025      	beq.n	8003522 <HAL_GPIO_Init+0x222>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a50      	ldr	r2, [pc, #320]	@ (800361c <HAL_GPIO_Init+0x31c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01f      	beq.n	800351e <HAL_GPIO_Init+0x21e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003620 <HAL_GPIO_Init+0x320>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d019      	beq.n	800351a <HAL_GPIO_Init+0x21a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4e      	ldr	r2, [pc, #312]	@ (8003624 <HAL_GPIO_Init+0x324>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_GPIO_Init+0x216>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003628 <HAL_GPIO_Init+0x328>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00d      	beq.n	8003512 <HAL_GPIO_Init+0x212>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4c      	ldr	r2, [pc, #304]	@ (800362c <HAL_GPIO_Init+0x32c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <HAL_GPIO_Init+0x20e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a4b      	ldr	r2, [pc, #300]	@ (8003630 <HAL_GPIO_Init+0x330>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_GPIO_Init+0x20a>
 8003506:	2307      	movs	r3, #7
 8003508:	e00e      	b.n	8003528 <HAL_GPIO_Init+0x228>
 800350a:	2308      	movs	r3, #8
 800350c:	e00c      	b.n	8003528 <HAL_GPIO_Init+0x228>
 800350e:	2306      	movs	r3, #6
 8003510:	e00a      	b.n	8003528 <HAL_GPIO_Init+0x228>
 8003512:	2305      	movs	r3, #5
 8003514:	e008      	b.n	8003528 <HAL_GPIO_Init+0x228>
 8003516:	2304      	movs	r3, #4
 8003518:	e006      	b.n	8003528 <HAL_GPIO_Init+0x228>
 800351a:	2303      	movs	r3, #3
 800351c:	e004      	b.n	8003528 <HAL_GPIO_Init+0x228>
 800351e:	2302      	movs	r3, #2
 8003520:	e002      	b.n	8003528 <HAL_GPIO_Init+0x228>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_GPIO_Init+0x228>
 8003526:	2300      	movs	r3, #0
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	f002 0203 	and.w	r2, r2, #3
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	4093      	lsls	r3, r2
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003538:	4935      	ldr	r1, [pc, #212]	@ (8003610 <HAL_GPIO_Init+0x310>)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	3302      	adds	r3, #2
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003546:	4b3b      	ldr	r3, [pc, #236]	@ (8003634 <HAL_GPIO_Init+0x334>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800356a:	4a32      	ldr	r2, [pc, #200]	@ (8003634 <HAL_GPIO_Init+0x334>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003570:	4b30      	ldr	r3, [pc, #192]	@ (8003634 <HAL_GPIO_Init+0x334>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003594:	4a27      	ldr	r2, [pc, #156]	@ (8003634 <HAL_GPIO_Init+0x334>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800359a:	4b26      	ldr	r3, [pc, #152]	@ (8003634 <HAL_GPIO_Init+0x334>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035be:	4a1d      	ldr	r2, [pc, #116]	@ (8003634 <HAL_GPIO_Init+0x334>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <HAL_GPIO_Init+0x334>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e8:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <HAL_GPIO_Init+0x334>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	f67f ae90 	bls.w	800331c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3724      	adds	r7, #36	@ 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	40013800 	.word	0x40013800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400
 800361c:	40020800 	.word	0x40020800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40021000 	.word	0x40021000
 8003628:	40021400 	.word	0x40021400
 800362c:	40021800 	.word	0x40021800
 8003630:	40021c00 	.word	0x40021c00
 8003634:	40013c00 	.word	0x40013c00

08003638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e001      	b.n	800365a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003684:	e003      	b.n	800368e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	041a      	lsls	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	619a      	str	r2, [r3, #24]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036a6:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036b2:	4a05      	ldr	r2, [pc, #20]	@ (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd fff4 	bl	80016a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e059      	b.n	8003792 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f007 ff97 	bl	800b62c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2203      	movs	r2, #3
 8003702:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800370c:	d102      	bne.n	8003714 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f004 fda4 	bl	8008266 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7c1a      	ldrb	r2, [r3, #16]
 8003726:	f88d 2000 	strb.w	r2, [sp]
 800372a:	3304      	adds	r3, #4
 800372c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372e:	f004 fd25 	bl	800817c <USB_CoreInit>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e026      	b.n	8003792 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f004 fd9c 	bl	8008288 <USB_SetCurrentMode>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e017      	b.n	8003792 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7c1a      	ldrb	r2, [r3, #16]
 800376a:	f88d 2000 	strb.w	r2, [sp]
 800376e:	3304      	adds	r3, #4
 8003770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003772:	f004 ff45 	bl	8008600 <USB_HostInit>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e004      	b.n	8003792 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800379a:	b590      	push	{r4, r7, lr}
 800379c:	b08b      	sub	sp, #44	@ 0x2c
 800379e:	af04      	add	r7, sp, #16
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	4608      	mov	r0, r1
 80037a4:	4611      	mov	r1, r2
 80037a6:	461a      	mov	r2, r3
 80037a8:	4603      	mov	r3, r0
 80037aa:	70fb      	strb	r3, [r7, #3]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70bb      	strb	r3, [r7, #2]
 80037b0:	4613      	mov	r3, r2
 80037b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80037b4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80037b6:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_HCD_HC_Init+0x2c>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e09d      	b.n	8003902 <HAL_HCD_HC_Init+0x168>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	3319      	adds	r3, #25
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3314      	adds	r3, #20
 80037f2:	787a      	ldrb	r2, [r7, #1]
 80037f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3315      	adds	r3, #21
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3326      	adds	r3, #38	@ 0x26
 800381a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800381e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	78bb      	ldrb	r3, [r7, #2]
 8003824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003828:	b2d8      	uxtb	r0, r3
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	3316      	adds	r3, #22
 8003838:	4602      	mov	r2, r0
 800383a:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	4619      	mov	r1, r3
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fbc7 	bl	8003fd4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003846:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800384a:	2b00      	cmp	r3, #0
 800384c:	da0a      	bge.n	8003864 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3317      	adds	r3, #23
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e009      	b.n	8003878 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3317      	adds	r3, #23
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f005 f823 	bl	80088c8 <USB_GetHostSpeed>
 8003882:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003884:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d10b      	bne.n	80038a4 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800388c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003890:	2b01      	cmp	r3, #1
 8003892:	d107      	bne.n	80038a4 <HAL_HCD_HC_Init+0x10a>
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2bbc      	cmp	r3, #188	@ 0xbc
 800389e:	d901      	bls.n	80038a4 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80038a0:	23bc      	movs	r3, #188	@ 0xbc
 80038a2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3318      	adds	r3, #24
 80038b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80038b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	b298      	uxth	r0, r3
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3328      	adds	r3, #40	@ 0x28
 80038ce:	4602      	mov	r2, r0
 80038d0:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	787c      	ldrb	r4, [r7, #1]
 80038dc:	78ba      	ldrb	r2, [r7, #2]
 80038de:	78f9      	ldrb	r1, [r7, #3]
 80038e0:	9302      	str	r3, [sp, #8]
 80038e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	4623      	mov	r3, r4
 80038f0:	f005 f812 	bl	8008918 <USB_HC_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	bd90      	pop	{r4, r7, pc}

0800390a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_HCD_HC_Halt+0x1e>
 8003924:	2302      	movs	r3, #2
 8003926:	e00f      	b.n	8003948 <HAL_HCD_HC_Halt+0x3e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f005 fba4 	bl	8009086 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4603      	mov	r3, r0
 8003960:	70fb      	strb	r3, [r7, #3]
 8003962:	460b      	mov	r3, r1
 8003964:	70bb      	strb	r3, [r7, #2]
 8003966:	4613      	mov	r3, r2
 8003968:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3317      	adds	r3, #23
 800397a:	78ba      	ldrb	r2, [r7, #2]
 800397c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3326      	adds	r3, #38	@ 0x26
 800398e:	787a      	ldrb	r2, [r7, #1]
 8003990:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003992:	7c3b      	ldrb	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d114      	bne.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	332a      	adds	r3, #42	@ 0x2a
 80039a8:	2203      	movs	r2, #3
 80039aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3319      	adds	r3, #25
 80039bc:	7f3a      	ldrb	r2, [r7, #28]
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	e009      	b.n	80039d6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	332a      	adds	r3, #42	@ 0x2a
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80039d6:	787b      	ldrb	r3, [r7, #1]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	f200 8102 	bhi.w	8003be2 <HAL_HCD_HC_SubmitRequest+0x292>
 80039de:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003bcd 	.word	0x08003bcd
 80039ec:	08003ab9 	.word	0x08003ab9
 80039f0:	08003b43 	.word	0x08003b43
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80039f4:	7c3b      	ldrb	r3, [r7, #16]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	f040 80f5 	bne.w	8003be6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80039fc:	78bb      	ldrb	r3, [r7, #2]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d12d      	bne.n	8003a5e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003a02:	8b3b      	ldrh	r3, [r7, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	333d      	adds	r3, #61	@ 0x3d
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	333d      	adds	r3, #61	@ 0x3d
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	332a      	adds	r3, #42	@ 0x2a
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003a46:	e0ce      	b.n	8003be6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	332a      	adds	r3, #42	@ 0x2a
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
      break;
 8003a5c:	e0c3      	b.n	8003be6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	331a      	adds	r3, #26
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	f040 80b8 	bne.w	8003be6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	333c      	adds	r3, #60	@ 0x3c
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	332a      	adds	r3, #42	@ 0x2a
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
      break;
 8003aa0:	e0a1      	b.n	8003be6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	332a      	adds	r3, #42	@ 0x2a
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	701a      	strb	r2, [r3, #0]
      break;
 8003ab6:	e096      	b.n	8003be6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ab8:	78bb      	ldrb	r3, [r7, #2]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d120      	bne.n	8003b00 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	333d      	adds	r3, #61	@ 0x3d
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	332a      	adds	r3, #42	@ 0x2a
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ae8:	e07e      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	332a      	adds	r3, #42	@ 0x2a
 8003afa:	2202      	movs	r2, #2
 8003afc:	701a      	strb	r2, [r3, #0]
      break;
 8003afe:	e073      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	333c      	adds	r3, #60	@ 0x3c
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	332a      	adds	r3, #42	@ 0x2a
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
      break;
 8003b2a:	e05d      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	332a      	adds	r3, #42	@ 0x2a
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	701a      	strb	r2, [r3, #0]
      break;
 8003b40:	e052      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b42:	78bb      	ldrb	r3, [r7, #2]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d120      	bne.n	8003b8a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	333d      	adds	r3, #61	@ 0x3d
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	332a      	adds	r3, #42	@ 0x2a
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b72:	e039      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	332a      	adds	r3, #42	@ 0x2a
 8003b84:	2202      	movs	r2, #2
 8003b86:	701a      	strb	r2, [r3, #0]
      break;
 8003b88:	e02e      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	333c      	adds	r3, #60	@ 0x3c
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	332a      	adds	r3, #42	@ 0x2a
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
      break;
 8003bb4:	e018      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	332a      	adds	r3, #42	@ 0x2a
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	701a      	strb	r2, [r3, #0]
      break;
 8003bca:	e00d      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	332a      	adds	r3, #42	@ 0x2a
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
      break;
 8003be0:	e002      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003be6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	332c      	adds	r3, #44	@ 0x2c
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	8b39      	ldrh	r1, [r7, #24]
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4403      	add	r3, r0
 8003c0c:	3334      	adds	r3, #52	@ 0x34
 8003c0e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334c      	adds	r3, #76	@ 0x4c
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	3338      	adds	r3, #56	@ 0x38
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	3315      	adds	r3, #21
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	334d      	adds	r3, #77	@ 0x4d
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	3310      	adds	r3, #16
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4413      	add	r3, r2
 8003c74:	1d19      	adds	r1, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	799b      	ldrb	r3, [r3, #6]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f004 ff78 	bl	8008b70 <USB_HC_StartXfer>
 8003c80:	4603      	mov	r3, r0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop

08003c8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 fc66 	bl	8008574 <USB_GetMode>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	f040 80fb 	bne.w	8003ea6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f004 fc29 	bl	800850c <USB_ReadInterrupts>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80f1 	beq.w	8003ea4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 fc20 	bl	800850c <USB_ReadInterrupts>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cd6:	d104      	bne.n	8003ce2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003ce0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 fc10 	bl	800850c <USB_ReadInterrupts>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cf6:	d104      	bne.n	8003d02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f004 fc00 	bl	800850c <USB_ReadInterrupts>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d16:	d104      	bne.n	8003d22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003d20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 fbf0 	bl	800850c <USB_ReadInterrupts>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d103      	bne.n	8003d3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f004 fbe2 	bl	800850c <USB_ReadInterrupts>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d52:	d120      	bne.n	8003d96 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003d5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d113      	bne.n	8003d96 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003d6e:	2110      	movs	r1, #16
 8003d70:	6938      	ldr	r0, [r7, #16]
 8003d72:	f004 fad5 	bl	8008320 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003d76:	6938      	ldr	r0, [r7, #16]
 8003d78:	f004 fb04 	bl	8008384 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	7a5b      	ldrb	r3, [r3, #9]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d105      	bne.n	8003d90 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f004 fcfc 	bl	8008788 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f007 fcc9 	bl	800b728 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f004 fbb6 	bl	800850c <USB_ReadInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003da6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003daa:	d102      	bne.n	8003db2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f001 fd4d 	bl	800584c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f004 fba8 	bl	800850c <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d106      	bne.n	8003dd4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f007 fc92 	bl	800b6f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f004 fb97 	bl	800850c <USB_ReadInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003de8:	d139      	bne.n	8003e5e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f005 f938 	bl	8009064 <USB_HC_ReadInterrupt>
 8003df4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e025      	b.n	8003e48 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d018      	beq.n	8003e42 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e26:	d106      	bne.n	8003e36 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f905 	bl	800403e <HCD_HC_IN_IRQHandler>
 8003e34:	e005      	b.n	8003e42 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 ff67 	bl	8004d10 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3301      	adds	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	795b      	ldrb	r3, [r3, #5]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d3d3      	bcc.n	8003dfc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f004 fb52 	bl	800850c <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d101      	bne.n	8003e76 <HAL_HCD_IRQHandler+0x1ea>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_HCD_IRQHandler+0x1ec>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d014      	beq.n	8003ea6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0210 	bic.w	r2, r2, #16
 8003e8a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f001 fbfe 	bl	800568e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0210 	orr.w	r2, r2, #16
 8003ea0:	619a      	str	r2, [r3, #24]
 8003ea2:	e000      	b.n	8003ea6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003ea4:	bf00      	nop
    }
  }
}
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_HCD_Start+0x16>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e013      	b.n	8003eea <HAL_HCD_Start+0x3e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f004 fcc0 	bl	8008856 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f004 f9b2 	bl	8008244 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_HCD_Stop+0x16>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e00d      	b.n	8003f24 <HAL_HCD_Stop+0x32>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f005 fa13 	bl	8009340 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f004 fc62 	bl	8008802 <USB_ResetPort>
 8003f3e:	4603      	mov	r3, r0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	334c      	adds	r3, #76	@ 0x4c
 8003f64:	781b      	ldrb	r3, [r3, #0]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3338      	adds	r3, #56	@ 0x38
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 fca4 	bl	80088f6 <USB_GetCurrentFrame>
 8003fae:	4603      	mov	r3, r0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f004 fc7f 	bl	80088c8 <USB_GetHostSpeed>
 8003fca:	4603      	mov	r3, r0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	331a      	adds	r3, #26
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	331b      	adds	r3, #27
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	3325      	adds	r3, #37	@ 0x25
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	3324      	adds	r3, #36	@ 0x24
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f004 fa68 	bl	8008532 <USB_ReadChInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b04      	cmp	r3, #4
 800406a:	d11a      	bne.n	80040a2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004078:	461a      	mov	r2, r3
 800407a:	2304      	movs	r3, #4
 800407c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	334d      	adds	r3, #77	@ 0x4d
 800408e:	2207      	movs	r2, #7
 8004090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f004 fff3 	bl	8009086 <USB_HC_Halt>
 80040a0:	e09e      	b.n	80041e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f004 fa41 	bl	8008532 <USB_ReadChInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ba:	d11b      	bne.n	80040f4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c8:	461a      	mov	r2, r3
 80040ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	334d      	adds	r3, #77	@ 0x4d
 80040e0:	2208      	movs	r2, #8
 80040e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f004 ffca 	bl	8009086 <USB_HC_Halt>
 80040f2:	e075      	b.n	80041e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f004 fa18 	bl	8008532 <USB_ReadChInterrupts>
 8004102:	4603      	mov	r3, r0
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d11a      	bne.n	8004142 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004118:	461a      	mov	r2, r3
 800411a:	2308      	movs	r3, #8
 800411c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	334d      	adds	r3, #77	@ 0x4d
 800412e:	2206      	movs	r2, #6
 8004130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f004 ffa3 	bl	8009086 <USB_HC_Halt>
 8004140:	e04e      	b.n	80041e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f004 f9f1 	bl	8008532 <USB_ReadChInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415a:	d11b      	bne.n	8004194 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004168:	461a      	mov	r2, r3
 800416a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800416e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	334d      	adds	r3, #77	@ 0x4d
 8004180:	2209      	movs	r2, #9
 8004182:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f004 ff7a 	bl	8009086 <USB_HC_Halt>
 8004192:	e025      	b.n	80041e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f004 f9c8 	bl	8008532 <USB_ReadChInterrupts>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a8:	2b80      	cmp	r3, #128	@ 0x80
 80041aa:	d119      	bne.n	80041e0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b8:	461a      	mov	r2, r3
 80041ba:	2380      	movs	r3, #128	@ 0x80
 80041bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	334d      	adds	r3, #77	@ 0x4d
 80041ce:	2207      	movs	r2, #7
 80041d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	4611      	mov	r1, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	f004 ff53 	bl	8009086 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 f9a2 	bl	8008532 <USB_ReadChInterrupts>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f8:	d112      	bne.n	8004220 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	4611      	mov	r1, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f004 ff3f 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800421a:	6093      	str	r3, [r2, #8]
 800421c:	f000 bd75 	b.w	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f004 f982 	bl	8008532 <USB_ReadChInterrupts>
 800422e:	4603      	mov	r3, r0
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	f040 8128 	bne.w	800448a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004246:	461a      	mov	r2, r3
 8004248:	2320      	movs	r3, #32
 800424a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	331b      	adds	r3, #27
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d119      	bne.n	8004296 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	331b      	adds	r3, #27
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	440a      	add	r2, r1
 800428c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004294:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	799b      	ldrb	r3, [r3, #6]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01b      	beq.n	80042d6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	3330      	adds	r3, #48	@ 0x30
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	1ac9      	subs	r1, r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4403      	add	r3, r0
 80042d2:	3338      	adds	r3, #56	@ 0x38
 80042d4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	334d      	adds	r3, #77	@ 0x4d
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	3344      	adds	r3, #68	@ 0x44
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800430a:	461a      	mov	r2, r3
 800430c:	2301      	movs	r3, #1
 800430e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3326      	adds	r3, #38	@ 0x26
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	3326      	adds	r3, #38	@ 0x26
 8004336:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004338:	2b02      	cmp	r3, #2
 800433a:	d110      	bne.n	800435e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	78fa      	ldrb	r2, [r7, #3]
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f004 fe9e 	bl	8009086 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004356:	461a      	mov	r2, r3
 8004358:	2310      	movs	r3, #16
 800435a:	6093      	str	r3, [r2, #8]
 800435c:	e03d      	b.n	80043da <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	3326      	adds	r3, #38	@ 0x26
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d00a      	beq.n	800438a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	3326      	adds	r3, #38	@ 0x26
 8004384:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004386:	2b01      	cmp	r3, #1
 8004388:	d127      	bne.n	80043da <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043a8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	334c      	adds	r3, #76	@ 0x4c
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	334c      	adds	r3, #76	@ 0x4c
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f007 f9b5 	bl	800b744 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	799b      	ldrb	r3, [r3, #6]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d13b      	bne.n	800445a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	3338      	adds	r3, #56	@ 0x38
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4403      	add	r3, r0
 8004402:	3328      	adds	r3, #40	@ 0x28
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	440b      	add	r3, r1
 8004408:	1e59      	subs	r1, r3, #1
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4403      	add	r3, r0
 8004418:	3328      	adds	r3, #40	@ 0x28
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8470 	beq.w	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	333c      	adds	r3, #60	@ 0x3c
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2d8      	uxtb	r0, r3
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	333c      	adds	r3, #60	@ 0x3c
 8004452:	4602      	mov	r2, r0
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	f000 bc58 	b.w	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	333c      	adds	r3, #60	@ 0x3c
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	f083 0301 	eor.w	r3, r3, #1
 8004472:	b2d8      	uxtb	r0, r3
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	333c      	adds	r3, #60	@ 0x3c
 8004482:	4602      	mov	r2, r0
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	f000 bc40 	b.w	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f004 f84d 	bl	8008532 <USB_ReadChInterrupts>
 8004498:	4603      	mov	r3, r0
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d131      	bne.n	8004506 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ae:	461a      	mov	r2, r3
 80044b0:	2320      	movs	r3, #32
 80044b2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	331a      	adds	r3, #26
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	f040 841f 	bne.w	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	331b      	adds	r3, #27
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	334d      	adds	r3, #77	@ 0x4d
 80044f0:	2203      	movs	r2, #3
 80044f2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	4611      	mov	r1, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f004 fdc2 	bl	8009086 <USB_HC_Halt>
 8004502:	f000 bc02 	b.w	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f004 f80f 	bl	8008532 <USB_ReadChInterrupts>
 8004514:	4603      	mov	r3, r0
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	f040 8305 	bne.w	8004b2a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452c:	461a      	mov	r2, r3
 800452e:	2302      	movs	r3, #2
 8004530:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	334d      	adds	r3, #77	@ 0x4d
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d114      	bne.n	8004572 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	334d      	adds	r3, #77	@ 0x4d
 8004558:	2202      	movs	r2, #2
 800455a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	334c      	adds	r3, #76	@ 0x4c
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	e2cc      	b.n	8004b0c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	334d      	adds	r3, #77	@ 0x4d
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b06      	cmp	r3, #6
 8004586:	d114      	bne.n	80045b2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	334d      	adds	r3, #77	@ 0x4d
 8004598:	2202      	movs	r2, #2
 800459a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800459c:	78fa      	ldrb	r2, [r7, #3]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	334c      	adds	r3, #76	@ 0x4c
 80045ac:	2205      	movs	r2, #5
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e2ac      	b.n	8004b0c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	334d      	adds	r3, #77	@ 0x4d
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b07      	cmp	r3, #7
 80045c6:	d00b      	beq.n	80045e0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	334d      	adds	r3, #77	@ 0x4d
 80045d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045da:	2b09      	cmp	r3, #9
 80045dc:	f040 80a6 	bne.w	800472c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	334d      	adds	r3, #77	@ 0x4d
 80045f0:	2202      	movs	r2, #2
 80045f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	3344      	adds	r3, #68	@ 0x44
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4403      	add	r3, r0
 8004614:	3344      	adds	r3, #68	@ 0x44
 8004616:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	3344      	adds	r3, #68	@ 0x44
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d943      	bls.n	80046b6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	3344      	adds	r3, #68	@ 0x44
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004642:	78fa      	ldrb	r2, [r7, #3]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	331a      	adds	r3, #26
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d123      	bne.n	80046a0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	331b      	adds	r3, #27
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	331c      	adds	r3, #28
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	440a      	add	r2, r1
 8004696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800469a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046a0:	78fa      	ldrb	r2, [r7, #3]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	334c      	adds	r3, #76	@ 0x4c
 80046b0:	2204      	movs	r2, #4
 80046b2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046b4:	e229      	b.n	8004b0a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	334c      	adds	r3, #76	@ 0x4c
 80046c6:	2202      	movs	r2, #2
 80046c8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	3326      	adds	r3, #38	@ 0x26
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3326      	adds	r3, #38	@ 0x26
 80046f0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	f040 8209 	bne.w	8004b0a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800470e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004716:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4413      	add	r3, r2
 8004720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004724:	461a      	mov	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800472a:	e1ee      	b.n	8004b0a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	334d      	adds	r3, #77	@ 0x4d
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b05      	cmp	r3, #5
 8004740:	f040 80c8 	bne.w	80048d4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	334d      	adds	r3, #77	@ 0x4d
 8004754:	2202      	movs	r2, #2
 8004756:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	331b      	adds	r3, #27
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	f040 81ce 	bne.w	8004b0c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	3326      	adds	r3, #38	@ 0x26
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d16b      	bne.n	800485e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	3348      	adds	r3, #72	@ 0x48
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4403      	add	r3, r0
 80047a6:	3348      	adds	r3, #72	@ 0x48
 80047a8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3348      	adds	r3, #72	@ 0x48
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d943      	bls.n	8004848 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	3348      	adds	r3, #72	@ 0x48
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	331b      	adds	r3, #27
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	3344      	adds	r3, #68	@ 0x44
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d809      	bhi.n	8004812 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	331c      	adds	r3, #28
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	440a      	add	r2, r1
 8004828:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800482c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004830:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	334c      	adds	r3, #76	@ 0x4c
 8004842:	2204      	movs	r2, #4
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	e014      	b.n	8004872 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	334c      	adds	r3, #76	@ 0x4c
 8004858:	2202      	movs	r2, #2
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e009      	b.n	8004872 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	334c      	adds	r3, #76	@ 0x4c
 800486e:	2202      	movs	r2, #2
 8004870:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	3326      	adds	r3, #38	@ 0x26
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	3326      	adds	r3, #38	@ 0x26
 8004898:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800489a:	2b02      	cmp	r3, #2
 800489c:	f040 8136 	bne.w	8004b0c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048cc:	461a      	mov	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e11b      	b.n	8004b0c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	334d      	adds	r3, #77	@ 0x4d
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	f040 8081 	bne.w	80049ee <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	334d      	adds	r3, #77	@ 0x4d
 80048fc:	2202      	movs	r2, #2
 80048fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	331b      	adds	r3, #27
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	f040 80fa 	bne.w	8004b0c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	334c      	adds	r3, #76	@ 0x4c
 8004928:	2202      	movs	r2, #2
 800492a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	440a      	add	r2, r1
 8004942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800494a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	440a      	add	r2, r1
 8004962:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800496a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	4413      	add	r3, r2
 8004974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	440a      	add	r2, r1
 8004982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004986:	f023 0320 	bic.w	r3, r3, #32
 800498a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	3326      	adds	r3, #38	@ 0x26
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	3326      	adds	r3, #38	@ 0x26
 80049b2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	f040 80a9 	bne.w	8004b0c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049d0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049d8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e6:	461a      	mov	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e08e      	b.n	8004b0c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	334d      	adds	r3, #77	@ 0x4d
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d143      	bne.n	8004a8c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a04:	78fa      	ldrb	r2, [r7, #3]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	334d      	adds	r3, #77	@ 0x4d
 8004a14:	2202      	movs	r2, #2
 8004a16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334c      	adds	r3, #76	@ 0x4c
 8004a28:	2202      	movs	r2, #2
 8004a2a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	3326      	adds	r3, #38	@ 0x26
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	3326      	adds	r3, #38	@ 0x26
 8004a52:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d159      	bne.n	8004b0c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a6e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a76:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a84:	461a      	mov	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e03f      	b.n	8004b0c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	334d      	adds	r3, #77	@ 0x4d
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d126      	bne.n	8004af0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	334d      	adds	r3, #77	@ 0x4d
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	3344      	adds	r3, #68	@ 0x44
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4403      	add	r3, r0
 8004ad6:	3344      	adds	r3, #68	@ 0x44
 8004ad8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	334c      	adds	r3, #76	@ 0x4c
 8004aea:	2204      	movs	r2, #4
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e00d      	b.n	8004b0c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	334d      	adds	r3, #77	@ 0x4d
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	f000 8100 	beq.w	8004d08 <HCD_HC_IN_IRQHandler+0xcca>
 8004b08:	e000      	b.n	8004b0c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b0a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	334c      	adds	r3, #76	@ 0x4c
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f006 fe0e 	bl	800b744 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b28:	e0ef      	b.n	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	4611      	mov	r1, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f003 fcfd 	bl	8008532 <USB_ReadChInterrupts>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3e:	2b40      	cmp	r3, #64	@ 0x40
 8004b40:	d12f      	bne.n	8004ba2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2340      	movs	r3, #64	@ 0x40
 8004b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	334d      	adds	r3, #77	@ 0x4d
 8004b64:	2205      	movs	r2, #5
 8004b66:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	331a      	adds	r3, #26
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	3344      	adds	r3, #68	@ 0x44
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f004 fa73 	bl	8009086 <USB_HC_Halt>
 8004ba0:	e0b3      	b.n	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	78fa      	ldrb	r2, [r7, #3]
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f003 fcc1 	bl	8008532 <USB_ReadChInterrupts>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	f040 80a7 	bne.w	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	3326      	adds	r3, #38	@ 0x26
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d11b      	bne.n	8004c0a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	3344      	adds	r3, #68	@ 0x44
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	334d      	adds	r3, #77	@ 0x4d
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	4611      	mov	r1, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f004 fa3f 	bl	8009086 <USB_HC_Halt>
 8004c08:	e03f      	b.n	8004c8a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	3326      	adds	r3, #38	@ 0x26
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3326      	adds	r3, #38	@ 0x26
 8004c30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d129      	bne.n	8004c8a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	3344      	adds	r3, #68	@ 0x44
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	799b      	ldrb	r3, [r3, #6]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HCD_HC_IN_IRQHandler+0xc2a>
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	331b      	adds	r3, #27
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d110      	bne.n	8004c8a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	334d      	adds	r3, #77	@ 0x4d
 8004c78:	2204      	movs	r2, #4
 8004c7a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	4611      	mov	r1, r2
 8004c84:	4618      	mov	r0, r3
 8004c86:	f004 f9fe 	bl	8009086 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	331b      	adds	r3, #27
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d129      	bne.n	8004cf4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	331b      	adds	r3, #27
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	0151      	lsls	r1, r2, #5
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	440a      	add	r2, r1
 8004cca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cee:	f043 0320 	orr.w	r3, r3, #32
 8004cf2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d00:	461a      	mov	r2, r3
 8004d02:	2310      	movs	r3, #16
 8004d04:	6093      	str	r3, [r2, #8]
 8004d06:	e000      	b.n	8004d0a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004d08:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f003 fbff 	bl	8008532 <USB_ReadChInterrupts>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d11b      	bne.n	8004d76 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	334d      	adds	r3, #77	@ 0x4d
 8004d60:	2207      	movs	r2, #7
 8004d62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f004 f98a 	bl	8009086 <USB_HC_Halt>
 8004d72:	f000 bc89 	b.w	8005688 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f003 fbd7 	bl	8008532 <USB_ReadChInterrupts>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	f040 8082 	bne.w	8004e94 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2320      	movs	r3, #32
 8004da0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	3319      	adds	r3, #25
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d124      	bne.n	8004e02 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	3319      	adds	r3, #25
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dcc:	78fa      	ldrb	r2, [r7, #3]
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	334c      	adds	r3, #76	@ 0x4c
 8004ddc:	2202      	movs	r2, #2
 8004dde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	334d      	adds	r3, #77	@ 0x4d
 8004df0:	2203      	movs	r2, #3
 8004df2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 f942 	bl	8009086 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	331a      	adds	r3, #26
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 8437 	bne.w	8005688 <HCD_HC_OUT_IRQHandler+0x978>
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	331b      	adds	r3, #27
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f040 842b 	bne.w	8005688 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	3326      	adds	r3, #38	@ 0x26
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d009      	beq.n	8004e5c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	331b      	adds	r3, #27
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	334d      	adds	r3, #77	@ 0x4d
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f004 f904 	bl	8009086 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3344      	adds	r3, #68	@ 0x44
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e3f9      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f003 fb48 	bl	8008532 <USB_ReadChInterrupts>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eac:	d111      	bne.n	8004ed2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ec0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f004 f8db 	bl	8009086 <USB_HC_Halt>
 8004ed0:	e3da      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f003 fb29 	bl	8008532 <USB_ReadChInterrupts>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d168      	bne.n	8004fbc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3344      	adds	r3, #68	@ 0x44
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f003 fb13 	bl	8008532 <USB_ReadChInterrupts>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f12:	2b40      	cmp	r3, #64	@ 0x40
 8004f14:	d112      	bne.n	8004f3c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	3319      	adds	r3, #25
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f36:	461a      	mov	r2, r3
 8004f38:	2340      	movs	r3, #64	@ 0x40
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	331b      	adds	r3, #27
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d019      	beq.n	8004f86 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	331b      	adds	r3, #27
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f84:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f92:	461a      	mov	r2, r3
 8004f94:	2301      	movs	r3, #1
 8004f96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	334d      	adds	r3, #77	@ 0x4d
 8004fa8:	2201      	movs	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f004 f866 	bl	8009086 <USB_HC_Halt>
 8004fba:	e365      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f003 fab4 	bl	8008532 <USB_ReadChInterrupts>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b40      	cmp	r3, #64	@ 0x40
 8004fd2:	d139      	bne.n	8005048 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	334d      	adds	r3, #77	@ 0x4d
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	1a9b      	subs	r3, r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	331a      	adds	r3, #26
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004ffe:	78fa      	ldrb	r2, [r7, #3]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	3319      	adds	r3, #25
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005012:	78fa      	ldrb	r2, [r7, #3]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	3344      	adds	r3, #68	@ 0x44
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f004 f829 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005040:	461a      	mov	r2, r3
 8005042:	2340      	movs	r3, #64	@ 0x40
 8005044:	6093      	str	r3, [r2, #8]
 8005046:	e31f      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f003 fa6e 	bl	8008532 <USB_ReadChInterrupts>
 8005056:	4603      	mov	r3, r0
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b08      	cmp	r3, #8
 800505e:	d11a      	bne.n	8005096 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800506c:	461a      	mov	r2, r3
 800506e:	2308      	movs	r3, #8
 8005070:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	334d      	adds	r3, #77	@ 0x4d
 8005082:	2206      	movs	r2, #6
 8005084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f003 fff9 	bl	8009086 <USB_HC_Halt>
 8005094:	e2f8      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	4611      	mov	r1, r2
 800509e:	4618      	mov	r0, r3
 80050a0:	f003 fa47 	bl	8008532 <USB_ReadChInterrupts>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d144      	bne.n	8005138 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	3344      	adds	r3, #68	@ 0x44
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	334d      	adds	r3, #77	@ 0x4d
 80050d2:	2204      	movs	r2, #4
 80050d4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	3319      	adds	r3, #25
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d114      	bne.n	8005116 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	3318      	adds	r3, #24
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005102:	78fa      	ldrb	r2, [r7, #3]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	3319      	adds	r3, #25
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f003 ffb1 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005130:	461a      	mov	r2, r3
 8005132:	2310      	movs	r3, #16
 8005134:	6093      	str	r3, [r2, #8]
 8005136:	e2a7      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f003 f9f6 	bl	8008532 <USB_ReadChInterrupts>
 8005146:	4603      	mov	r3, r0
 8005148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800514c:	2b80      	cmp	r3, #128	@ 0x80
 800514e:	f040 8083 	bne.w	8005258 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	799b      	ldrb	r3, [r3, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d111      	bne.n	800517e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	334d      	adds	r3, #77	@ 0x4d
 800516a:	2207      	movs	r2, #7
 800516c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	4611      	mov	r1, r2
 8005176:	4618      	mov	r0, r3
 8005178:	f003 ff85 	bl	8009086 <USB_HC_Halt>
 800517c:	e062      	b.n	8005244 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3344      	adds	r3, #68	@ 0x44
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	1c59      	adds	r1, r3, #1
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4403      	add	r3, r0
 800519e:	3344      	adds	r3, #68	@ 0x44
 80051a0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3344      	adds	r3, #68	@ 0x44
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d922      	bls.n	80051fe <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	3344      	adds	r3, #68	@ 0x44
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	334c      	adds	r3, #76	@ 0x4c
 80051dc:	2204      	movs	r2, #4
 80051de:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80051e0:	78fa      	ldrb	r2, [r7, #3]
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	334c      	adds	r3, #76	@ 0x4c
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f006 faa4 	bl	800b744 <HAL_HCD_HC_NotifyURBChange_Callback>
 80051fc:	e022      	b.n	8005244 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	334c      	adds	r3, #76	@ 0x4c
 800520e:	2202      	movs	r2, #2
 8005210:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005228:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005230:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800523e:	461a      	mov	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005250:	461a      	mov	r2, r3
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	6093      	str	r3, [r2, #8]
 8005256:	e217      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	4611      	mov	r1, r2
 8005260:	4618      	mov	r0, r3
 8005262:	f003 f966 	bl	8008532 <USB_ReadChInterrupts>
 8005266:	4603      	mov	r3, r0
 8005268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005270:	d11b      	bne.n	80052aa <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	334d      	adds	r3, #77	@ 0x4d
 8005282:	2209      	movs	r2, #9
 8005284:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	4611      	mov	r1, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f003 fef9 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	4413      	add	r3, r2
 800529c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a0:	461a      	mov	r2, r3
 80052a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052a6:	6093      	str	r3, [r2, #8]
 80052a8:	e1ee      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f003 f93d 	bl	8008532 <USB_ReadChInterrupts>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b02      	cmp	r3, #2
 80052c0:	f040 81df 	bne.w	8005682 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052d0:	461a      	mov	r2, r3
 80052d2:	2302      	movs	r3, #2
 80052d4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80052d6:	78fa      	ldrb	r2, [r7, #3]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	334d      	adds	r3, #77	@ 0x4d
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	f040 8093 	bne.w	8005414 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	334d      	adds	r3, #77	@ 0x4d
 80052fe:	2202      	movs	r2, #2
 8005300:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005302:	78fa      	ldrb	r2, [r7, #3]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	1a9b      	subs	r3, r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	440b      	add	r3, r1
 8005310:	334c      	adds	r3, #76	@ 0x4c
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	3326      	adds	r3, #38	@ 0x26
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d00b      	beq.n	8005344 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	3326      	adds	r3, #38	@ 0x26
 800533c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800533e:	2b03      	cmp	r3, #3
 8005340:	f040 8190 	bne.w	8005664 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	799b      	ldrb	r3, [r3, #6]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d115      	bne.n	8005378 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	333d      	adds	r3, #61	@ 0x3d
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	f083 0301 	eor.w	r3, r3, #1
 8005364:	b2d8      	uxtb	r0, r3
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	333d      	adds	r3, #61	@ 0x3d
 8005374:	4602      	mov	r2, r0
 8005376:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	799b      	ldrb	r3, [r3, #6]
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 8171 	bne.w	8005664 <HCD_HC_OUT_IRQHandler+0x954>
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	3334      	adds	r3, #52	@ 0x34
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8165 	beq.w	8005664 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3334      	adds	r3, #52	@ 0x34
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4403      	add	r3, r0
 80053ba:	3328      	adds	r3, #40	@ 0x28
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	440b      	add	r3, r1
 80053c0:	1e59      	subs	r1, r3, #1
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4403      	add	r3, r0
 80053d0:	3328      	adds	r3, #40	@ 0x28
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80053d8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 813f 	beq.w	8005664 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	333d      	adds	r3, #61	@ 0x3d
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	f083 0301 	eor.w	r3, r3, #1
 80053fe:	b2d8      	uxtb	r0, r3
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	333d      	adds	r3, #61	@ 0x3d
 800540e:	4602      	mov	r2, r0
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e127      	b.n	8005664 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005414:	78fa      	ldrb	r2, [r7, #3]
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	334d      	adds	r3, #77	@ 0x4d
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d120      	bne.n	800546c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	334d      	adds	r3, #77	@ 0x4d
 800543a:	2202      	movs	r2, #2
 800543c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800543e:	78fa      	ldrb	r2, [r7, #3]
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	331b      	adds	r3, #27
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	f040 8107 	bne.w	8005664 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	334c      	adds	r3, #76	@ 0x4c
 8005466:	2202      	movs	r2, #2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e0fb      	b.n	8005664 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	334d      	adds	r3, #77	@ 0x4d
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b04      	cmp	r3, #4
 8005480:	d13a      	bne.n	80054f8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	334d      	adds	r3, #77	@ 0x4d
 8005492:	2202      	movs	r2, #2
 8005494:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	334c      	adds	r3, #76	@ 0x4c
 80054a6:	2202      	movs	r2, #2
 80054a8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	331b      	adds	r3, #27
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	f040 80d1 	bne.w	8005664 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	331b      	adds	r3, #27
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80054d6:	78fb      	ldrb	r3, [r7, #3]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f4:	6053      	str	r3, [r2, #4]
 80054f6:	e0b5      	b.n	8005664 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	334d      	adds	r3, #77	@ 0x4d
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b05      	cmp	r3, #5
 800550c:	d114      	bne.n	8005538 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	334d      	adds	r3, #77	@ 0x4d
 800551e:	2202      	movs	r2, #2
 8005520:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	334c      	adds	r3, #76	@ 0x4c
 8005532:	2202      	movs	r2, #2
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e095      	b.n	8005664 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	1a9b      	subs	r3, r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	334d      	adds	r3, #77	@ 0x4d
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b06      	cmp	r3, #6
 800554c:	d114      	bne.n	8005578 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	334d      	adds	r3, #77	@ 0x4d
 800555e:	2202      	movs	r2, #2
 8005560:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	334c      	adds	r3, #76	@ 0x4c
 8005572:	2205      	movs	r2, #5
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e075      	b.n	8005664 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	334d      	adds	r3, #77	@ 0x4d
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b07      	cmp	r3, #7
 800558c:	d00a      	beq.n	80055a4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	334d      	adds	r3, #77	@ 0x4d
 800559e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	d170      	bne.n	8005686 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055a4:	78fa      	ldrb	r2, [r7, #3]
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	334d      	adds	r3, #77	@ 0x4d
 80055b4:	2202      	movs	r2, #2
 80055b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	3344      	adds	r3, #68	@ 0x44
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4403      	add	r3, r0
 80055d8:	3344      	adds	r3, #68	@ 0x44
 80055da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80055dc:	78fa      	ldrb	r2, [r7, #3]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	3344      	adds	r3, #68	@ 0x44
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d914      	bls.n	800561c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	3344      	adds	r3, #68	@ 0x44
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	334c      	adds	r3, #76	@ 0x4c
 8005616:	2204      	movs	r2, #4
 8005618:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800561a:	e022      	b.n	8005662 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	334c      	adds	r3, #76	@ 0x4c
 800562c:	2202      	movs	r2, #2
 800562e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4413      	add	r3, r2
 8005638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005646:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800564e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800565c:	461a      	mov	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005662:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	334c      	adds	r3, #76	@ 0x4c
 8005674:	781a      	ldrb	r2, [r3, #0]
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f006 f862 	bl	800b744 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005680:	e002      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005686:	bf00      	nop
  }
}
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b08a      	sub	sp, #40	@ 0x28
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	0c5b      	lsrs	r3, r3, #17
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056c2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d004      	beq.n	80056d4 <HCD_RXQLVL_IRQHandler+0x46>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b05      	cmp	r3, #5
 80056ce:	f000 80b6 	beq.w	800583e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80056d2:	e0b7      	b.n	8005844 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80b3 	beq.w	8005842 <HCD_RXQLVL_IRQHandler+0x1b4>
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4613      	mov	r3, r2
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	332c      	adds	r3, #44	@ 0x2c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80a7 	beq.w	8005842 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4613      	mov	r3, r2
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	3338      	adds	r3, #56	@ 0x38
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	18d1      	adds	r1, r2, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	4613      	mov	r3, r2
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4403      	add	r3, r0
 8005718:	3334      	adds	r3, #52	@ 0x34
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4299      	cmp	r1, r3
 800571e:	f200 8083 	bhi.w	8005828 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4613      	mov	r3, r2
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	332c      	adds	r3, #44	@ 0x2c
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	b292      	uxth	r2, r2
 800573c:	4619      	mov	r1, r3
 800573e:	f002 fe8d 	bl	800845c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4613      	mov	r3, r2
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	332c      	adds	r3, #44	@ 0x2c
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	18d1      	adds	r1, r2, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4613      	mov	r3, r2
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4403      	add	r3, r0
 8005766:	332c      	adds	r3, #44	@ 0x2c
 8005768:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	3338      	adds	r3, #56	@ 0x38
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	18d1      	adds	r1, r2, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4613      	mov	r3, r2
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4403      	add	r3, r0
 800578e:	3338      	adds	r3, #56	@ 0x38
 8005790:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	4413      	add	r3, r2
 800579a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	0cdb      	lsrs	r3, r3, #19
 80057a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057a6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4613      	mov	r3, r2
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	3328      	adds	r3, #40	@ 0x28
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4293      	cmp	r3, r2
 80057c0:	d13f      	bne.n	8005842 <HCD_RXQLVL_IRQHandler+0x1b4>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d03c      	beq.n	8005842 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057de:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057e6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f4:	461a      	mov	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4613      	mov	r3, r2
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	333c      	adds	r3, #60	@ 0x3c
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f083 0301 	eor.w	r3, r3, #1
 8005810:	b2d8      	uxtb	r0, r3
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	333c      	adds	r3, #60	@ 0x3c
 8005822:	4602      	mov	r2, r0
 8005824:	701a      	strb	r2, [r3, #0]
      break;
 8005826:	e00c      	b.n	8005842 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	334c      	adds	r3, #76	@ 0x4c
 8005838:	2204      	movs	r2, #4
 800583a:	701a      	strb	r2, [r3, #0]
      break;
 800583c:	e001      	b.n	8005842 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005842:	bf00      	nop
  }
}
 8005844:	bf00      	nop
 8005846:	3728      	adds	r7, #40	@ 0x28
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005878:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d10b      	bne.n	800589c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b01      	cmp	r3, #1
 800588c:	d102      	bne.n	8005894 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f005 ff3c 	bl	800b70c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f043 0302 	orr.w	r3, r3, #2
 800589a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d132      	bne.n	800590c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f043 0308 	orr.w	r3, r3, #8
 80058ac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d126      	bne.n	8005906 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	7a5b      	ldrb	r3, [r3, #9]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d113      	bne.n	80058e8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80058c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058ca:	d106      	bne.n	80058da <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2102      	movs	r1, #2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f002 ff58 	bl	8008788 <USB_InitFSLSPClkSel>
 80058d8:	e011      	b.n	80058fe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2101      	movs	r1, #1
 80058e0:	4618      	mov	r0, r3
 80058e2:	f002 ff51 	bl	8008788 <USB_InitFSLSPClkSel>
 80058e6:	e00a      	b.n	80058fe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	79db      	ldrb	r3, [r3, #7]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d106      	bne.n	80058fe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058f6:	461a      	mov	r2, r3
 80058f8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80058fc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f005 ff2e 	bl	800b760 <HAL_HCD_PortEnabled_Callback>
 8005904:	e002      	b.n	800590c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f005 ff38 	bl	800b77c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b20      	cmp	r3, #32
 8005914:	d103      	bne.n	800591e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f043 0320 	orr.w	r3, r3, #32
 800591c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005924:	461a      	mov	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6013      	str	r3, [r2, #0]
}
 800592a:	bf00      	nop
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e12b      	b.n	8005b9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fc f8e2 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2224      	movs	r2, #36	@ 0x24
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005986:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005996:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005998:	f000 fd80 	bl	800649c <HAL_RCC_GetPCLK1Freq>
 800599c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4a81      	ldr	r2, [pc, #516]	@ (8005ba8 <HAL_I2C_Init+0x274>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d807      	bhi.n	80059b8 <HAL_I2C_Init+0x84>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a80      	ldr	r2, [pc, #512]	@ (8005bac <HAL_I2C_Init+0x278>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	bf94      	ite	ls
 80059b0:	2301      	movls	r3, #1
 80059b2:	2300      	movhi	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	e006      	b.n	80059c6 <HAL_I2C_Init+0x92>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4a7d      	ldr	r2, [pc, #500]	@ (8005bb0 <HAL_I2C_Init+0x27c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	bf94      	ite	ls
 80059c0:	2301      	movls	r3, #1
 80059c2:	2300      	movhi	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e0e7      	b.n	8005b9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a78      	ldr	r2, [pc, #480]	@ (8005bb4 <HAL_I2C_Init+0x280>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	0c9b      	lsrs	r3, r3, #18
 80059d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4a6a      	ldr	r2, [pc, #424]	@ (8005ba8 <HAL_I2C_Init+0x274>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d802      	bhi.n	8005a08 <HAL_I2C_Init+0xd4>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	3301      	adds	r3, #1
 8005a06:	e009      	b.n	8005a1c <HAL_I2C_Init+0xe8>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	4a69      	ldr	r2, [pc, #420]	@ (8005bb8 <HAL_I2C_Init+0x284>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	099b      	lsrs	r3, r3, #6
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	495c      	ldr	r1, [pc, #368]	@ (8005ba8 <HAL_I2C_Init+0x274>)
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	d819      	bhi.n	8005a70 <HAL_I2C_Init+0x13c>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1e59      	subs	r1, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a50:	400b      	ands	r3, r1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_I2C_Init+0x138>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1e59      	subs	r1, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a64:	3301      	adds	r3, #1
 8005a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6a:	e051      	b.n	8005b10 <HAL_I2C_Init+0x1dc>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	e04f      	b.n	8005b10 <HAL_I2C_Init+0x1dc>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d111      	bne.n	8005a9c <HAL_I2C_Init+0x168>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1e58      	subs	r0, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	440b      	add	r3, r1
 8005a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e012      	b.n	8005ac2 <HAL_I2C_Init+0x18e>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	1e58      	subs	r0, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6859      	ldr	r1, [r3, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	0099      	lsls	r1, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_I2C_Init+0x196>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e022      	b.n	8005b10 <HAL_I2C_Init+0x1dc>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10e      	bne.n	8005af0 <HAL_I2C_Init+0x1bc>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1e58      	subs	r0, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	440b      	add	r3, r1
 8005ae0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aee:	e00f      	b.n	8005b10 <HAL_I2C_Init+0x1dc>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1e58      	subs	r0, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6859      	ldr	r1, [r3, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	0099      	lsls	r1, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b06:	3301      	adds	r3, #1
 8005b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	6809      	ldr	r1, [r1, #0]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6911      	ldr	r1, [r2, #16]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68d2      	ldr	r2, [r2, #12]
 8005b4a:	4311      	orrs	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695a      	ldr	r2, [r3, #20]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	000186a0 	.word	0x000186a0
 8005bac:	001e847f 	.word	0x001e847f
 8005bb0:	003d08ff 	.word	0x003d08ff
 8005bb4:	431bde83 	.word	0x431bde83
 8005bb8:	10624dd3 	.word	0x10624dd3

08005bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e267      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d075      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bda:	4b88      	ldr	r3, [pc, #544]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 030c 	and.w	r3, r3, #12
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d00c      	beq.n	8005c00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005be6:	4b85      	ldr	r3, [pc, #532]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d112      	bne.n	8005c18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bf2:	4b82      	ldr	r3, [pc, #520]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bfe:	d10b      	bne.n	8005c18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c00:	4b7e      	ldr	r3, [pc, #504]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d05b      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x108>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d157      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e242      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c20:	d106      	bne.n	8005c30 <HAL_RCC_OscConfig+0x74>
 8005c22:	4b76      	ldr	r3, [pc, #472]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a75      	ldr	r2, [pc, #468]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e01d      	b.n	8005c6c <HAL_RCC_OscConfig+0xb0>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c38:	d10c      	bne.n	8005c54 <HAL_RCC_OscConfig+0x98>
 8005c3a:	4b70      	ldr	r3, [pc, #448]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a6f      	ldr	r2, [pc, #444]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	4b6d      	ldr	r3, [pc, #436]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6c      	ldr	r2, [pc, #432]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	e00b      	b.n	8005c6c <HAL_RCC_OscConfig+0xb0>
 8005c54:	4b69      	ldr	r3, [pc, #420]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a68      	ldr	r2, [pc, #416]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	4b66      	ldr	r3, [pc, #408]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a65      	ldr	r2, [pc, #404]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d013      	beq.n	8005c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c74:	f7fc f9fe 	bl	8002074 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c7c:	f7fc f9fa 	bl	8002074 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	@ 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e207      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0xc0>
 8005c9a:	e014      	b.n	8005cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fc f9ea 	bl	8002074 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca4:	f7fc f9e6 	bl	8002074 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	@ 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e1f3      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cb6:	4b51      	ldr	r3, [pc, #324]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <HAL_RCC_OscConfig+0xe8>
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d063      	beq.n	8005d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cde:	4b47      	ldr	r3, [pc, #284]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d11c      	bne.n	8005d24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cea:	4b44      	ldr	r3, [pc, #272]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d116      	bne.n	8005d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cf6:	4b41      	ldr	r3, [pc, #260]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_RCC_OscConfig+0x152>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d001      	beq.n	8005d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e1c7      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4937      	ldr	r1, [pc, #220]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d22:	e03a      	b.n	8005d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d020      	beq.n	8005d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d2c:	4b34      	ldr	r3, [pc, #208]	@ (8005e00 <HAL_RCC_OscConfig+0x244>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fc f99f 	bl	8002074 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3a:	f7fc f99b 	bl	8002074 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e1a8      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d58:	4b28      	ldr	r3, [pc, #160]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	4925      	ldr	r1, [pc, #148]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]
 8005d6c:	e015      	b.n	8005d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d6e:	4b24      	ldr	r3, [pc, #144]	@ (8005e00 <HAL_RCC_OscConfig+0x244>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d74:	f7fc f97e 	bl	8002074 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d7c:	f7fc f97a 	bl	8002074 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e187      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f0      	bne.n	8005d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d036      	beq.n	8005e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dae:	4b15      	ldr	r3, [pc, #84]	@ (8005e04 <HAL_RCC_OscConfig+0x248>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fc f95e 	bl	8002074 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dbc:	f7fc f95a 	bl	8002074 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e167      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dce:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f0      	beq.n	8005dbc <HAL_RCC_OscConfig+0x200>
 8005dda:	e01b      	b.n	8005e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ddc:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <HAL_RCC_OscConfig+0x248>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005de2:	f7fc f947 	bl	8002074 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de8:	e00e      	b.n	8005e08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dea:	f7fc f943 	bl	8002074 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d907      	bls.n	8005e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e150      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	42470000 	.word	0x42470000
 8005e04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e08:	4b88      	ldr	r3, [pc, #544]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1ea      	bne.n	8005dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 8097 	beq.w	8005f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e22:	2300      	movs	r3, #0
 8005e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e26:	4b81      	ldr	r3, [pc, #516]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10f      	bne.n	8005e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
 8005e36:	4b7d      	ldr	r3, [pc, #500]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	4a7c      	ldr	r2, [pc, #496]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e42:	4b7a      	ldr	r3, [pc, #488]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e4a:	60bb      	str	r3, [r7, #8]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e52:	4b77      	ldr	r3, [pc, #476]	@ (8006030 <HAL_RCC_OscConfig+0x474>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d118      	bne.n	8005e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e5e:	4b74      	ldr	r3, [pc, #464]	@ (8006030 <HAL_RCC_OscConfig+0x474>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a73      	ldr	r2, [pc, #460]	@ (8006030 <HAL_RCC_OscConfig+0x474>)
 8005e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e6a:	f7fc f903 	bl	8002074 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e72:	f7fc f8ff 	bl	8002074 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e10c      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e84:	4b6a      	ldr	r3, [pc, #424]	@ (8006030 <HAL_RCC_OscConfig+0x474>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d106      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x2ea>
 8005e98:	4b64      	ldr	r3, [pc, #400]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9c:	4a63      	ldr	r2, [pc, #396]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ea4:	e01c      	b.n	8005ee0 <HAL_RCC_OscConfig+0x324>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b05      	cmp	r3, #5
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x30c>
 8005eae:	4b5f      	ldr	r3, [pc, #380]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005eb4:	f043 0304 	orr.w	r3, r3, #4
 8005eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eba:	4b5c      	ldr	r3, [pc, #368]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0x324>
 8005ec8:	4b58      	ldr	r3, [pc, #352]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ecc:	4a57      	ldr	r2, [pc, #348]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005ece:	f023 0301 	bic.w	r3, r3, #1
 8005ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed4:	4b55      	ldr	r3, [pc, #340]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed8:	4a54      	ldr	r2, [pc, #336]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005eda:	f023 0304 	bic.w	r3, r3, #4
 8005ede:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d015      	beq.n	8005f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee8:	f7fc f8c4 	bl	8002074 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef0:	f7fc f8c0 	bl	8002074 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e0cb      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f06:	4b49      	ldr	r3, [pc, #292]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0ee      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x334>
 8005f12:	e014      	b.n	8005f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f14:	f7fc f8ae 	bl	8002074 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f1a:	e00a      	b.n	8005f32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1c:	f7fc f8aa 	bl	8002074 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e0b5      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f32:	4b3e      	ldr	r3, [pc, #248]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1ee      	bne.n	8005f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d105      	bne.n	8005f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f44:	4b39      	ldr	r3, [pc, #228]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f48:	4a38      	ldr	r2, [pc, #224]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80a1 	beq.w	800609c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f5a:	4b34      	ldr	r3, [pc, #208]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d05c      	beq.n	8006020 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d141      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f6e:	4b31      	ldr	r3, [pc, #196]	@ (8006034 <HAL_RCC_OscConfig+0x478>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f74:	f7fc f87e 	bl	8002074 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7c:	f7fc f87a 	bl	8002074 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e087      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8e:	4b27      	ldr	r3, [pc, #156]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69da      	ldr	r2, [r3, #28]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	019b      	lsls	r3, r3, #6
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	041b      	lsls	r3, r3, #16
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	061b      	lsls	r3, r3, #24
 8005fbe:	491b      	ldr	r1, [pc, #108]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8006034 <HAL_RCC_OscConfig+0x478>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fca:	f7fc f853 	bl	8002074 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd2:	f7fc f84f 	bl	8002074 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e05c      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe4:	4b11      	ldr	r3, [pc, #68]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x416>
 8005ff0:	e054      	b.n	800609c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff2:	4b10      	ldr	r3, [pc, #64]	@ (8006034 <HAL_RCC_OscConfig+0x478>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff8:	f7fc f83c 	bl	8002074 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006000:	f7fc f838 	bl	8002074 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e045      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006012:	4b06      	ldr	r3, [pc, #24]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x444>
 800601e:	e03d      	b.n	800609c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d107      	bne.n	8006038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e038      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
 800602c:	40023800 	.word	0x40023800
 8006030:	40007000 	.word	0x40007000
 8006034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006038:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <HAL_RCC_OscConfig+0x4ec>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d028      	beq.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006050:	429a      	cmp	r2, r3
 8006052:	d121      	bne.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605e:	429a      	cmp	r2, r3
 8006060:	d11a      	bne.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006068:	4013      	ands	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800606e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006070:	4293      	cmp	r3, r2
 8006072:	d111      	bne.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	3b01      	subs	r3, #1
 8006082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006084:	429a      	cmp	r2, r3
 8006086:	d107      	bne.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800

080060ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0cc      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060c0:	4b68      	ldr	r3, [pc, #416]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d90c      	bls.n	80060e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ce:	4b65      	ldr	r3, [pc, #404]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d6:	4b63      	ldr	r3, [pc, #396]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d001      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e0b8      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d020      	beq.n	8006136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006100:	4b59      	ldr	r3, [pc, #356]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	4a58      	ldr	r2, [pc, #352]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800610a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006118:	4b53      	ldr	r3, [pc, #332]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4a52      	ldr	r2, [pc, #328]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006124:	4b50      	ldr	r3, [pc, #320]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	494d      	ldr	r1, [pc, #308]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d044      	beq.n	80061cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d107      	bne.n	800615a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614a:	4b47      	ldr	r3, [pc, #284]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d119      	bne.n	800618a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e07f      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d003      	beq.n	800616a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006166:	2b03      	cmp	r3, #3
 8006168:	d107      	bne.n	800617a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616a:	4b3f      	ldr	r3, [pc, #252]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e06f      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617a:	4b3b      	ldr	r3, [pc, #236]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e067      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800618a:	4b37      	ldr	r3, [pc, #220]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f023 0203 	bic.w	r2, r3, #3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4934      	ldr	r1, [pc, #208]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	4313      	orrs	r3, r2
 800619a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800619c:	f7fb ff6a 	bl	8002074 <HAL_GetTick>
 80061a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a2:	e00a      	b.n	80061ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a4:	f7fb ff66 	bl	8002074 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e04f      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 020c 	and.w	r2, r3, #12
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d1eb      	bne.n	80061a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061cc:	4b25      	ldr	r3, [pc, #148]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d20c      	bcs.n	80061f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061da:	4b22      	ldr	r3, [pc, #136]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e2:	4b20      	ldr	r3, [pc, #128]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d001      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e032      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006200:	4b19      	ldr	r3, [pc, #100]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4916      	ldr	r1, [pc, #88]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800621e:	4b12      	ldr	r3, [pc, #72]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	490e      	ldr	r1, [pc, #56]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006232:	f000 f821 	bl	8006278 <HAL_RCC_GetSysClockFreq>
 8006236:	4602      	mov	r2, r0
 8006238:	4b0b      	ldr	r3, [pc, #44]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	490a      	ldr	r1, [pc, #40]	@ (800626c <HAL_RCC_ClockConfig+0x1c0>)
 8006244:	5ccb      	ldrb	r3, [r1, r3]
 8006246:	fa22 f303 	lsr.w	r3, r2, r3
 800624a:	4a09      	ldr	r2, [pc, #36]	@ (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 800624c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800624e:	4b09      	ldr	r3, [pc, #36]	@ (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7fb feca 	bl	8001fec <HAL_InitTick>

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40023c00 	.word	0x40023c00
 8006268:	40023800 	.word	0x40023800
 800626c:	0800be48 	.word	0x0800be48
 8006270:	20000000 	.word	0x20000000
 8006274:	20000004 	.word	0x20000004

08006278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800627c:	b094      	sub	sp, #80	@ 0x50
 800627e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006290:	4b79      	ldr	r3, [pc, #484]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 030c 	and.w	r3, r3, #12
 8006298:	2b08      	cmp	r3, #8
 800629a:	d00d      	beq.n	80062b8 <HAL_RCC_GetSysClockFreq+0x40>
 800629c:	2b08      	cmp	r3, #8
 800629e:	f200 80e1 	bhi.w	8006464 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0x34>
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d003      	beq.n	80062b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80062aa:	e0db      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062ac:	4b73      	ldr	r3, [pc, #460]	@ (800647c <HAL_RCC_GetSysClockFreq+0x204>)
 80062ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062b0:	e0db      	b.n	800646a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062b2:	4b73      	ldr	r3, [pc, #460]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x208>)
 80062b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062b6:	e0d8      	b.n	800646a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062b8:	4b6f      	ldr	r3, [pc, #444]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062c2:	4b6d      	ldr	r3, [pc, #436]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d063      	beq.n	8006396 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	099b      	lsrs	r3, r3, #6
 80062d4:	2200      	movs	r2, #0
 80062d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062e2:	2300      	movs	r3, #0
 80062e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062ea:	4622      	mov	r2, r4
 80062ec:	462b      	mov	r3, r5
 80062ee:	f04f 0000 	mov.w	r0, #0
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	0159      	lsls	r1, r3, #5
 80062f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062fc:	0150      	lsls	r0, r2, #5
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4621      	mov	r1, r4
 8006304:	1a51      	subs	r1, r2, r1
 8006306:	6139      	str	r1, [r7, #16]
 8006308:	4629      	mov	r1, r5
 800630a:	eb63 0301 	sbc.w	r3, r3, r1
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800631c:	4659      	mov	r1, fp
 800631e:	018b      	lsls	r3, r1, #6
 8006320:	4651      	mov	r1, sl
 8006322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006326:	4651      	mov	r1, sl
 8006328:	018a      	lsls	r2, r1, #6
 800632a:	4651      	mov	r1, sl
 800632c:	ebb2 0801 	subs.w	r8, r2, r1
 8006330:	4659      	mov	r1, fp
 8006332:	eb63 0901 	sbc.w	r9, r3, r1
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800634a:	4690      	mov	r8, r2
 800634c:	4699      	mov	r9, r3
 800634e:	4623      	mov	r3, r4
 8006350:	eb18 0303 	adds.w	r3, r8, r3
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	462b      	mov	r3, r5
 8006358:	eb49 0303 	adc.w	r3, r9, r3
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800636a:	4629      	mov	r1, r5
 800636c:	024b      	lsls	r3, r1, #9
 800636e:	4621      	mov	r1, r4
 8006370:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006374:	4621      	mov	r1, r4
 8006376:	024a      	lsls	r2, r1, #9
 8006378:	4610      	mov	r0, r2
 800637a:	4619      	mov	r1, r3
 800637c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637e:	2200      	movs	r2, #0
 8006380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006388:	f7f9 ff1e 	bl	80001c8 <__aeabi_uldivmod>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4613      	mov	r3, r2
 8006392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006394:	e058      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006396:	4b38      	ldr	r3, [pc, #224]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	099b      	lsrs	r3, r3, #6
 800639c:	2200      	movs	r2, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	4611      	mov	r1, r2
 80063a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063a6:	623b      	str	r3, [r7, #32]
 80063a8:	2300      	movs	r3, #0
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	f04f 0000 	mov.w	r0, #0
 80063b8:	f04f 0100 	mov.w	r1, #0
 80063bc:	0159      	lsls	r1, r3, #5
 80063be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063c2:	0150      	lsls	r0, r2, #5
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4641      	mov	r1, r8
 80063ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80063ce:	4649      	mov	r1, r9
 80063d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063e8:	ebb2 040a 	subs.w	r4, r2, sl
 80063ec:	eb63 050b 	sbc.w	r5, r3, fp
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	00eb      	lsls	r3, r5, #3
 80063fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063fe:	00e2      	lsls	r2, r4, #3
 8006400:	4614      	mov	r4, r2
 8006402:	461d      	mov	r5, r3
 8006404:	4643      	mov	r3, r8
 8006406:	18e3      	adds	r3, r4, r3
 8006408:	603b      	str	r3, [r7, #0]
 800640a:	464b      	mov	r3, r9
 800640c:	eb45 0303 	adc.w	r3, r5, r3
 8006410:	607b      	str	r3, [r7, #4]
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800641e:	4629      	mov	r1, r5
 8006420:	028b      	lsls	r3, r1, #10
 8006422:	4621      	mov	r1, r4
 8006424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006428:	4621      	mov	r1, r4
 800642a:	028a      	lsls	r2, r1, #10
 800642c:	4610      	mov	r0, r2
 800642e:	4619      	mov	r1, r3
 8006430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006432:	2200      	movs	r2, #0
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	61fa      	str	r2, [r7, #28]
 8006438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800643c:	f7f9 fec4 	bl	80001c8 <__aeabi_uldivmod>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4613      	mov	r3, r2
 8006446:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006448:	4b0b      	ldr	r3, [pc, #44]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	0c1b      	lsrs	r3, r3, #16
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	3301      	adds	r3, #1
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006458:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800645a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006462:	e002      	b.n	800646a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006464:	4b05      	ldr	r3, [pc, #20]	@ (800647c <HAL_RCC_GetSysClockFreq+0x204>)
 8006466:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800646a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800646c:	4618      	mov	r0, r3
 800646e:	3750      	adds	r7, #80	@ 0x50
 8006470:	46bd      	mov	sp, r7
 8006472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006476:	bf00      	nop
 8006478:	40023800 	.word	0x40023800
 800647c:	00f42400 	.word	0x00f42400
 8006480:	007a1200 	.word	0x007a1200

08006484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006488:	4b03      	ldr	r3, [pc, #12]	@ (8006498 <HAL_RCC_GetHCLKFreq+0x14>)
 800648a:	681b      	ldr	r3, [r3, #0]
}
 800648c:	4618      	mov	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	20000000 	.word	0x20000000

0800649c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064a0:	f7ff fff0 	bl	8006484 <HAL_RCC_GetHCLKFreq>
 80064a4:	4602      	mov	r2, r0
 80064a6:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	0a9b      	lsrs	r3, r3, #10
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	4903      	ldr	r1, [pc, #12]	@ (80064c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064b2:	5ccb      	ldrb	r3, [r1, r3]
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40023800 	.word	0x40023800
 80064c0:	0800be58 	.word	0x0800be58

080064c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064c8:	f7ff ffdc 	bl	8006484 <HAL_RCC_GetHCLKFreq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	0b5b      	lsrs	r3, r3, #13
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	4903      	ldr	r1, [pc, #12]	@ (80064e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064da:	5ccb      	ldrb	r3, [r1, r3]
 80064dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40023800 	.word	0x40023800
 80064e8:	0800be58 	.word	0x0800be58

080064ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e07b      	b.n	80065f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d108      	bne.n	8006518 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800650e:	d009      	beq.n	8006524 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	61da      	str	r2, [r3, #28]
 8006516:	e005      	b.n	8006524 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fb fb38 	bl	8001bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800655a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a8:	ea42 0103 	orr.w	r1, r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	0c1b      	lsrs	r3, r3, #16
 80065c2:	f003 0104 	and.w	r1, r3, #4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	f003 0210 	and.w	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e041      	b.n	8006694 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fb fb0d 	bl	8001c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f000 fad9 	bl	8006bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e041      	b.n	8006732 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f839 	bl	800673a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f000 fa8a 	bl	8006bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <HAL_TIM_PWM_Start+0x24>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	e022      	b.n	80067ba <HAL_TIM_PWM_Start+0x6a>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b04      	cmp	r3, #4
 8006778:	d109      	bne.n	800678e <HAL_TIM_PWM_Start+0x3e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	bf14      	ite	ne
 8006786:	2301      	movne	r3, #1
 8006788:	2300      	moveq	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	e015      	b.n	80067ba <HAL_TIM_PWM_Start+0x6a>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d109      	bne.n	80067a8 <HAL_TIM_PWM_Start+0x58>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	e008      	b.n	80067ba <HAL_TIM_PWM_Start+0x6a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	bf14      	ite	ne
 80067b4:	2301      	movne	r3, #1
 80067b6:	2300      	moveq	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e07c      	b.n	80068bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_PWM_Start+0x82>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067d0:	e013      	b.n	80067fa <HAL_TIM_PWM_Start+0xaa>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_PWM_Start+0x92>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067e0:	e00b      	b.n	80067fa <HAL_TIM_PWM_Start+0xaa>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_PWM_Start+0xa2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067f0:	e003      	b.n	80067fa <HAL_TIM_PWM_Start+0xaa>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2201      	movs	r2, #1
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fce6 	bl	80071d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a2d      	ldr	r2, [pc, #180]	@ (80068c4 <HAL_TIM_PWM_Start+0x174>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <HAL_TIM_PWM_Start+0xcc>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a2c      	ldr	r2, [pc, #176]	@ (80068c8 <HAL_TIM_PWM_Start+0x178>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d101      	bne.n	8006820 <HAL_TIM_PWM_Start+0xd0>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <HAL_TIM_PWM_Start+0xd2>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006834:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a22      	ldr	r2, [pc, #136]	@ (80068c4 <HAL_TIM_PWM_Start+0x174>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d022      	beq.n	8006886 <HAL_TIM_PWM_Start+0x136>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006848:	d01d      	beq.n	8006886 <HAL_TIM_PWM_Start+0x136>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1f      	ldr	r2, [pc, #124]	@ (80068cc <HAL_TIM_PWM_Start+0x17c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d018      	beq.n	8006886 <HAL_TIM_PWM_Start+0x136>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1d      	ldr	r2, [pc, #116]	@ (80068d0 <HAL_TIM_PWM_Start+0x180>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <HAL_TIM_PWM_Start+0x136>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1c      	ldr	r2, [pc, #112]	@ (80068d4 <HAL_TIM_PWM_Start+0x184>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00e      	beq.n	8006886 <HAL_TIM_PWM_Start+0x136>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a16      	ldr	r2, [pc, #88]	@ (80068c8 <HAL_TIM_PWM_Start+0x178>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d009      	beq.n	8006886 <HAL_TIM_PWM_Start+0x136>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a18      	ldr	r2, [pc, #96]	@ (80068d8 <HAL_TIM_PWM_Start+0x188>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d004      	beq.n	8006886 <HAL_TIM_PWM_Start+0x136>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <HAL_TIM_PWM_Start+0x18c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d111      	bne.n	80068aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b06      	cmp	r3, #6
 8006896:	d010      	beq.n	80068ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a8:	e007      	b.n	80068ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40010400 	.word	0x40010400
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40001800 	.word	0x40001800

080068e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e0ae      	b.n	8006a5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b0c      	cmp	r3, #12
 800690a:	f200 809f 	bhi.w	8006a4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800690e:	a201      	add	r2, pc, #4	@ (adr r2, 8006914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	08006949 	.word	0x08006949
 8006918:	08006a4d 	.word	0x08006a4d
 800691c:	08006a4d 	.word	0x08006a4d
 8006920:	08006a4d 	.word	0x08006a4d
 8006924:	08006989 	.word	0x08006989
 8006928:	08006a4d 	.word	0x08006a4d
 800692c:	08006a4d 	.word	0x08006a4d
 8006930:	08006a4d 	.word	0x08006a4d
 8006934:	080069cb 	.word	0x080069cb
 8006938:	08006a4d 	.word	0x08006a4d
 800693c:	08006a4d 	.word	0x08006a4d
 8006940:	08006a4d 	.word	0x08006a4d
 8006944:	08006a0b 	.word	0x08006a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f9f6 	bl	8006d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0208 	orr.w	r2, r2, #8
 8006962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0204 	bic.w	r2, r2, #4
 8006972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6999      	ldr	r1, [r3, #24]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	619a      	str	r2, [r3, #24]
      break;
 8006986:	e064      	b.n	8006a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fa46 	bl	8006e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6999      	ldr	r1, [r3, #24]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	021a      	lsls	r2, r3, #8
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	619a      	str	r2, [r3, #24]
      break;
 80069c8:	e043      	b.n	8006a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fa9b 	bl	8006f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0208 	orr.w	r2, r2, #8
 80069e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0204 	bic.w	r2, r2, #4
 80069f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69d9      	ldr	r1, [r3, #28]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	61da      	str	r2, [r3, #28]
      break;
 8006a08:	e023      	b.n	8006a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 faef 	bl	8006ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69d9      	ldr	r1, [r3, #28]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	021a      	lsls	r2, r3, #8
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	61da      	str	r2, [r3, #28]
      break;
 8006a4a:	e002      	b.n	8006a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIM_ConfigClockSource+0x1c>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e0b4      	b.n	8006bea <HAL_TIM_ConfigClockSource+0x186>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab8:	d03e      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0xd4>
 8006aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006abe:	f200 8087 	bhi.w	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac6:	f000 8086 	beq.w	8006bd6 <HAL_TIM_ConfigClockSource+0x172>
 8006aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ace:	d87f      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b70      	cmp	r3, #112	@ 0x70
 8006ad2:	d01a      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0xa6>
 8006ad4:	2b70      	cmp	r3, #112	@ 0x70
 8006ad6:	d87b      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad8:	2b60      	cmp	r3, #96	@ 0x60
 8006ada:	d050      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x11a>
 8006adc:	2b60      	cmp	r3, #96	@ 0x60
 8006ade:	d877      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae0:	2b50      	cmp	r3, #80	@ 0x50
 8006ae2:	d03c      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0xfa>
 8006ae4:	2b50      	cmp	r3, #80	@ 0x50
 8006ae6:	d873      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae8:	2b40      	cmp	r3, #64	@ 0x40
 8006aea:	d058      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x13a>
 8006aec:	2b40      	cmp	r3, #64	@ 0x40
 8006aee:	d86f      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006af0:	2b30      	cmp	r3, #48	@ 0x30
 8006af2:	d064      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006af4:	2b30      	cmp	r3, #48	@ 0x30
 8006af6:	d86b      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d060      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d867      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d05c      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d05a      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006b08:	e062      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b1a:	f000 fb3b 	bl	8007194 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	609a      	str	r2, [r3, #8]
      break;
 8006b36:	e04f      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b48:	f000 fb24 	bl	8007194 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b5a:	609a      	str	r2, [r3, #8]
      break;
 8006b5c:	e03c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f000 fa98 	bl	80070a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2150      	movs	r1, #80	@ 0x50
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 faf1 	bl	800715e <TIM_ITRx_SetConfig>
      break;
 8006b7c:	e02c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f000 fab7 	bl	80070fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2160      	movs	r1, #96	@ 0x60
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fae1 	bl	800715e <TIM_ITRx_SetConfig>
      break;
 8006b9c:	e01c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006baa:	461a      	mov	r2, r3
 8006bac:	f000 fa78 	bl	80070a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2140      	movs	r1, #64	@ 0x40
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fad1 	bl	800715e <TIM_ITRx_SetConfig>
      break;
 8006bbc:	e00c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f000 fac8 	bl	800715e <TIM_ITRx_SetConfig>
      break;
 8006bce:	e003      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	e000      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a43      	ldr	r2, [pc, #268]	@ (8006d14 <TIM_Base_SetConfig+0x120>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d013      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c12:	d00f      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a40      	ldr	r2, [pc, #256]	@ (8006d18 <TIM_Base_SetConfig+0x124>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00b      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8006d1c <TIM_Base_SetConfig+0x128>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d007      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a3e      	ldr	r2, [pc, #248]	@ (8006d20 <TIM_Base_SetConfig+0x12c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d003      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a3d      	ldr	r2, [pc, #244]	@ (8006d24 <TIM_Base_SetConfig+0x130>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d108      	bne.n	8006c46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a32      	ldr	r2, [pc, #200]	@ (8006d14 <TIM_Base_SetConfig+0x120>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d02b      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c54:	d027      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2f      	ldr	r2, [pc, #188]	@ (8006d18 <TIM_Base_SetConfig+0x124>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d023      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2e      	ldr	r2, [pc, #184]	@ (8006d1c <TIM_Base_SetConfig+0x128>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d01f      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2d      	ldr	r2, [pc, #180]	@ (8006d20 <TIM_Base_SetConfig+0x12c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01b      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a2c      	ldr	r2, [pc, #176]	@ (8006d24 <TIM_Base_SetConfig+0x130>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d017      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a2b      	ldr	r2, [pc, #172]	@ (8006d28 <TIM_Base_SetConfig+0x134>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a2a      	ldr	r2, [pc, #168]	@ (8006d2c <TIM_Base_SetConfig+0x138>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00f      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a29      	ldr	r2, [pc, #164]	@ (8006d30 <TIM_Base_SetConfig+0x13c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00b      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a28      	ldr	r2, [pc, #160]	@ (8006d34 <TIM_Base_SetConfig+0x140>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d007      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a27      	ldr	r2, [pc, #156]	@ (8006d38 <TIM_Base_SetConfig+0x144>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d003      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a26      	ldr	r2, [pc, #152]	@ (8006d3c <TIM_Base_SetConfig+0x148>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d108      	bne.n	8006cb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8006d14 <TIM_Base_SetConfig+0x120>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_Base_SetConfig+0xf2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a10      	ldr	r2, [pc, #64]	@ (8006d24 <TIM_Base_SetConfig+0x130>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d103      	bne.n	8006cee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f043 0204 	orr.w	r2, r3, #4
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	601a      	str	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40010400 	.word	0x40010400
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40014400 	.word	0x40014400
 8006d30:	40014800 	.word	0x40014800
 8006d34:	40001800 	.word	0x40001800
 8006d38:	40001c00 	.word	0x40001c00
 8006d3c:	40002000 	.word	0x40002000

08006d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	f023 0201 	bic.w	r2, r3, #1
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 0302 	bic.w	r3, r3, #2
 8006d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a20      	ldr	r2, [pc, #128]	@ (8006e18 <TIM_OC1_SetConfig+0xd8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_OC1_SetConfig+0x64>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006e1c <TIM_OC1_SetConfig+0xdc>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d10c      	bne.n	8006dbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 0308 	bic.w	r3, r3, #8
 8006daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f023 0304 	bic.w	r3, r3, #4
 8006dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a15      	ldr	r2, [pc, #84]	@ (8006e18 <TIM_OC1_SetConfig+0xd8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC1_SetConfig+0x8e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a14      	ldr	r2, [pc, #80]	@ (8006e1c <TIM_OC1_SetConfig+0xdc>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d111      	bne.n	8006df2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	621a      	str	r2, [r3, #32]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40010400 	.word	0x40010400

08006e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	f023 0210 	bic.w	r2, r3, #16
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0320 	bic.w	r3, r3, #32
 8006e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a22      	ldr	r2, [pc, #136]	@ (8006f04 <TIM_OC2_SetConfig+0xe4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_OC2_SetConfig+0x68>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a21      	ldr	r2, [pc, #132]	@ (8006f08 <TIM_OC2_SetConfig+0xe8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d10d      	bne.n	8006ea4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ea2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a17      	ldr	r2, [pc, #92]	@ (8006f04 <TIM_OC2_SetConfig+0xe4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_OC2_SetConfig+0x94>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a16      	ldr	r2, [pc, #88]	@ (8006f08 <TIM_OC2_SetConfig+0xe8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d113      	bne.n	8006edc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40010400 	.word	0x40010400

08006f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a21      	ldr	r2, [pc, #132]	@ (8006fec <TIM_OC3_SetConfig+0xe0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_OC3_SetConfig+0x66>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a20      	ldr	r2, [pc, #128]	@ (8006ff0 <TIM_OC3_SetConfig+0xe4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d10d      	bne.n	8006f8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a16      	ldr	r2, [pc, #88]	@ (8006fec <TIM_OC3_SetConfig+0xe0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <TIM_OC3_SetConfig+0x92>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a15      	ldr	r2, [pc, #84]	@ (8006ff0 <TIM_OC3_SetConfig+0xe4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d113      	bne.n	8006fc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	621a      	str	r2, [r3, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	40010000 	.word	0x40010000
 8006ff0:	40010400 	.word	0x40010400

08006ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800702a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800703e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a12      	ldr	r2, [pc, #72]	@ (8007098 <TIM_OC4_SetConfig+0xa4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_OC4_SetConfig+0x68>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a11      	ldr	r2, [pc, #68]	@ (800709c <TIM_OC4_SetConfig+0xa8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d109      	bne.n	8007070 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	019b      	lsls	r3, r3, #6
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	621a      	str	r2, [r3, #32]
}
 800708a:	bf00      	nop
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	40010000 	.word	0x40010000
 800709c:	40010400 	.word	0x40010400

080070a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f023 0201 	bic.w	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f023 030a 	bic.w	r3, r3, #10
 80070dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070fe:	b480      	push	{r7}
 8007100:	b087      	sub	sp, #28
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	f023 0210 	bic.w	r2, r3, #16
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	031b      	lsls	r3, r3, #12
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800713a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	f043 0307 	orr.w	r3, r3, #7
 8007180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	609a      	str	r2, [r3, #8]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	021a      	lsls	r2, r3, #8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	609a      	str	r2, [r3, #8]
}
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	2201      	movs	r2, #1
 80071e8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a1a      	ldr	r2, [r3, #32]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	43db      	mvns	r3, r3
 80071f6:	401a      	ands	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1a      	ldr	r2, [r3, #32]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	fa01 f303 	lsl.w	r3, r1, r3
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e05a      	b.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a21      	ldr	r2, [pc, #132]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d022      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007284:	d01d      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1d      	ldr	r2, [pc, #116]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1b      	ldr	r2, [pc, #108]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1a      	ldr	r2, [pc, #104]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a18      	ldr	r2, [pc, #96]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a17      	ldr	r2, [pc, #92]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a15      	ldr	r2, [pc, #84]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d10c      	bne.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40010000 	.word	0x40010000
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40010400 	.word	0x40010400
 8007310:	40014000 	.word	0x40014000
 8007314:	40001800 	.word	0x40001800

08007318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e042      	b.n	80073b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fa fcf2 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2224      	movs	r2, #36	@ 0x24
 8007348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800735a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fc99 	bl	8007c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695a      	ldr	r2, [r3, #20]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b0ba      	sub	sp, #232	@ 0xe8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80073de:	2300      	movs	r3, #0
 80073e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80073f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10f      	bne.n	800741e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <HAL_UART_IRQHandler+0x66>
 800740a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fb7e 	bl	8007b18 <UART_Receive_IT>
      return;
 800741c:	e273      	b.n	8007906 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800741e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 80de 	beq.w	80075e4 <HAL_UART_IRQHandler+0x22c>
 8007428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007438:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80d1 	beq.w	80075e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <HAL_UART_IRQHandler+0xae>
 800744e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745e:	f043 0201 	orr.w	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <HAL_UART_IRQHandler+0xd2>
 8007472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007482:	f043 0202 	orr.w	r2, r3, #2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800748a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <HAL_UART_IRQHandler+0xf6>
 8007496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a6:	f043 0204 	orr.w	r2, r3, #4
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d011      	beq.n	80074de <HAL_UART_IRQHandler+0x126>
 80074ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d6:	f043 0208 	orr.w	r2, r3, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 820a 	beq.w	80078fc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <HAL_UART_IRQHandler+0x14e>
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb09 	bl	8007b18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b40      	cmp	r3, #64	@ 0x40
 8007512:	bf0c      	ite	eq
 8007514:	2301      	moveq	r3, #1
 8007516:	2300      	movne	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <HAL_UART_IRQHandler+0x17a>
 800752a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d04f      	beq.n	80075d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa14 	bl	8007960 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b40      	cmp	r3, #64	@ 0x40
 8007544:	d141      	bne.n	80075ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3314      	adds	r3, #20
 800754c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800755c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3314      	adds	r3, #20
 800756e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007572:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800757e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800758a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1d9      	bne.n	8007546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d013      	beq.n	80075c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759e:	4a8a      	ldr	r2, [pc, #552]	@ (80077c8 <HAL_UART_IRQHandler+0x410>)
 80075a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fb fc1e 	bl	8002de8 <HAL_DMA_Abort_IT>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d016      	beq.n	80075e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c0:	e00e      	b.n	80075e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f9b6 	bl	8007934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c8:	e00a      	b.n	80075e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9b2 	bl	8007934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	e006      	b.n	80075e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f9ae 	bl	8007934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80075de:	e18d      	b.n	80078fc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e0:	bf00      	nop
    return;
 80075e2:	e18b      	b.n	80078fc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	f040 8167 	bne.w	80078bc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8160 	beq.w	80078bc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80075fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8159 	beq.w	80078bc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60bb      	str	r3, [r7, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	60bb      	str	r3, [r7, #8]
 800761e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762a:	2b40      	cmp	r3, #64	@ 0x40
 800762c:	f040 80ce 	bne.w	80077cc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800763c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 80a9 	beq.w	8007798 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800764a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800764e:	429a      	cmp	r2, r3
 8007650:	f080 80a2 	bcs.w	8007798 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800765a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007666:	f000 8088 	beq.w	800777a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	330c      	adds	r3, #12
 8007670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007680:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007688:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	330c      	adds	r3, #12
 8007692:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007696:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800769a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1d9      	bne.n	800766a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3314      	adds	r3, #20
 80076bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3314      	adds	r3, #20
 80076d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e1      	bne.n	80076b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3314      	adds	r3, #20
 80076f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3314      	adds	r3, #20
 8007712:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007716:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007718:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800771c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e3      	bne.n	80076f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800774a:	f023 0310 	bic.w	r3, r3, #16
 800774e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800775c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800775e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007762:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800776a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e3      	bne.n	8007738 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007774:	4618      	mov	r0, r3
 8007776:	f7fb fac7 	bl	8002d08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2202      	movs	r2, #2
 800777e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007788:	b29b      	uxth	r3, r3
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	b29b      	uxth	r3, r3
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f8d9 	bl	8007948 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007796:	e0b3      	b.n	8007900 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800779c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077a0:	429a      	cmp	r2, r3
 80077a2:	f040 80ad 	bne.w	8007900 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077b0:	f040 80a6 	bne.w	8007900 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f8c1 	bl	8007948 <HAL_UARTEx_RxEventCallback>
      return;
 80077c6:	e09b      	b.n	8007900 <HAL_UART_IRQHandler+0x548>
 80077c8:	08007a27 	.word	0x08007a27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 808e 	beq.w	8007904 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80077e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8089 	beq.w	8007904 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	330c      	adds	r3, #12
 80077f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007808:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007816:	647a      	str	r2, [r7, #68]	@ 0x44
 8007818:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800781c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e3      	bne.n	80077f2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3314      	adds	r3, #20
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	623b      	str	r3, [r7, #32]
   return(result);
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3314      	adds	r3, #20
 800784a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800784e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e3      	bne.n	800782a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	330c      	adds	r3, #12
 8007876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0310 	bic.w	r3, r3, #16
 8007886:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007894:	61fa      	str	r2, [r7, #28]
 8007896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	69b9      	ldr	r1, [r7, #24]
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	617b      	str	r3, [r7, #20]
   return(result);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e3      	bne.n	8007870 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f847 	bl	8007948 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078ba:	e023      	b.n	8007904 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d009      	beq.n	80078dc <HAL_UART_IRQHandler+0x524>
 80078c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f8b7 	bl	8007a48 <UART_Transmit_IT>
    return;
 80078da:	e014      	b.n	8007906 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00e      	beq.n	8007906 <HAL_UART_IRQHandler+0x54e>
 80078e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f8f7 	bl	8007ae8 <UART_EndTransmit_IT>
    return;
 80078fa:	e004      	b.n	8007906 <HAL_UART_IRQHandler+0x54e>
    return;
 80078fc:	bf00      	nop
 80078fe:	e002      	b.n	8007906 <HAL_UART_IRQHandler+0x54e>
      return;
 8007900:	bf00      	nop
 8007902:	e000      	b.n	8007906 <HAL_UART_IRQHandler+0x54e>
      return;
 8007904:	bf00      	nop
  }
}
 8007906:	37e8      	adds	r7, #232	@ 0xe8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b095      	sub	sp, #84	@ 0x54
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	330c      	adds	r3, #12
 800796e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800797e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	330c      	adds	r3, #12
 8007986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007988:	643a      	str	r2, [r7, #64]	@ 0x40
 800798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800798e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e5      	bne.n	8007968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3314      	adds	r3, #20
 80079a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3314      	adds	r3, #20
 80079ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e5      	bne.n	800799c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d119      	bne.n	8007a0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	330c      	adds	r3, #12
 80079de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f023 0310 	bic.w	r3, r3, #16
 80079ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079f8:	61ba      	str	r2, [r7, #24]
 80079fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6979      	ldr	r1, [r7, #20]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	613b      	str	r3, [r7, #16]
   return(result);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a1a:	bf00      	nop
 8007a1c:	3754      	adds	r7, #84	@ 0x54
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f7ff ff7a 	bl	8007934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b21      	cmp	r3, #33	@ 0x21
 8007a5a:	d13e      	bne.n	8007ada <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a64:	d114      	bne.n	8007a90 <UART_Transmit_IT+0x48>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d110      	bne.n	8007a90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	1c9a      	adds	r2, r3, #2
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	621a      	str	r2, [r3, #32]
 8007a8e:	e008      	b.n	8007aa2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	1c59      	adds	r1, r3, #1
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6211      	str	r1, [r2, #32]
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10f      	bne.n	8007ad6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ac4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ad4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e000      	b.n	8007adc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ada:	2302      	movs	r3, #2
  }
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007afe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff feff 	bl	800790c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08c      	sub	sp, #48	@ 0x30
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b22      	cmp	r3, #34	@ 0x22
 8007b32:	f040 80aa 	bne.w	8007c8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b3e:	d115      	bne.n	8007b6c <UART_Receive_IT+0x54>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d111      	bne.n	8007b6c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	1c9a      	adds	r2, r3, #2
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b6a:	e024      	b.n	8007bb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b7a:	d007      	beq.n	8007b8c <UART_Receive_IT+0x74>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <UART_Receive_IT+0x82>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	e008      	b.n	8007bac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007baa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d15d      	bne.n	8007c86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0220 	bic.w	r2, r2, #32
 8007bd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007be8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0201 	bic.w	r2, r2, #1
 8007bf8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d135      	bne.n	8007c7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	330c      	adds	r3, #12
 8007c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	613b      	str	r3, [r7, #16]
   return(result);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f023 0310 	bic.w	r3, r3, #16
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c36:	623a      	str	r2, [r7, #32]
 8007c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	69f9      	ldr	r1, [r7, #28]
 8007c3c:	6a3a      	ldr	r2, [r7, #32]
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e5      	bne.n	8007c16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0310 	and.w	r3, r3, #16
 8007c54:	2b10      	cmp	r3, #16
 8007c56:	d10a      	bne.n	8007c6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff fe67 	bl	8007948 <HAL_UARTEx_RxEventCallback>
 8007c7a:	e002      	b.n	8007c82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fe4f 	bl	8007920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e002      	b.n	8007c8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e000      	b.n	8007c8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007c8a:	2302      	movs	r3, #2
  }
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3730      	adds	r7, #48	@ 0x30
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c98:	b0c0      	sub	sp, #256	@ 0x100
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb0:	68d9      	ldr	r1, [r3, #12]
 8007cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	ea40 0301 	orr.w	r3, r0, r1
 8007cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007cec:	f021 010c 	bic.w	r1, r1, #12
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cfa:	430b      	orrs	r3, r1
 8007cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d0e:	6999      	ldr	r1, [r3, #24]
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	ea40 0301 	orr.w	r3, r0, r1
 8007d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b8f      	ldr	r3, [pc, #572]	@ (8007f60 <UART_SetConfig+0x2cc>)
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d005      	beq.n	8007d34 <UART_SetConfig+0xa0>
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8007f64 <UART_SetConfig+0x2d0>)
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d104      	bne.n	8007d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d34:	f7fe fbc6 	bl	80064c4 <HAL_RCC_GetPCLK2Freq>
 8007d38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d3c:	e003      	b.n	8007d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d3e:	f7fe fbad 	bl	800649c <HAL_RCC_GetPCLK1Freq>
 8007d42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d50:	f040 810c 	bne.w	8007f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d66:	4622      	mov	r2, r4
 8007d68:	462b      	mov	r3, r5
 8007d6a:	1891      	adds	r1, r2, r2
 8007d6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007d6e:	415b      	adcs	r3, r3
 8007d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d76:	4621      	mov	r1, r4
 8007d78:	eb12 0801 	adds.w	r8, r2, r1
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	eb43 0901 	adc.w	r9, r3, r1
 8007d82:	f04f 0200 	mov.w	r2, #0
 8007d86:	f04f 0300 	mov.w	r3, #0
 8007d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d96:	4690      	mov	r8, r2
 8007d98:	4699      	mov	r9, r3
 8007d9a:	4623      	mov	r3, r4
 8007d9c:	eb18 0303 	adds.w	r3, r8, r3
 8007da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007da4:	462b      	mov	r3, r5
 8007da6:	eb49 0303 	adc.w	r3, r9, r3
 8007daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	18db      	adds	r3, r3, r3
 8007dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dc8:	4613      	mov	r3, r2
 8007dca:	eb42 0303 	adc.w	r3, r2, r3
 8007dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007dd8:	f7f8 f9f6 	bl	80001c8 <__aeabi_uldivmod>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4b61      	ldr	r3, [pc, #388]	@ (8007f68 <UART_SetConfig+0x2d4>)
 8007de2:	fba3 2302 	umull	r2, r3, r3, r2
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	011c      	lsls	r4, r3, #4
 8007dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007df4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	464b      	mov	r3, r9
 8007e00:	1891      	adds	r1, r2, r2
 8007e02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e04:	415b      	adcs	r3, r3
 8007e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e12:	4649      	mov	r1, r9
 8007e14:	eb43 0b01 	adc.w	fp, r3, r1
 8007e18:	f04f 0200 	mov.w	r2, #0
 8007e1c:	f04f 0300 	mov.w	r3, #0
 8007e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e2c:	4692      	mov	sl, r2
 8007e2e:	469b      	mov	fp, r3
 8007e30:	4643      	mov	r3, r8
 8007e32:	eb1a 0303 	adds.w	r3, sl, r3
 8007e36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8007e40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	18db      	adds	r3, r3, r3
 8007e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e5e:	4613      	mov	r3, r2
 8007e60:	eb42 0303 	adc.w	r3, r2, r3
 8007e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007e6e:	f7f8 f9ab 	bl	80001c8 <__aeabi_uldivmod>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4611      	mov	r1, r2
 8007e78:	4b3b      	ldr	r3, [pc, #236]	@ (8007f68 <UART_SetConfig+0x2d4>)
 8007e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	2264      	movs	r2, #100	@ 0x64
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
 8007e86:	1acb      	subs	r3, r1, r3
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e8e:	4b36      	ldr	r3, [pc, #216]	@ (8007f68 <UART_SetConfig+0x2d4>)
 8007e90:	fba3 2302 	umull	r2, r3, r3, r2
 8007e94:	095b      	lsrs	r3, r3, #5
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e9c:	441c      	add	r4, r3
 8007e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	464b      	mov	r3, r9
 8007eb4:	1891      	adds	r1, r2, r2
 8007eb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007eb8:	415b      	adcs	r3, r3
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ec0:	4641      	mov	r1, r8
 8007ec2:	1851      	adds	r1, r2, r1
 8007ec4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	414b      	adcs	r3, r1
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ed8:	4659      	mov	r1, fp
 8007eda:	00cb      	lsls	r3, r1, #3
 8007edc:	4651      	mov	r1, sl
 8007ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ee2:	4651      	mov	r1, sl
 8007ee4:	00ca      	lsls	r2, r1, #3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	4642      	mov	r2, r8
 8007eee:	189b      	adds	r3, r3, r2
 8007ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	eb42 0303 	adc.w	r3, r2, r3
 8007efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f14:	460b      	mov	r3, r1
 8007f16:	18db      	adds	r3, r3, r3
 8007f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	eb42 0303 	adc.w	r3, r2, r3
 8007f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f2a:	f7f8 f94d 	bl	80001c8 <__aeabi_uldivmod>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <UART_SetConfig+0x2d4>)
 8007f34:	fba3 1302 	umull	r1, r3, r3, r2
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	2164      	movs	r1, #100	@ 0x64
 8007f3c:	fb01 f303 	mul.w	r3, r1, r3
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	3332      	adds	r3, #50	@ 0x32
 8007f46:	4a08      	ldr	r2, [pc, #32]	@ (8007f68 <UART_SetConfig+0x2d4>)
 8007f48:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	f003 0207 	and.w	r2, r3, #7
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4422      	add	r2, r4
 8007f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f5c:	e106      	b.n	800816c <UART_SetConfig+0x4d8>
 8007f5e:	bf00      	nop
 8007f60:	40011000 	.word	0x40011000
 8007f64:	40011400 	.word	0x40011400
 8007f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007f7e:	4642      	mov	r2, r8
 8007f80:	464b      	mov	r3, r9
 8007f82:	1891      	adds	r1, r2, r2
 8007f84:	6239      	str	r1, [r7, #32]
 8007f86:	415b      	adcs	r3, r3
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f8e:	4641      	mov	r1, r8
 8007f90:	1854      	adds	r4, r2, r1
 8007f92:	4649      	mov	r1, r9
 8007f94:	eb43 0501 	adc.w	r5, r3, r1
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	00eb      	lsls	r3, r5, #3
 8007fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fa6:	00e2      	lsls	r2, r4, #3
 8007fa8:	4614      	mov	r4, r2
 8007faa:	461d      	mov	r5, r3
 8007fac:	4643      	mov	r3, r8
 8007fae:	18e3      	adds	r3, r4, r3
 8007fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fb4:	464b      	mov	r3, r9
 8007fb6:	eb45 0303 	adc.w	r3, r5, r3
 8007fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007fce:	f04f 0200 	mov.w	r2, #0
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007fda:	4629      	mov	r1, r5
 8007fdc:	008b      	lsls	r3, r1, #2
 8007fde:	4621      	mov	r1, r4
 8007fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	008a      	lsls	r2, r1, #2
 8007fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007fec:	f7f8 f8ec 	bl	80001c8 <__aeabi_uldivmod>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4b60      	ldr	r3, [pc, #384]	@ (8008178 <UART_SetConfig+0x4e4>)
 8007ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8007ffa:	095b      	lsrs	r3, r3, #5
 8007ffc:	011c      	lsls	r4, r3, #4
 8007ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008002:	2200      	movs	r2, #0
 8008004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008008:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800800c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	1891      	adds	r1, r2, r2
 8008016:	61b9      	str	r1, [r7, #24]
 8008018:	415b      	adcs	r3, r3
 800801a:	61fb      	str	r3, [r7, #28]
 800801c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008020:	4641      	mov	r1, r8
 8008022:	1851      	adds	r1, r2, r1
 8008024:	6139      	str	r1, [r7, #16]
 8008026:	4649      	mov	r1, r9
 8008028:	414b      	adcs	r3, r1
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	f04f 0200 	mov.w	r2, #0
 8008030:	f04f 0300 	mov.w	r3, #0
 8008034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008038:	4659      	mov	r1, fp
 800803a:	00cb      	lsls	r3, r1, #3
 800803c:	4651      	mov	r1, sl
 800803e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008042:	4651      	mov	r1, sl
 8008044:	00ca      	lsls	r2, r1, #3
 8008046:	4610      	mov	r0, r2
 8008048:	4619      	mov	r1, r3
 800804a:	4603      	mov	r3, r0
 800804c:	4642      	mov	r2, r8
 800804e:	189b      	adds	r3, r3, r2
 8008050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008054:	464b      	mov	r3, r9
 8008056:	460a      	mov	r2, r1
 8008058:	eb42 0303 	adc.w	r3, r2, r3
 800805c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800806a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008078:	4649      	mov	r1, r9
 800807a:	008b      	lsls	r3, r1, #2
 800807c:	4641      	mov	r1, r8
 800807e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008082:	4641      	mov	r1, r8
 8008084:	008a      	lsls	r2, r1, #2
 8008086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800808a:	f7f8 f89d 	bl	80001c8 <__aeabi_uldivmod>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4611      	mov	r1, r2
 8008094:	4b38      	ldr	r3, [pc, #224]	@ (8008178 <UART_SetConfig+0x4e4>)
 8008096:	fba3 2301 	umull	r2, r3, r3, r1
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	2264      	movs	r2, #100	@ 0x64
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	1acb      	subs	r3, r1, r3
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	3332      	adds	r3, #50	@ 0x32
 80080a8:	4a33      	ldr	r2, [pc, #204]	@ (8008178 <UART_SetConfig+0x4e4>)
 80080aa:	fba2 2303 	umull	r2, r3, r2, r3
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080b4:	441c      	add	r4, r3
 80080b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080ba:	2200      	movs	r2, #0
 80080bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80080be:	677a      	str	r2, [r7, #116]	@ 0x74
 80080c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80080c4:	4642      	mov	r2, r8
 80080c6:	464b      	mov	r3, r9
 80080c8:	1891      	adds	r1, r2, r2
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	415b      	adcs	r3, r3
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080d4:	4641      	mov	r1, r8
 80080d6:	1851      	adds	r1, r2, r1
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	4649      	mov	r1, r9
 80080dc:	414b      	adcs	r3, r1
 80080de:	607b      	str	r3, [r7, #4]
 80080e0:	f04f 0200 	mov.w	r2, #0
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080ec:	4659      	mov	r1, fp
 80080ee:	00cb      	lsls	r3, r1, #3
 80080f0:	4651      	mov	r1, sl
 80080f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080f6:	4651      	mov	r1, sl
 80080f8:	00ca      	lsls	r2, r1, #3
 80080fa:	4610      	mov	r0, r2
 80080fc:	4619      	mov	r1, r3
 80080fe:	4603      	mov	r3, r0
 8008100:	4642      	mov	r2, r8
 8008102:	189b      	adds	r3, r3, r2
 8008104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008106:	464b      	mov	r3, r9
 8008108:	460a      	mov	r2, r1
 800810a:	eb42 0303 	adc.w	r3, r2, r3
 800810e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	663b      	str	r3, [r7, #96]	@ 0x60
 800811a:	667a      	str	r2, [r7, #100]	@ 0x64
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008128:	4649      	mov	r1, r9
 800812a:	008b      	lsls	r3, r1, #2
 800812c:	4641      	mov	r1, r8
 800812e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008132:	4641      	mov	r1, r8
 8008134:	008a      	lsls	r2, r1, #2
 8008136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800813a:	f7f8 f845 	bl	80001c8 <__aeabi_uldivmod>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4b0d      	ldr	r3, [pc, #52]	@ (8008178 <UART_SetConfig+0x4e4>)
 8008144:	fba3 1302 	umull	r1, r3, r3, r2
 8008148:	095b      	lsrs	r3, r3, #5
 800814a:	2164      	movs	r1, #100	@ 0x64
 800814c:	fb01 f303 	mul.w	r3, r1, r3
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	3332      	adds	r3, #50	@ 0x32
 8008156:	4a08      	ldr	r2, [pc, #32]	@ (8008178 <UART_SetConfig+0x4e4>)
 8008158:	fba2 2303 	umull	r2, r3, r2, r3
 800815c:	095b      	lsrs	r3, r3, #5
 800815e:	f003 020f 	and.w	r2, r3, #15
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4422      	add	r2, r4
 800816a:	609a      	str	r2, [r3, #8]
}
 800816c:	bf00      	nop
 800816e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008172:	46bd      	mov	sp, r7
 8008174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008178:	51eb851f 	.word	0x51eb851f

0800817c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800817c:	b084      	sub	sp, #16
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	f107 001c 	add.w	r0, r7, #28
 800818a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800818e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008192:	2b01      	cmp	r3, #1
 8008194:	d123      	bne.n	80081de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80081aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d105      	bne.n	80081d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f9dc 	bl	8008590 <USB_CoreReset>
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
 80081dc:	e01b      	b.n	8008216 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f9d0 	bl	8008590 <USB_CoreReset>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80081f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d106      	bne.n	800820a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008200:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	639a      	str	r2, [r3, #56]	@ 0x38
 8008208:	e005      	b.n	8008216 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008216:	7fbb      	ldrb	r3, [r7, #30]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d10b      	bne.n	8008234 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f043 0206 	orr.w	r2, r3, #6
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f043 0220 	orr.w	r2, r3, #32
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008240:	b004      	add	sp, #16
 8008242:	4770      	bx	lr

08008244 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f043 0201 	orr.w	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f023 0201 	bic.w	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d115      	bne.n	80082d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082b6:	200a      	movs	r0, #10
 80082b8:	f7f9 fee8 	bl	800208c <HAL_Delay>
      ms += 10U;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	330a      	adds	r3, #10
 80082c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f956 	bl	8008574 <USB_GetMode>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d01e      	beq.n	800830c <USB_SetCurrentMode+0x84>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80082d2:	d9f0      	bls.n	80082b6 <USB_SetCurrentMode+0x2e>
 80082d4:	e01a      	b.n	800830c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d115      	bne.n	8008308 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082e8:	200a      	movs	r0, #10
 80082ea:	f7f9 fecf 	bl	800208c <HAL_Delay>
      ms += 10U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	330a      	adds	r3, #10
 80082f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f93d 	bl	8008574 <USB_GetMode>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <USB_SetCurrentMode+0x84>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2bc7      	cmp	r3, #199	@ 0xc7
 8008304:	d9f0      	bls.n	80082e8 <USB_SetCurrentMode+0x60>
 8008306:	e001      	b.n	800830c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e005      	b.n	8008318 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008310:	d101      	bne.n	8008316 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e000      	b.n	8008318 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800833a:	d901      	bls.n	8008340 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e01b      	b.n	8008378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	daf2      	bge.n	800832e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	019b      	lsls	r3, r3, #6
 8008350:	f043 0220 	orr.w	r2, r3, #32
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3301      	adds	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008364:	d901      	bls.n	800836a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e006      	b.n	8008378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f003 0320 	and.w	r3, r3, #32
 8008372:	2b20      	cmp	r3, #32
 8008374:	d0f0      	beq.n	8008358 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3301      	adds	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800839c:	d901      	bls.n	80083a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e018      	b.n	80083d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	daf2      	bge.n	8008390 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2210      	movs	r2, #16
 80083b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083c0:	d901      	bls.n	80083c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e006      	b.n	80083d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0310 	and.w	r3, r3, #16
 80083ce:	2b10      	cmp	r3, #16
 80083d0:	d0f0      	beq.n	80083b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b089      	sub	sp, #36	@ 0x24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4611      	mov	r1, r2
 80083ec:	461a      	mov	r2, r3
 80083ee:	460b      	mov	r3, r1
 80083f0:	71fb      	strb	r3, [r7, #7]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80083fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008402:	2b00      	cmp	r3, #0
 8008404:	d123      	bne.n	800844e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008406:	88bb      	ldrh	r3, [r7, #4]
 8008408:	3303      	adds	r3, #3
 800840a:	089b      	lsrs	r3, r3, #2
 800840c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800840e:	2300      	movs	r3, #0
 8008410:	61bb      	str	r3, [r7, #24]
 8008412:	e018      	b.n	8008446 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	031a      	lsls	r2, r3, #12
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	4413      	add	r3, r2
 800841c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008420:	461a      	mov	r2, r3
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	3301      	adds	r3, #1
 800842c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	3301      	adds	r3, #1
 8008432:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	3301      	adds	r3, #1
 8008438:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	3301      	adds	r3, #1
 800843e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	3301      	adds	r3, #1
 8008444:	61bb      	str	r3, [r7, #24]
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	d3e2      	bcc.n	8008414 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3724      	adds	r7, #36	@ 0x24
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800845c:	b480      	push	{r7}
 800845e:	b08b      	sub	sp, #44	@ 0x2c
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	4613      	mov	r3, r2
 8008468:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008472:	88fb      	ldrh	r3, [r7, #6]
 8008474:	089b      	lsrs	r3, r3, #2
 8008476:	b29b      	uxth	r3, r3
 8008478:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008482:	2300      	movs	r3, #0
 8008484:	623b      	str	r3, [r7, #32]
 8008486:	e014      	b.n	80084b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	601a      	str	r2, [r3, #0]
    pDest++;
 8008494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008496:	3301      	adds	r3, #1
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	3301      	adds	r3, #1
 800849e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a2:	3301      	adds	r3, #1
 80084a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	3301      	adds	r3, #1
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	3301      	adds	r3, #1
 80084b0:	623b      	str	r3, [r7, #32]
 80084b2:	6a3a      	ldr	r2, [r7, #32]
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d3e6      	bcc.n	8008488 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084ba:	8bfb      	ldrh	r3, [r7, #30]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01e      	beq.n	80084fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084ca:	461a      	mov	r2, r3
 80084cc:	f107 0310 	add.w	r3, r7, #16
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	701a      	strb	r2, [r3, #0]
      i++;
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	3301      	adds	r3, #1
 80084ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80084ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ee:	3301      	adds	r3, #1
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80084f2:	8bfb      	ldrh	r3, [r7, #30]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80084f8:	8bfb      	ldrh	r3, [r7, #30]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1ea      	bne.n	80084d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008500:	4618      	mov	r0, r3
 8008502:	372c      	adds	r7, #44	@ 0x2c
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4013      	ands	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008524:	68fb      	ldr	r3, [r7, #12]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008532:	b480      	push	{r7}
 8008534:	b085      	sub	sp, #20
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	460b      	mov	r3, r1
 800853c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	4013      	ands	r3, r2
 8008564:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008566:	68bb      	ldr	r3, [r7, #8]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	f003 0301 	and.w	r3, r3, #1
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3301      	adds	r3, #1
 80085a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085a8:	d901      	bls.n	80085ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e022      	b.n	80085f4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	daf2      	bge.n	800859c <USB_CoreReset+0xc>

  count = 10U;
 80085b6:	230a      	movs	r3, #10
 80085b8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80085ba:	e002      	b.n	80085c2 <USB_CoreReset+0x32>
  {
    count--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3b01      	subs	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1f9      	bne.n	80085bc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	f043 0201 	orr.w	r2, r3, #1
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3301      	adds	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085e0:	d901      	bls.n	80085e6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e006      	b.n	80085f4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d0f0      	beq.n	80085d4 <USB_CoreReset+0x44>

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008600:	b084      	sub	sp, #16
 8008602:	b580      	push	{r7, lr}
 8008604:	b086      	sub	sp, #24
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800860e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008620:	461a      	mov	r2, r3
 8008622:	2300      	movs	r3, #0
 8008624:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008636:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008642:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008652:	2b00      	cmp	r3, #0
 8008654:	d119      	bne.n	800868a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008656:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800865a:	2b01      	cmp	r3, #1
 800865c:	d10a      	bne.n	8008674 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800866c:	f043 0304 	orr.w	r3, r3, #4
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	e014      	b.n	800869e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008682:	f023 0304 	bic.w	r3, r3, #4
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	e009      	b.n	800869e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008698:	f023 0304 	bic.w	r3, r3, #4
 800869c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800869e:	2110      	movs	r1, #16
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fe3d 	bl	8008320 <USB_FlushTxFifo>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fe67 	bl	8008384 <USB_FlushRxFifo>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80086c0:	2300      	movs	r3, #0
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	e015      	b.n	80086f2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086d2:	461a      	mov	r2, r3
 80086d4:	f04f 33ff 	mov.w	r3, #4294967295
 80086d8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086e6:	461a      	mov	r2, r3
 80086e8:	2300      	movs	r3, #0
 80086ea:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	3301      	adds	r3, #1
 80086f0:	613b      	str	r3, [r7, #16]
 80086f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80086f6:	461a      	mov	r2, r3
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d3e3      	bcc.n	80086c6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f04f 32ff 	mov.w	r2, #4294967295
 800870a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a18      	ldr	r2, [pc, #96]	@ (8008770 <USB_HostInit+0x170>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d10b      	bne.n	800872c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800871a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a15      	ldr	r2, [pc, #84]	@ (8008774 <USB_HostInit+0x174>)
 8008720:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a14      	ldr	r2, [pc, #80]	@ (8008778 <USB_HostInit+0x178>)
 8008726:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800872a:	e009      	b.n	8008740 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2280      	movs	r2, #128	@ 0x80
 8008730:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a11      	ldr	r2, [pc, #68]	@ (800877c <USB_HostInit+0x17c>)
 8008736:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a11      	ldr	r2, [pc, #68]	@ (8008780 <USB_HostInit+0x180>)
 800873c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008740:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008744:	2b00      	cmp	r3, #0
 8008746:	d105      	bne.n	8008754 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	f043 0210 	orr.w	r2, r3, #16
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699a      	ldr	r2, [r3, #24]
 8008758:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <USB_HostInit+0x184>)
 800875a:	4313      	orrs	r3, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008760:	7dfb      	ldrb	r3, [r7, #23]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800876c:	b004      	add	sp, #16
 800876e:	4770      	bx	lr
 8008770:	40040000 	.word	0x40040000
 8008774:	01000200 	.word	0x01000200
 8008778:	00e00300 	.word	0x00e00300
 800877c:	00600080 	.word	0x00600080
 8008780:	004000e0 	.word	0x004000e0
 8008784:	a3200008 	.word	0xa3200008

08008788 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	68f9      	ldr	r1, [r7, #12]
 80087bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80087c0:	4313      	orrs	r3, r2
 80087c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d107      	bne.n	80087da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087d0:	461a      	mov	r2, r3
 80087d2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80087d6:	6053      	str	r3, [r2, #4]
 80087d8:	e00c      	b.n	80087f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d107      	bne.n	80087f0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087e6:	461a      	mov	r2, r3
 80087e8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80087ec:	6053      	str	r3, [r2, #4]
 80087ee:	e001      	b.n	80087f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e000      	b.n	80087f6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008822:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800882c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008830:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008832:	2064      	movs	r0, #100	@ 0x64
 8008834:	f7f9 fc2a 	bl	800208c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008844:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008846:	200a      	movs	r0, #10
 8008848:	f7f9 fc20 	bl	800208c <HAL_Delay>

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008856:	b480      	push	{r7}
 8008858:	b085      	sub	sp, #20
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800887a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d109      	bne.n	800889a <USB_DriveVbus+0x44>
 8008886:	78fb      	ldrb	r3, [r7, #3]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d106      	bne.n	800889a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008894:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008898:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088a4:	d109      	bne.n	80088ba <USB_DriveVbus+0x64>
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d106      	bne.n	80088ba <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80088b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088b8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	0c5b      	lsrs	r3, r3, #17
 80088e6:	f003 0303 	and.w	r3, r3, #3
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	b29b      	uxth	r3, r3
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	4608      	mov	r0, r1
 8008922:	4611      	mov	r1, r2
 8008924:	461a      	mov	r2, r3
 8008926:	4603      	mov	r3, r0
 8008928:	70fb      	strb	r3, [r7, #3]
 800892a:	460b      	mov	r3, r1
 800892c:	70bb      	strb	r3, [r7, #2]
 800892e:	4613      	mov	r3, r2
 8008930:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008946:	461a      	mov	r2, r3
 8008948:	f04f 33ff 	mov.w	r3, #4294967295
 800894c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800894e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008952:	2b03      	cmp	r3, #3
 8008954:	d87c      	bhi.n	8008a50 <USB_HC_Init+0x138>
 8008956:	a201      	add	r2, pc, #4	@ (adr r2, 800895c <USB_HC_Init+0x44>)
 8008958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895c:	0800896d 	.word	0x0800896d
 8008960:	08008a13 	.word	0x08008a13
 8008964:	0800896d 	.word	0x0800896d
 8008968:	080089d5 	.word	0x080089d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	4413      	add	r3, r2
 8008974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008978:	461a      	mov	r2, r3
 800897a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800897e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008980:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008984:	2b00      	cmp	r3, #0
 8008986:	da10      	bge.n	80089aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	4413      	add	r3, r2
 8008990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	440a      	add	r2, r1
 800899e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089a6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80089a8:	e055      	b.n	8008a56 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a6f      	ldr	r2, [pc, #444]	@ (8008b6c <USB_HC_Init+0x254>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d151      	bne.n	8008a56 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	0151      	lsls	r1, r2, #5
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	440a      	add	r2, r1
 80089c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80089d0:	60d3      	str	r3, [r2, #12]
      break;
 80089d2:	e040      	b.n	8008a56 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e0:	461a      	mov	r2, r3
 80089e2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80089e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80089e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da34      	bge.n	8008a5a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	0151      	lsls	r1, r2, #5
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	440a      	add	r2, r1
 8008a06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a0e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008a10:	e023      	b.n	8008a5a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f240 2325 	movw	r3, #549	@ 0x225
 8008a24:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008a26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	da17      	bge.n	8008a5e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a48:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008a4c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008a4e:	e006      	b.n	8008a5e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	77fb      	strb	r3, [r7, #31]
      break;
 8008a54:	e004      	b.n	8008a60 <USB_HC_Init+0x148>
      break;
 8008a56:	bf00      	nop
 8008a58:	e002      	b.n	8008a60 <USB_HC_Init+0x148>
      break;
 8008a5a:	bf00      	nop
 8008a5c:	e000      	b.n	8008a60 <USB_HC_Init+0x148>
      break;
 8008a5e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	2300      	movs	r3, #0
 8008a70:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	78fa      	ldrb	r2, [r7, #3]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a8c:	f043 0302 	orr.w	r3, r3, #2
 8008a90:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa6:	6939      	ldr	r1, [r7, #16]
 8008aa8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008aac:	4313      	orrs	r3, r2
 8008aae:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008abc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	da03      	bge.n	8008acc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008ac4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	e001      	b.n	8008ad0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff fef9 	bl	80088c8 <USB_GetHostSpeed>
 8008ad6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008ad8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d106      	bne.n	8008aee <USB_HC_Init+0x1d6>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d003      	beq.n	8008aee <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008ae6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	e001      	b.n	8008af2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008af2:	787b      	ldrb	r3, [r7, #1]
 8008af4:	059b      	lsls	r3, r3, #22
 8008af6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008afa:	78bb      	ldrb	r3, [r7, #2]
 8008afc:	02db      	lsls	r3, r3, #11
 8008afe:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b02:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008b08:	049b      	lsls	r3, r3, #18
 8008b0a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008b0e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008b10:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b16:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008b2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b30:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008b32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d003      	beq.n	8008b42 <USB_HC_Init+0x22a>
 8008b3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d10f      	bne.n	8008b62 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	78fa      	ldrb	r2, [r7, #3]
 8008b52:	0151      	lsls	r1, r2, #5
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	440a      	add	r2, r1
 8008b58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b60:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3720      	adds	r7, #32
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40040000 	.word	0x40040000

08008b70 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08c      	sub	sp, #48	@ 0x30
 8008b74:	af02      	add	r7, sp, #8
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b8c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4a5d      	ldr	r2, [pc, #372]	@ (8008d08 <USB_HC_StartXfer+0x198>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d12f      	bne.n	8008bf6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d11c      	bne.n	8008bd6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	7c9b      	ldrb	r3, [r3, #18]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <USB_HC_StartXfer+0x3c>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	7c9b      	ldrb	r3, [r3, #18]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d124      	bne.n	8008bf6 <USB_HC_StartXfer+0x86>
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	799b      	ldrb	r3, [r3, #6]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d120      	bne.n	8008bf6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	6a3a      	ldr	r2, [r7, #32]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bd2:	60d3      	str	r3, [r2, #12]
 8008bd4:	e00f      	b.n	8008bf6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	791b      	ldrb	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10b      	bne.n	8008bf6 <USB_HC_StartXfer+0x86>
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	795b      	ldrb	r3, [r3, #5]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d107      	bne.n	8008bf6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	4619      	mov	r1, r3
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fb6b 	bl	80092c8 <USB_DoPing>
        return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e232      	b.n	800905c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	799b      	ldrb	r3, [r3, #6]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d158      	bne.n	8008cb0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	78db      	ldrb	r3, [r3, #3]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d007      	beq.n	8008c1a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	8a92      	ldrh	r2, [r2, #20]
 8008c10:	fb03 f202 	mul.w	r2, r3, r2
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	61da      	str	r2, [r3, #28]
 8008c18:	e07c      	b.n	8008d14 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	7c9b      	ldrb	r3, [r3, #18]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d130      	bne.n	8008c84 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	2bbc      	cmp	r3, #188	@ 0xbc
 8008c28:	d918      	bls.n	8008c5c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	8a9b      	ldrh	r3, [r3, #20]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	69da      	ldr	r2, [r3, #28]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d003      	beq.n	8008c4c <USB_HC_StartXfer+0xdc>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d103      	bne.n	8008c54 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	60da      	str	r2, [r3, #12]
 8008c52:	e05f      	b.n	8008d14 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2201      	movs	r2, #1
 8008c58:	60da      	str	r2, [r3, #12]
 8008c5a:	e05b      	b.n	8008d14 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6a1a      	ldr	r2, [r3, #32]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d007      	beq.n	8008c7c <USB_HC_StartXfer+0x10c>
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d003      	beq.n	8008c7c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2204      	movs	r2, #4
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	e04b      	b.n	8008d14 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2203      	movs	r2, #3
 8008c80:	60da      	str	r2, [r3, #12]
 8008c82:	e047      	b.n	8008d14 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d10d      	bne.n	8008ca6 <USB_HC_StartXfer+0x136>
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	8a92      	ldrh	r2, [r2, #20]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d907      	bls.n	8008ca6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	8a92      	ldrh	r2, [r2, #20]
 8008c9c:	fb03 f202 	mul.w	r2, r3, r2
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	61da      	str	r2, [r3, #28]
 8008ca4:	e036      	b.n	8008d14 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6a1a      	ldr	r2, [r3, #32]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	61da      	str	r2, [r3, #28]
 8008cae:	e031      	b.n	8008d14 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d018      	beq.n	8008cea <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	8a92      	ldrh	r2, [r2, #20]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	8a92      	ldrh	r2, [r2, #20]
 8008cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ccc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008cce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008cd0:	8b7b      	ldrh	r3, [r7, #26]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d90b      	bls.n	8008cee <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008cd6:	8b7b      	ldrh	r3, [r7, #26]
 8008cd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008cda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	8a92      	ldrh	r2, [r2, #20]
 8008ce0:	fb03 f202 	mul.w	r2, r3, r2
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	61da      	str	r2, [r3, #28]
 8008ce8:	e001      	b.n	8008cee <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008cea:	2301      	movs	r3, #1
 8008cec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	78db      	ldrb	r3, [r3, #3]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00a      	beq.n	8008d0c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008cf6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	8a92      	ldrh	r2, [r2, #20]
 8008cfc:	fb03 f202 	mul.w	r2, r3, r2
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	61da      	str	r2, [r3, #28]
 8008d04:	e006      	b.n	8008d14 <USB_HC_StartXfer+0x1a4>
 8008d06:	bf00      	nop
 8008d08:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	6a1a      	ldr	r2, [r3, #32]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d1e:	04d9      	lsls	r1, r3, #19
 8008d20:	4ba3      	ldr	r3, [pc, #652]	@ (8008fb0 <USB_HC_StartXfer+0x440>)
 8008d22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	7d9b      	ldrb	r3, [r3, #22]
 8008d2a:	075b      	lsls	r3, r3, #29
 8008d2c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d30:	69f9      	ldr	r1, [r7, #28]
 8008d32:	0148      	lsls	r0, r1, #5
 8008d34:	6a39      	ldr	r1, [r7, #32]
 8008d36:	4401      	add	r1, r0
 8008d38:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6999      	ldr	r1, [r3, #24]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d56:	460a      	mov	r2, r1
 8008d58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bf0c      	ite	eq
 8008d6a:	2301      	moveq	r3, #1
 8008d6c:	2300      	movne	r3, #0
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	0151      	lsls	r1, r2, #5
 8008d84:	6a3a      	ldr	r2, [r7, #32]
 8008d86:	440a      	add	r2, r1
 8008d88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d8c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	7e7b      	ldrb	r3, [r7, #25]
 8008da2:	075b      	lsls	r3, r3, #29
 8008da4:	69f9      	ldr	r1, [r7, #28]
 8008da6:	0148      	lsls	r0, r1, #5
 8008da8:	6a39      	ldr	r1, [r7, #32]
 8008daa:	4401      	add	r1, r0
 8008dac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008db0:	4313      	orrs	r3, r2
 8008db2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	799b      	ldrb	r3, [r3, #6]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	f040 80c3 	bne.w	8008f44 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	7c5b      	ldrb	r3, [r3, #17]
 8008dc2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	6a3a      	ldr	r2, [r7, #32]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008dd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008dda:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	6a3a      	ldr	r2, [r7, #32]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008df6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008dfa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	79db      	ldrb	r3, [r3, #7]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d123      	bne.n	8008e4c <USB_HC_StartXfer+0x2dc>
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	78db      	ldrb	r3, [r3, #3]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d11f      	bne.n	8008e4c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	0151      	lsls	r1, r2, #5
 8008e1e:	6a3a      	ldr	r2, [r7, #32]
 8008e20:	440a      	add	r2, r1
 8008e22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e2a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	0151      	lsls	r1, r2, #5
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	440a      	add	r2, r1
 8008e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e4a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	7c9b      	ldrb	r3, [r3, #18]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d003      	beq.n	8008e5c <USB_HC_StartXfer+0x2ec>
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	7c9b      	ldrb	r3, [r3, #18]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d117      	bne.n	8008e8c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d113      	bne.n	8008e8c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	78db      	ldrb	r3, [r3, #3]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d10f      	bne.n	8008e8c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	69fa      	ldr	r2, [r7, #28]
 8008e7c:	0151      	lsls	r1, r2, #5
 8008e7e:	6a3a      	ldr	r2, [r7, #32]
 8008e80:	440a      	add	r2, r1
 8008e82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e8a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	7c9b      	ldrb	r3, [r3, #18]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d162      	bne.n	8008f5a <USB_HC_StartXfer+0x3ea>
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	78db      	ldrb	r3, [r3, #3]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d15e      	bne.n	8008f5a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d858      	bhi.n	8008f58 <USB_HC_StartXfer+0x3e8>
 8008ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8008eac <USB_HC_StartXfer+0x33c>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ebd 	.word	0x08008ebd
 8008eb0:	08008edf 	.word	0x08008edf
 8008eb4:	08008f01 	.word	0x08008f01
 8008eb8:	08008f23 	.word	0x08008f23
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	69fa      	ldr	r2, [r7, #28]
 8008ecc:	0151      	lsls	r1, r2, #5
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008eda:	6053      	str	r3, [r2, #4]
          break;
 8008edc:	e03d      	b.n	8008f5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	0151      	lsls	r1, r2, #5
 8008ef0:	6a3a      	ldr	r2, [r7, #32]
 8008ef2:	440a      	add	r2, r1
 8008ef4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ef8:	f043 030e 	orr.w	r3, r3, #14
 8008efc:	6053      	str	r3, [r2, #4]
          break;
 8008efe:	e02c      	b.n	8008f5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	0151      	lsls	r1, r2, #5
 8008f12:	6a3a      	ldr	r2, [r7, #32]
 8008f14:	440a      	add	r2, r1
 8008f16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f1e:	6053      	str	r3, [r2, #4]
          break;
 8008f20:	e01b      	b.n	8008f5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	0151      	lsls	r1, r2, #5
 8008f34:	6a3a      	ldr	r2, [r7, #32]
 8008f36:	440a      	add	r2, r1
 8008f38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f40:	6053      	str	r3, [r2, #4]
          break;
 8008f42:	e00a      	b.n	8008f5a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f50:	461a      	mov	r2, r3
 8008f52:	2300      	movs	r3, #0
 8008f54:	6053      	str	r3, [r2, #4]
 8008f56:	e000      	b.n	8008f5a <USB_HC_StartXfer+0x3ea>
          break;
 8008f58:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f70:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	78db      	ldrb	r3, [r3, #3]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d004      	beq.n	8008f84 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f80:	613b      	str	r3, [r7, #16]
 8008f82:	e003      	b.n	8008f8c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f8a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f92:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	e055      	b.n	800905c <USB_HC_StartXfer+0x4ec>
 8008fb0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	78db      	ldrb	r3, [r3, #3]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d14e      	bne.n	800905a <USB_HC_StartXfer+0x4ea>
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d04a      	beq.n	800905a <USB_HC_StartXfer+0x4ea>
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	79db      	ldrb	r3, [r3, #7]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d146      	bne.n	800905a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	7c9b      	ldrb	r3, [r3, #18]
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d831      	bhi.n	8009038 <USB_HC_StartXfer+0x4c8>
 8008fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fdc <USB_HC_StartXfer+0x46c>)
 8008fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fda:	bf00      	nop
 8008fdc:	08008fed 	.word	0x08008fed
 8008fe0:	08009011 	.word	0x08009011
 8008fe4:	08008fed 	.word	0x08008fed
 8008fe8:	08009011 	.word	0x08009011
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	3303      	adds	r3, #3
 8008ff2:	089b      	lsrs	r3, r3, #2
 8008ff4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008ff6:	8afa      	ldrh	r2, [r7, #22]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d91c      	bls.n	800903c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	f043 0220 	orr.w	r2, r3, #32
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	619a      	str	r2, [r3, #24]
        }
        break;
 800900e:	e015      	b.n	800903c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	3303      	adds	r3, #3
 8009016:	089b      	lsrs	r3, r3, #2
 8009018:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800901a:	8afa      	ldrh	r2, [r7, #22]
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	b29b      	uxth	r3, r3
 8009026:	429a      	cmp	r2, r3
 8009028:	d90a      	bls.n	8009040 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	619a      	str	r2, [r3, #24]
        }
        break;
 8009036:	e003      	b.n	8009040 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009038:	bf00      	nop
 800903a:	e002      	b.n	8009042 <USB_HC_StartXfer+0x4d2>
        break;
 800903c:	bf00      	nop
 800903e:	e000      	b.n	8009042 <USB_HC_StartXfer+0x4d2>
        break;
 8009040:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	6999      	ldr	r1, [r3, #24]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	785a      	ldrb	r2, [r3, #1]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	b29b      	uxth	r3, r3
 8009050:	2000      	movs	r0, #0
 8009052:	9000      	str	r0, [sp, #0]
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f7ff f9c3 	bl	80083e0 <USB_WritePacket>
  }

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3728      	adds	r7, #40	@ 0x28
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	b29b      	uxth	r3, r3
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009086:	b480      	push	{r7}
 8009088:	b089      	sub	sp, #36	@ 0x24
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009096:	78fb      	ldrb	r3, [r7, #3]
 8009098:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	0c9b      	lsrs	r3, r3, #18
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	0fdb      	lsrs	r3, r3, #31
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	0fdb      	lsrs	r3, r3, #31
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f003 0320 	and.w	r3, r3, #32
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d10d      	bne.n	8009108 <USB_HC_Halt+0x82>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <USB_HC_Halt+0x82>
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d002      	beq.n	8009104 <USB_HC_Halt+0x7e>
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2b03      	cmp	r3, #3
 8009102:	d101      	bne.n	8009108 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	e0d8      	b.n	80092ba <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <USB_HC_Halt+0x8e>
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b02      	cmp	r3, #2
 8009112:	d173      	bne.n	80091fc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	4413      	add	r3, r2
 800911c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	0151      	lsls	r1, r2, #5
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	440a      	add	r2, r1
 800912a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800912e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009132:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d14a      	bne.n	80091d6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d133      	bne.n	80091b4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	4413      	add	r3, r2
 8009154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	0151      	lsls	r1, r2, #5
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	440a      	add	r2, r1
 8009162:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009166:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800916a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	4413      	add	r3, r2
 8009174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69ba      	ldr	r2, [r7, #24]
 800917c:	0151      	lsls	r1, r2, #5
 800917e:	69fa      	ldr	r2, [r7, #28]
 8009180:	440a      	add	r2, r1
 8009182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009186:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800918a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	3301      	adds	r3, #1
 8009190:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009198:	d82e      	bhi.n	80091f8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091b0:	d0ec      	beq.n	800918c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091b2:	e081      	b.n	80092b8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69ba      	ldr	r2, [r7, #24]
 80091c4:	0151      	lsls	r1, r2, #5
 80091c6:	69fa      	ldr	r2, [r7, #28]
 80091c8:	440a      	add	r2, r1
 80091ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091d2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091d4:	e070      	b.n	80092b8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	0151      	lsls	r1, r2, #5
 80091e8:	69fa      	ldr	r2, [r7, #28]
 80091ea:	440a      	add	r2, r1
 80091ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091f6:	e05f      	b.n	80092b8 <USB_HC_Halt+0x232>
            break;
 80091f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091fa:	e05d      	b.n	80092b8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	4413      	add	r3, r2
 8009204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	440a      	add	r2, r1
 8009212:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009216:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800921a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d133      	bne.n	8009294 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	440a      	add	r2, r1
 8009242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009246:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800924a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	4413      	add	r3, r2
 8009254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	0151      	lsls	r1, r2, #5
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	440a      	add	r2, r1
 8009262:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009266:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800926a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	3301      	adds	r3, #1
 8009270:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009278:	d81d      	bhi.n	80092b6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800928c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009290:	d0ec      	beq.n	800926c <USB_HC_Halt+0x1e6>
 8009292:	e011      	b.n	80092b8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	4413      	add	r3, r2
 800929c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	0151      	lsls	r1, r2, #5
 80092a6:	69fa      	ldr	r2, [r7, #28]
 80092a8:	440a      	add	r2, r1
 80092aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	e000      	b.n	80092b8 <USB_HC_Halt+0x232>
          break;
 80092b6:	bf00      	nop
    }
  }

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3724      	adds	r7, #36	@ 0x24
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
	...

080092c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80092d8:	78fb      	ldrb	r3, [r7, #3]
 80092da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80092dc:	2301      	movs	r3, #1
 80092de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	04da      	lsls	r2, r3, #19
 80092e4:	4b15      	ldr	r3, [pc, #84]	@ (800933c <USB_DoPing+0x74>)
 80092e6:	4013      	ands	r3, r2
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	0151      	lsls	r1, r2, #5
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	440a      	add	r2, r1
 80092f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	4413      	add	r3, r2
 8009302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009310:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009318:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	4413      	add	r3, r2
 8009322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009326:	461a      	mov	r2, r3
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	1ff80000 	.word	0x1ff80000

08009340 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b088      	sub	sp, #32
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7fe ff86 	bl	8008266 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800935a:	2110      	movs	r1, #16
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7fe ffdf 	bl	8008320 <USB_FlushTxFifo>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7ff f809 	bl	8008384 <USB_FlushRxFifo>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800937c:	2300      	movs	r3, #0
 800937e:	61bb      	str	r3, [r7, #24]
 8009380:	e01f      	b.n	80093c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	4413      	add	r3, r2
 800938a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009398:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80093a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093b6:	461a      	mov	r2, r3
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	3301      	adds	r3, #1
 80093c0:	61bb      	str	r3, [r7, #24]
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	2b0f      	cmp	r3, #15
 80093c6:	d9dc      	bls.n	8009382 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80093c8:	2300      	movs	r3, #0
 80093ca:	61bb      	str	r3, [r7, #24]
 80093cc:	e034      	b.n	8009438 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80093ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80093f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009402:	461a      	mov	r2, r3
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009414:	d80c      	bhi.n	8009430 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	4413      	add	r3, r2
 800941e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800942c:	d0ec      	beq.n	8009408 <USB_StopHost+0xc8>
 800942e:	e000      	b.n	8009432 <USB_StopHost+0xf2>
        break;
 8009430:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	3301      	adds	r3, #1
 8009436:	61bb      	str	r3, [r7, #24]
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	2b0f      	cmp	r3, #15
 800943c:	d9c7      	bls.n	80093ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009444:	461a      	mov	r2, r3
 8009446:	f04f 33ff 	mov.w	r3, #4294967295
 800944a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f04f 32ff 	mov.w	r2, #4294967295
 8009452:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7fe fef5 	bl	8008244 <USB_EnableGlobalInt>

  return ret;
 800945a:	7ffb      	ldrb	r3, [r7, #31]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3720      	adds	r7, #32
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009464:	b590      	push	{r4, r7, lr}
 8009466:	b089      	sub	sp, #36	@ 0x24
 8009468:	af04      	add	r7, sp, #16
 800946a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800946c:	2301      	movs	r3, #1
 800946e:	2202      	movs	r2, #2
 8009470:	2102      	movs	r1, #2
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fc83 	bl	8009d7e <USBH_FindInterface>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2bff      	cmp	r3, #255	@ 0xff
 8009480:	d002      	beq.n	8009488 <USBH_CDC_InterfaceInit+0x24>
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d901      	bls.n	800948c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009488:	2302      	movs	r3, #2
 800948a:	e13d      	b.n	8009708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800948c:	7bfb      	ldrb	r3, [r7, #15]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc58 	bl	8009d46 <USBH_SelectInterface>
 8009496:	4603      	mov	r3, r0
 8009498:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80094a0:	2302      	movs	r3, #2
 80094a2:	e131      	b.n	8009708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80094aa:	2050      	movs	r0, #80	@ 0x50
 80094ac:	f002 fb6a 	bl	800bb84 <malloc>
 80094b0:	4603      	mov	r3, r0
 80094b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80094c4:	2302      	movs	r3, #2
 80094c6:	e11f      	b.n	8009708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80094c8:	2250      	movs	r2, #80	@ 0x50
 80094ca:	2100      	movs	r1, #0
 80094cc:	68b8      	ldr	r0, [r7, #8]
 80094ce:	f002 fc17 	bl	800bd00 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	211a      	movs	r1, #26
 80094d8:	fb01 f303 	mul.w	r3, r1, r3
 80094dc:	4413      	add	r3, r2
 80094de:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	b25b      	sxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	da15      	bge.n	8009516 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	211a      	movs	r1, #26
 80094f0:	fb01 f303 	mul.w	r3, r1, r3
 80094f4:	4413      	add	r3, r2
 80094f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80094fa:	781a      	ldrb	r2, [r3, #0]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	211a      	movs	r1, #26
 8009506:	fb01 f303 	mul.w	r3, r1, r3
 800950a:	4413      	add	r3, r2
 800950c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009510:	881a      	ldrh	r2, [r3, #0]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 ffc4 	bl	800b4aa <USBH_AllocPipe>
 8009522:	4603      	mov	r3, r0
 8009524:	461a      	mov	r2, r3
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	7819      	ldrb	r1, [r3, #0]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	7858      	ldrb	r0, [r3, #1]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	8952      	ldrh	r2, [r2, #10]
 8009542:	9202      	str	r2, [sp, #8]
 8009544:	2203      	movs	r2, #3
 8009546:	9201      	str	r2, [sp, #4]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	4623      	mov	r3, r4
 800954c:	4602      	mov	r2, r0
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 ff7c 	bl	800b44c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	2200      	movs	r2, #0
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f002 fa8b 	bl	800ba78 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009562:	2300      	movs	r3, #0
 8009564:	2200      	movs	r2, #0
 8009566:	210a      	movs	r1, #10
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fc08 	bl	8009d7e <USBH_FindInterface>
 800956e:	4603      	mov	r3, r0
 8009570:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2bff      	cmp	r3, #255	@ 0xff
 8009576:	d002      	beq.n	800957e <USBH_CDC_InterfaceInit+0x11a>
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d901      	bls.n	8009582 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800957e:	2302      	movs	r3, #2
 8009580:	e0c2      	b.n	8009708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	211a      	movs	r1, #26
 8009588:	fb01 f303 	mul.w	r3, r1, r3
 800958c:	4413      	add	r3, r2
 800958e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	b25b      	sxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	da16      	bge.n	80095c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	211a      	movs	r1, #26
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	4413      	add	r3, r2
 80095a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80095aa:	781a      	ldrb	r2, [r3, #0]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	211a      	movs	r1, #26
 80095b6:	fb01 f303 	mul.w	r3, r1, r3
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80095c0:	881a      	ldrh	r2, [r3, #0]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	835a      	strh	r2, [r3, #26]
 80095c6:	e015      	b.n	80095f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	211a      	movs	r1, #26
 80095ce:	fb01 f303 	mul.w	r3, r1, r3
 80095d2:	4413      	add	r3, r2
 80095d4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80095d8:	781a      	ldrb	r2, [r3, #0]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	211a      	movs	r1, #26
 80095e4:	fb01 f303 	mul.w	r3, r1, r3
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80095ee:	881a      	ldrh	r2, [r3, #0]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	211a      	movs	r1, #26
 80095fa:	fb01 f303 	mul.w	r3, r1, r3
 80095fe:	4413      	add	r3, r2
 8009600:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b25b      	sxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	da16      	bge.n	800963a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	211a      	movs	r1, #26
 8009612:	fb01 f303 	mul.w	r3, r1, r3
 8009616:	4413      	add	r3, r2
 8009618:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800961c:	781a      	ldrb	r2, [r3, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	211a      	movs	r1, #26
 8009628:	fb01 f303 	mul.w	r3, r1, r3
 800962c:	4413      	add	r3, r2
 800962e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009632:	881a      	ldrh	r2, [r3, #0]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	835a      	strh	r2, [r3, #26]
 8009638:	e015      	b.n	8009666 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	211a      	movs	r1, #26
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	4413      	add	r3, r2
 8009646:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800964a:	781a      	ldrb	r2, [r3, #0]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	211a      	movs	r1, #26
 8009656:	fb01 f303 	mul.w	r3, r1, r3
 800965a:	4413      	add	r3, r2
 800965c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009660:	881a      	ldrh	r2, [r3, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	7b9b      	ldrb	r3, [r3, #14]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 ff1c 	bl	800b4aa <USBH_AllocPipe>
 8009672:	4603      	mov	r3, r0
 8009674:	461a      	mov	r2, r3
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	7bdb      	ldrb	r3, [r3, #15]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 ff12 	bl	800b4aa <USBH_AllocPipe>
 8009686:	4603      	mov	r3, r0
 8009688:	461a      	mov	r2, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	7b59      	ldrb	r1, [r3, #13]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	7b98      	ldrb	r0, [r3, #14]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	8b12      	ldrh	r2, [r2, #24]
 80096a6:	9202      	str	r2, [sp, #8]
 80096a8:	2202      	movs	r2, #2
 80096aa:	9201      	str	r2, [sp, #4]
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	4623      	mov	r3, r4
 80096b0:	4602      	mov	r2, r0
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 feca 	bl	800b44c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	7b19      	ldrb	r1, [r3, #12]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	7bd8      	ldrb	r0, [r3, #15]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	8b52      	ldrh	r2, [r2, #26]
 80096d0:	9202      	str	r2, [sp, #8]
 80096d2:	2202      	movs	r2, #2
 80096d4:	9201      	str	r2, [sp, #4]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	4623      	mov	r3, r4
 80096da:	4602      	mov	r2, r0
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 feb5 	bl	800b44c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	7b5b      	ldrb	r3, [r3, #13]
 80096ee:	2200      	movs	r2, #0
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f002 f9c0 	bl	800ba78 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	7b1b      	ldrb	r3, [r3, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f002 f9b9 	bl	800ba78 <USBH_LL_SetToggle>

  return USBH_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	bd90      	pop	{r4, r7, pc}

08009710 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00e      	beq.n	8009748 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 feaa 	bl	800b48a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fed5 	bl	800b4ec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	7b1b      	ldrb	r3, [r3, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00e      	beq.n	800976e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	7b1b      	ldrb	r3, [r3, #12]
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 fe97 	bl	800b48a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	7b1b      	ldrb	r3, [r3, #12]
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 fec2 	bl	800b4ec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	7b5b      	ldrb	r3, [r3, #13]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00e      	beq.n	8009794 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	7b5b      	ldrb	r3, [r3, #13]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 fe84 	bl	800b48a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	7b5b      	ldrb	r3, [r3, #13]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 feaf 	bl	800b4ec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f002 f9f3 	bl	800bb94 <free>
    phost->pActiveClass->pData = 0U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097b4:	2200      	movs	r2, #0
 80097b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3340      	adds	r3, #64	@ 0x40
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f8b1 	bl	8009942 <GetLineCoding>
 80097e0:	4603      	mov	r3, r0
 80097e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d105      	bne.n	80097f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80097f0:	2102      	movs	r1, #2
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80097f6:	7afb      	ldrb	r3, [r7, #11]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009808:	2301      	movs	r3, #1
 800980a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009820:	2b04      	cmp	r3, #4
 8009822:	d877      	bhi.n	8009914 <USBH_CDC_Process+0x114>
 8009824:	a201      	add	r2, pc, #4	@ (adr r2, 800982c <USBH_CDC_Process+0x2c>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	08009841 	.word	0x08009841
 8009830:	08009847 	.word	0x08009847
 8009834:	08009877 	.word	0x08009877
 8009838:	080098eb 	.word	0x080098eb
 800983c:	080098f9 	.word	0x080098f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]
      break;
 8009844:	e06d      	b.n	8009922 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f897 	bl	8009980 <SetLineCoding>
 8009852:	4603      	mov	r3, r0
 8009854:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d104      	bne.n	8009866 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009864:	e058      	b.n	8009918 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d055      	beq.n	8009918 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2204      	movs	r2, #4
 8009870:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009874:	e050      	b.n	8009918 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	3340      	adds	r3, #64	@ 0x40
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f860 	bl	8009942 <GetLineCoding>
 8009882:	4603      	mov	r3, r0
 8009884:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d126      	bne.n	80098da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800989e:	791b      	ldrb	r3, [r3, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d13b      	bne.n	800991c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d133      	bne.n	800991c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d12b      	bne.n	800991c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d124      	bne.n	800991c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f958 	bl	8009b88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80098d8:	e020      	b.n	800991c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d01d      	beq.n	800991c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2204      	movs	r2, #4
 80098e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80098e8:	e018      	b.n	800991c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f867 	bl	80099be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f8da 	bl	8009aaa <CDC_ProcessReception>
      break;
 80098f6:	e014      	b.n	8009922 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80098f8:	2100      	movs	r1, #0
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 f81e 	bl	800a93c <USBH_ClrFeature>
 8009900:	4603      	mov	r3, r0
 8009902:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10a      	bne.n	8009920 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009912:	e005      	b.n	8009920 <USBH_CDC_Process+0x120>

    default:
      break;
 8009914:	bf00      	nop
 8009916:	e004      	b.n	8009922 <USBH_CDC_Process+0x122>
      break;
 8009918:	bf00      	nop
 800991a:	e002      	b.n	8009922 <USBH_CDC_Process+0x122>
      break;
 800991c:	bf00      	nop
 800991e:	e000      	b.n	8009922 <USBH_CDC_Process+0x122>
      break;
 8009920:	bf00      	nop

  }

  return status;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	22a1      	movs	r2, #161	@ 0xa1
 8009950:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2221      	movs	r2, #33	@ 0x21
 8009956:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2207      	movs	r2, #7
 8009968:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2207      	movs	r2, #7
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 fb17 	bl	800afa4 <USBH_CtlReq>
 8009976:	4603      	mov	r3, r0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2221      	movs	r2, #33	@ 0x21
 800998e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2220      	movs	r2, #32
 8009994:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2207      	movs	r2, #7
 80099a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2207      	movs	r2, #7
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 faf8 	bl	800afa4 <USBH_CtlReq>
 80099b4:	4603      	mov	r3, r0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b086      	sub	sp, #24
 80099c2:	af02      	add	r7, sp, #8
 80099c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099d0:	2300      	movs	r3, #0
 80099d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d002      	beq.n	80099e4 <CDC_ProcessTransmission+0x26>
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d023      	beq.n	8009a2a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80099e2:	e05e      	b.n	8009aa2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	8b12      	ldrh	r2, [r2, #24]
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d90b      	bls.n	8009a08 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	69d9      	ldr	r1, [r3, #28]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	8b1a      	ldrh	r2, [r3, #24]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	7b5b      	ldrb	r3, [r3, #13]
 80099fc:	2001      	movs	r0, #1
 80099fe:	9000      	str	r0, [sp, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 fce0 	bl	800b3c6 <USBH_BulkSendData>
 8009a06:	e00b      	b.n	8009a20 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	7b5b      	ldrb	r3, [r3, #13]
 8009a16:	2001      	movs	r0, #1
 8009a18:	9000      	str	r0, [sp, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f001 fcd3 	bl	800b3c6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009a28:	e03b      	b.n	8009aa2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	7b5b      	ldrb	r3, [r3, #13]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f001 fff7 	bl	800ba24 <USBH_LL_GetURBState>
 8009a36:	4603      	mov	r3, r0
 8009a38:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d128      	bne.n	8009a92 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	8b12      	ldrh	r2, [r2, #24]
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d90e      	bls.n	8009a6a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	8b12      	ldrh	r2, [r2, #24]
 8009a54:	1a9a      	subs	r2, r3, r2
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	8b12      	ldrh	r2, [r2, #24]
 8009a62:	441a      	add	r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	61da      	str	r2, [r3, #28]
 8009a68:	e002      	b.n	8009a70 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d004      	beq.n	8009a82 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009a80:	e00e      	b.n	8009aa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f868 	bl	8009b60 <USBH_CDC_TransmitCallback>
      break;
 8009a90:	e006      	b.n	8009aa0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009a92:	7afb      	ldrb	r3, [r7, #11]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d103      	bne.n	8009aa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009aa0:	bf00      	nop
  }
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b086      	sub	sp, #24
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009abc:	2300      	movs	r3, #0
 8009abe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d002      	beq.n	8009ad0 <CDC_ProcessReception+0x26>
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	d00e      	beq.n	8009aec <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8009ace:	e043      	b.n	8009b58 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	6a19      	ldr	r1, [r3, #32]
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	8b5a      	ldrh	r2, [r3, #26]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	7b1b      	ldrb	r3, [r3, #12]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 fc97 	bl	800b410 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2204      	movs	r2, #4
 8009ae6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009aea:	e035      	b.n	8009b58 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	7b1b      	ldrb	r3, [r3, #12]
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 ff96 	bl	800ba24 <USBH_LL_GetURBState>
 8009af8:	4603      	mov	r3, r0
 8009afa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009afc:	7cfb      	ldrb	r3, [r7, #19]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d129      	bne.n	8009b56 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	7b1b      	ldrb	r3, [r3, #12]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 fef9 	bl	800b900 <USBH_LL_GetLastXferSize>
 8009b0e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d016      	beq.n	8009b48 <CDC_ProcessReception+0x9e>
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	8b5b      	ldrh	r3, [r3, #26]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d110      	bne.n	8009b48 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	1ad2      	subs	r2, r2, r3
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	6a1a      	ldr	r2, [r3, #32]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	441a      	add	r2, r3
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2203      	movs	r2, #3
 8009b42:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009b46:	e006      	b.n	8009b56 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f80f 	bl	8009b74 <USBH_CDC_ReceiveCallback>
      break;
 8009b56:	bf00      	nop
  }
}
 8009b58:	bf00      	nop
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	e029      	b.n	8009c08 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	79fa      	ldrb	r2, [r7, #7]
 8009bb8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 f81f 	bl	8009c10 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f001 fdc9 	bl	800b798 <USBH_LL_Init>

  return USBH_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	e009      	b.n	8009c32 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	33e0      	adds	r3, #224	@ 0xe0
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	2200      	movs	r2, #0
 8009c2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b0f      	cmp	r3, #15
 8009c36:	d9f2      	bls.n	8009c1e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	e009      	b.n	8009c52 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009c48:	2200      	movs	r2, #0
 8009c4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c58:	d3f1      	bcc.n	8009c3e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2240      	movs	r2, #64	@ 0x40
 8009c7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	331c      	adds	r3, #28
 8009caa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cae:	2100      	movs	r1, #0
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f002 f825 	bl	800bd00 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f002 f81c 	bl	800bd00 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009cce:	2212      	movs	r2, #18
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f002 f814 	bl	800bd00 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009cde:	223e      	movs	r2, #62	@ 0x3e
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f002 f80c 	bl	800bd00 <memset>

  return USBH_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b085      	sub	sp, #20
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d016      	beq.n	8009d34 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10e      	bne.n	8009d2e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009d16:	1c59      	adds	r1, r3, #1
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	33de      	adds	r3, #222	@ 0xde
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]
 8009d2c:	e004      	b.n	8009d38 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	73fb      	strb	r3, [r7, #15]
 8009d32:	e001      	b.n	8009d38 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009d34:	2302      	movs	r3, #2
 8009d36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b085      	sub	sp, #20
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	460b      	mov	r3, r1
 8009d50:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009d5c:	78fa      	ldrb	r2, [r7, #3]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d204      	bcs.n	8009d6c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	78fa      	ldrb	r2, [r7, #3]
 8009d66:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009d6a:	e001      	b.n	8009d70 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b087      	sub	sp, #28
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	70fb      	strb	r3, [r7, #3]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70bb      	strb	r3, [r7, #2]
 8009d94:	4613      	mov	r3, r2
 8009d96:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009da6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009da8:	e025      	b.n	8009df6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	221a      	movs	r2, #26
 8009dae:	fb02 f303 	mul.w	r3, r2, r3
 8009db2:	3308      	adds	r3, #8
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4413      	add	r3, r2
 8009db8:	3302      	adds	r3, #2
 8009dba:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	795b      	ldrb	r3, [r3, #5]
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d002      	beq.n	8009dcc <USBH_FindInterface+0x4e>
 8009dc6:	78fb      	ldrb	r3, [r7, #3]
 8009dc8:	2bff      	cmp	r3, #255	@ 0xff
 8009dca:	d111      	bne.n	8009df0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009dd0:	78ba      	ldrb	r2, [r7, #2]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d002      	beq.n	8009ddc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dd6:	78bb      	ldrb	r3, [r7, #2]
 8009dd8:	2bff      	cmp	r3, #255	@ 0xff
 8009dda:	d109      	bne.n	8009df0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009de0:	787a      	ldrb	r2, [r7, #1]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d002      	beq.n	8009dec <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009de6:	787b      	ldrb	r3, [r7, #1]
 8009de8:	2bff      	cmp	r3, #255	@ 0xff
 8009dea:	d101      	bne.n	8009df0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	e006      	b.n	8009dfe <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	3301      	adds	r3, #1
 8009df4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d9d6      	bls.n	8009daa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009dfc:	23ff      	movs	r3, #255	@ 0xff
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 fcfc 	bl	800b810 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009e18:	2101      	movs	r1, #1
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 fe15 	bl	800ba4a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af04      	add	r7, sp, #16
 8009e32:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009e34:	2302      	movs	r3, #2
 8009e36:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d102      	bne.n	8009e4e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2203      	movs	r2, #3
 8009e4c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b0b      	cmp	r3, #11
 8009e56:	f200 81bc 	bhi.w	800a1d2 <USBH_Process+0x3a6>
 8009e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <USBH_Process+0x34>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009e91 	.word	0x08009e91
 8009e64:	08009ec3 	.word	0x08009ec3
 8009e68:	08009f2d 	.word	0x08009f2d
 8009e6c:	0800a16d 	.word	0x0800a16d
 8009e70:	0800a1d3 	.word	0x0800a1d3
 8009e74:	08009fcd 	.word	0x08009fcd
 8009e78:	0800a113 	.word	0x0800a113
 8009e7c:	0800a003 	.word	0x0800a003
 8009e80:	0800a023 	.word	0x0800a023
 8009e84:	0800a041 	.word	0x0800a041
 8009e88:	0800a085 	.word	0x0800a085
 8009e8c:	0800a155 	.word	0x0800a155
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 819c 	beq.w	800a1d6 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009ea4:	20c8      	movs	r0, #200	@ 0xc8
 8009ea6:	f001 fe1a 	bl	800bade <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 fd0d 	bl	800b8ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009ec0:	e189      	b.n	800a1d6 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d107      	bne.n	8009ede <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009edc:	e18a      	b.n	800a1f4 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009ee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ee8:	d914      	bls.n	8009f14 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009f00:	2b03      	cmp	r3, #3
 8009f02:	d903      	bls.n	8009f0c <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	220d      	movs	r2, #13
 8009f08:	701a      	strb	r2, [r3, #0]
      break;
 8009f0a:	e173      	b.n	800a1f4 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	701a      	strb	r2, [r3, #0]
      break;
 8009f12:	e16f      	b.n	800a1f4 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009f1a:	f103 020a 	add.w	r2, r3, #10
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009f24:	200a      	movs	r0, #10
 8009f26:	f001 fdda 	bl	800bade <USBH_Delay>
      break;
 8009f2a:	e163      	b.n	800a1f4 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d005      	beq.n	8009f42 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f3c:	2104      	movs	r1, #4
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009f42:	2064      	movs	r0, #100	@ 0x64
 8009f44:	f001 fdcb 	bl	800bade <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 fc97 	bl	800b87c <USBH_LL_GetSpeed>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	461a      	mov	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2205      	movs	r2, #5
 8009f5c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009f5e:	2100      	movs	r1, #0
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 faa2 	bl	800b4aa <USBH_AllocPipe>
 8009f66:	4603      	mov	r3, r0
 8009f68:	461a      	mov	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009f6e:	2180      	movs	r1, #128	@ 0x80
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 fa9a 	bl	800b4aa <USBH_AllocPipe>
 8009f76:	4603      	mov	r3, r0
 8009f78:	461a      	mov	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7919      	ldrb	r1, [r3, #4]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f92:	9202      	str	r2, [sp, #8]
 8009f94:	2200      	movs	r2, #0
 8009f96:	9201      	str	r2, [sp, #4]
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2280      	movs	r2, #128	@ 0x80
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 fa54 	bl	800b44c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	7959      	ldrb	r1, [r3, #5]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fb8:	9202      	str	r2, [sp, #8]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	9201      	str	r2, [sp, #4]
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 fa41 	bl	800b44c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009fca:	e113      	b.n	800a1f4 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f917 	bl	800a200 <USBH_HandleEnum>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f040 80fd 	bne.w	800a1da <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d103      	bne.n	8009ffa <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2208      	movs	r2, #8
 8009ff6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009ff8:	e0ef      	b.n	800a1da <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2207      	movs	r2, #7
 8009ffe:	701a      	strb	r2, [r3, #0]
      break;
 800a000:	e0eb      	b.n	800a1da <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 80e8 	beq.w	800a1de <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a014:	2101      	movs	r1, #1
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2208      	movs	r2, #8
 800a01e:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a020:	e0dd      	b.n	800a1de <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fc3f 	bl	800a8ae <USBH_SetCfg>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	f040 80d5 	bne.w	800a1e2 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2209      	movs	r2, #9
 800a03c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a03e:	e0d0      	b.n	800a1e2 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a046:	f003 0320 	and.w	r3, r3, #32
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d016      	beq.n	800a07c <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a04e:	2101      	movs	r1, #1
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fc4f 	bl	800a8f4 <USBH_SetFeature>
 800a056:	4603      	mov	r3, r0
 800a058:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d103      	bne.n	800a06a <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	220a      	movs	r2, #10
 800a066:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a068:	e0bd      	b.n	800a1e6 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b03      	cmp	r3, #3
 800a070:	f040 80b9 	bne.w	800a1e6 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	220a      	movs	r2, #10
 800a078:	701a      	strb	r2, [r3, #0]
      break;
 800a07a:	e0b4      	b.n	800a1e6 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	220a      	movs	r2, #10
 800a080:	701a      	strb	r2, [r3, #0]
      break;
 800a082:	e0b0      	b.n	800a1e6 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 80ad 	beq.w	800a1ea <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a098:	2300      	movs	r3, #0
 800a09a:	73fb      	strb	r3, [r7, #15]
 800a09c:	e016      	b.n	800a0cc <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a09e:	7bfa      	ldrb	r2, [r7, #15]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	32de      	adds	r2, #222	@ 0xde
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	791a      	ldrb	r2, [r3, #4]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d108      	bne.n	800a0c6 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a0b4:	7bfa      	ldrb	r2, [r7, #15]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	32de      	adds	r2, #222	@ 0xde
 800a0ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a0c4:	e005      	b.n	800a0d2 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0e5      	beq.n	800a09e <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d016      	beq.n	800a10a <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	4798      	blx	r3
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d109      	bne.n	800a102 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2206      	movs	r2, #6
 800a0f2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a0fa:	2103      	movs	r1, #3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a100:	e073      	b.n	800a1ea <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	220d      	movs	r2, #13
 800a106:	701a      	strb	r2, [r3, #0]
      break;
 800a108:	e06f      	b.n	800a1ea <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	220d      	movs	r2, #13
 800a10e:	701a      	strb	r2, [r3, #0]
      break;
 800a110:	e06b      	b.n	800a1ea <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d017      	beq.n	800a14c <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	4798      	blx	r3
 800a128:	4603      	mov	r3, r0
 800a12a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	d103      	bne.n	800a13c <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	220b      	movs	r2, #11
 800a138:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a13a:	e058      	b.n	800a1ee <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b02      	cmp	r3, #2
 800a142:	d154      	bne.n	800a1ee <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	220d      	movs	r2, #13
 800a148:	701a      	strb	r2, [r3, #0]
      break;
 800a14a:	e050      	b.n	800a1ee <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	220d      	movs	r2, #13
 800a150:	701a      	strb	r2, [r3, #0]
      break;
 800a152:	e04c      	b.n	800a1ee <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d049      	beq.n	800a1f2 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
      }
      break;
 800a16a:	e042      	b.n	800a1f2 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff fd4b 	bl	8009c10 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a180:	2b00      	cmp	r3, #0
 800a182:	d009      	beq.n	800a198 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d005      	beq.n	800a1ae <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a1a8:	2105      	movs	r1, #5
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d107      	bne.n	800a1ca <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff fe21 	bl	8009e0a <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a1c8:	e014      	b.n	800a1f4 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 fb20 	bl	800b810 <USBH_LL_Start>
      break;
 800a1d0:	e010      	b.n	800a1f4 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a1d2:	bf00      	nop
 800a1d4:	e00e      	b.n	800a1f4 <USBH_Process+0x3c8>
      break;
 800a1d6:	bf00      	nop
 800a1d8:	e00c      	b.n	800a1f4 <USBH_Process+0x3c8>
      break;
 800a1da:	bf00      	nop
 800a1dc:	e00a      	b.n	800a1f4 <USBH_Process+0x3c8>
    break;
 800a1de:	bf00      	nop
 800a1e0:	e008      	b.n	800a1f4 <USBH_Process+0x3c8>
      break;
 800a1e2:	bf00      	nop
 800a1e4:	e006      	b.n	800a1f4 <USBH_Process+0x3c8>
      break;
 800a1e6:	bf00      	nop
 800a1e8:	e004      	b.n	800a1f4 <USBH_Process+0x3c8>
      break;
 800a1ea:	bf00      	nop
 800a1ec:	e002      	b.n	800a1f4 <USBH_Process+0x3c8>
      break;
 800a1ee:	bf00      	nop
 800a1f0:	e000      	b.n	800a1f4 <USBH_Process+0x3c8>
      break;
 800a1f2:	bf00      	nop
  }
  return USBH_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop

0800a200 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af04      	add	r7, sp, #16
 800a206:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a20c:	2301      	movs	r3, #1
 800a20e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	785b      	ldrb	r3, [r3, #1]
 800a214:	2b07      	cmp	r3, #7
 800a216:	f200 81bd 	bhi.w	800a594 <USBH_HandleEnum+0x394>
 800a21a:	a201      	add	r2, pc, #4	@ (adr r2, 800a220 <USBH_HandleEnum+0x20>)
 800a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a220:	0800a241 	.word	0x0800a241
 800a224:	0800a2fb 	.word	0x0800a2fb
 800a228:	0800a365 	.word	0x0800a365
 800a22c:	0800a3ef 	.word	0x0800a3ef
 800a230:	0800a459 	.word	0x0800a459
 800a234:	0800a4c9 	.word	0x0800a4c9
 800a238:	0800a50f 	.word	0x0800a50f
 800a23c:	0800a555 	.word	0x0800a555
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a240:	2108      	movs	r1, #8
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa50 	bl	800a6e8 <USBH_Get_DevDesc>
 800a248:	4603      	mov	r3, r0
 800a24a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d12e      	bne.n	800a2b0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	7919      	ldrb	r1, [r3, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a276:	9202      	str	r2, [sp, #8]
 800a278:	2200      	movs	r2, #0
 800a27a:	9201      	str	r2, [sp, #4]
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	4603      	mov	r3, r0
 800a280:	2280      	movs	r2, #128	@ 0x80
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 f8e2 	bl	800b44c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	7959      	ldrb	r1, [r3, #5]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a29c:	9202      	str	r2, [sp, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	9201      	str	r2, [sp, #4]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f8cf 	bl	800b44c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a2ae:	e173      	b.n	800a598 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	f040 8170 	bne.w	800a598 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a2be:	3301      	adds	r3, #1
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d903      	bls.n	800a2da <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	220d      	movs	r2, #13
 800a2d6:	701a      	strb	r2, [r3, #0]
      break;
 800a2d8:	e15e      	b.n	800a598 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	795b      	ldrb	r3, [r3, #5]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 f903 	bl	800b4ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	791b      	ldrb	r3, [r3, #4]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f001 f8fd 	bl	800b4ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
      break;
 800a2f8:	e14e      	b.n	800a598 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a2fa:	2112      	movs	r1, #18
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f9f3 	bl	800a6e8 <USBH_Get_DevDesc>
 800a302:	4603      	mov	r3, r0
 800a304:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a306:	7bbb      	ldrb	r3, [r7, #14]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d103      	bne.n	800a314 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a312:	e143      	b.n	800a59c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	2b03      	cmp	r3, #3
 800a318:	f040 8140 	bne.w	800a59c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a322:	3301      	adds	r3, #1
 800a324:	b2da      	uxtb	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a332:	2b03      	cmp	r3, #3
 800a334:	d903      	bls.n	800a33e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	220d      	movs	r2, #13
 800a33a:	701a      	strb	r2, [r3, #0]
      break;
 800a33c:	e12e      	b.n	800a59c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	795b      	ldrb	r3, [r3, #5]
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 f8d1 	bl	800b4ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	791b      	ldrb	r3, [r3, #4]
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f001 f8cb 	bl	800b4ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	701a      	strb	r2, [r3, #0]
      break;
 800a362:	e11b      	b.n	800a59c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a364:	2101      	movs	r1, #1
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fa7d 	bl	800a866 <USBH_SetAddress>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a370:	7bbb      	ldrb	r3, [r7, #14]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d130      	bne.n	800a3d8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a376:	2002      	movs	r0, #2
 800a378:	f001 fbb1 	bl	800bade <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2203      	movs	r2, #3
 800a388:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	7919      	ldrb	r1, [r3, #4]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a39e:	9202      	str	r2, [sp, #8]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	9201      	str	r2, [sp, #4]
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2280      	movs	r2, #128	@ 0x80
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 f84e 	bl	800b44c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	7959      	ldrb	r1, [r3, #5]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3c4:	9202      	str	r2, [sp, #8]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	9201      	str	r2, [sp, #4]
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f001 f83b 	bl	800b44c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a3d6:	e0e3      	b.n	800a5a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3d8:	7bbb      	ldrb	r3, [r7, #14]
 800a3da:	2b03      	cmp	r3, #3
 800a3dc:	f040 80e0 	bne.w	800a5a0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	220d      	movs	r2, #13
 800a3e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	705a      	strb	r2, [r3, #1]
      break;
 800a3ec:	e0d8      	b.n	800a5a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a3ee:	2109      	movs	r1, #9
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f9a5 	bl	800a740 <USBH_Get_CfgDesc>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d103      	bne.n	800a408 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2204      	movs	r2, #4
 800a404:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a406:	e0cd      	b.n	800a5a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	f040 80ca 	bne.w	800a5a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a416:	3301      	adds	r3, #1
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a426:	2b03      	cmp	r3, #3
 800a428:	d903      	bls.n	800a432 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	220d      	movs	r2, #13
 800a42e:	701a      	strb	r2, [r3, #0]
      break;
 800a430:	e0b8      	b.n	800a5a4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	795b      	ldrb	r3, [r3, #5]
 800a436:	4619      	mov	r1, r3
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f001 f857 	bl	800b4ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	791b      	ldrb	r3, [r3, #4]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 f851 	bl	800b4ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	701a      	strb	r2, [r3, #0]
      break;
 800a456:	e0a5      	b.n	800a5a4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f96d 	bl	800a740 <USBH_Get_CfgDesc>
 800a466:	4603      	mov	r3, r0
 800a468:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d103      	bne.n	800a478 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2205      	movs	r2, #5
 800a474:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a476:	e097      	b.n	800a5a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	f040 8094 	bne.w	800a5a8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a486:	3301      	adds	r3, #1
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a496:	2b03      	cmp	r3, #3
 800a498:	d903      	bls.n	800a4a2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	220d      	movs	r2, #13
 800a49e:	701a      	strb	r2, [r3, #0]
      break;
 800a4a0:	e082      	b.n	800a5a8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	795b      	ldrb	r3, [r3, #5]
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f001 f81f 	bl	800b4ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	791b      	ldrb	r3, [r3, #4]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 f819 	bl	800b4ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	701a      	strb	r2, [r3, #0]
      break;
 800a4c6:	e06f      	b.n	800a5a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d019      	beq.n	800a506 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4de:	23ff      	movs	r3, #255	@ 0xff
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f957 	bl	800a794 <USBH_Get_StringDesc>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4ea:	7bbb      	ldrb	r3, [r7, #14]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d103      	bne.n	800a4f8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2206      	movs	r2, #6
 800a4f4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a4f6:	e059      	b.n	800a5ac <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	d156      	bne.n	800a5ac <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2206      	movs	r2, #6
 800a502:	705a      	strb	r2, [r3, #1]
      break;
 800a504:	e052      	b.n	800a5ac <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2206      	movs	r2, #6
 800a50a:	705a      	strb	r2, [r3, #1]
      break;
 800a50c:	e04e      	b.n	800a5ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a514:	2b00      	cmp	r3, #0
 800a516:	d019      	beq.n	800a54c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a524:	23ff      	movs	r3, #255	@ 0xff
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f934 	bl	800a794 <USBH_Get_StringDesc>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a530:	7bbb      	ldrb	r3, [r7, #14]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d103      	bne.n	800a53e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2207      	movs	r2, #7
 800a53a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a53c:	e038      	b.n	800a5b0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	2b03      	cmp	r3, #3
 800a542:	d135      	bne.n	800a5b0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2207      	movs	r2, #7
 800a548:	705a      	strb	r2, [r3, #1]
      break;
 800a54a:	e031      	b.n	800a5b0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2207      	movs	r2, #7
 800a550:	705a      	strb	r2, [r3, #1]
      break;
 800a552:	e02d      	b.n	800a5b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d017      	beq.n	800a58e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a56a:	23ff      	movs	r3, #255	@ 0xff
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f911 	bl	800a794 <USBH_Get_StringDesc>
 800a572:	4603      	mov	r3, r0
 800a574:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a576:	7bbb      	ldrb	r3, [r7, #14]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a580:	e018      	b.n	800a5b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	2b03      	cmp	r3, #3
 800a586:	d115      	bne.n	800a5b4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
      break;
 800a58c:	e012      	b.n	800a5b4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]
      break;
 800a592:	e00f      	b.n	800a5b4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a594:	bf00      	nop
 800a596:	e00e      	b.n	800a5b6 <USBH_HandleEnum+0x3b6>
      break;
 800a598:	bf00      	nop
 800a59a:	e00c      	b.n	800a5b6 <USBH_HandleEnum+0x3b6>
      break;
 800a59c:	bf00      	nop
 800a59e:	e00a      	b.n	800a5b6 <USBH_HandleEnum+0x3b6>
      break;
 800a5a0:	bf00      	nop
 800a5a2:	e008      	b.n	800a5b6 <USBH_HandleEnum+0x3b6>
      break;
 800a5a4:	bf00      	nop
 800a5a6:	e006      	b.n	800a5b6 <USBH_HandleEnum+0x3b6>
      break;
 800a5a8:	bf00      	nop
 800a5aa:	e004      	b.n	800a5b6 <USBH_HandleEnum+0x3b6>
      break;
 800a5ac:	bf00      	nop
 800a5ae:	e002      	b.n	800a5b6 <USBH_HandleEnum+0x3b6>
      break;
 800a5b0:	bf00      	nop
 800a5b2:	e000      	b.n	800a5b6 <USBH_HandleEnum+0x3b6>
      break;
 800a5b4:	bf00      	nop
  }
  return Status;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a5d2:	bf00      	nop
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a5ec:	1c5a      	adds	r2, r3, #1
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f804 	bl	800a602 <USBH_HandleSof>
}
 800a5fa:	bf00      	nop
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b0b      	cmp	r3, #11
 800a612:	d10a      	bne.n	800a62a <USBH_HandleSof+0x28>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d005      	beq.n	800a62a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
  }
}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a642:	bf00      	nop
}
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a64e:	b480      	push	{r7}
 800a650:	b083      	sub	sp, #12
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a666:	bf00      	nop
}
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 f8c0 	bl	800b846 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	791b      	ldrb	r3, [r3, #4]
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 ff0d 	bl	800b4ec <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	795b      	ldrb	r3, [r3, #5]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 ff07 	bl	800b4ec <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af02      	add	r7, sp, #8
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a6f4:	887b      	ldrh	r3, [r7, #2]
 800a6f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6fa:	d901      	bls.n	800a700 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e01b      	b.n	800a738 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a706:	887b      	ldrh	r3, [r7, #2]
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	4613      	mov	r3, r2
 800a70c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a710:	2100      	movs	r1, #0
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f872 	bl	800a7fc <USBH_GetDescriptor>
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d109      	bne.n	800a736 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a728:	887a      	ldrh	r2, [r7, #2]
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f929 	bl	800a984 <USBH_ParseDevDesc>
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af02      	add	r7, sp, #8
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	331c      	adds	r3, #28
 800a750:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a752:	887b      	ldrh	r3, [r7, #2]
 800a754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a758:	d901      	bls.n	800a75e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e016      	b.n	800a78c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a75e:	887b      	ldrh	r3, [r7, #2]
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a768:	2100      	movs	r1, #0
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f846 	bl	800a7fc <USBH_GetDescriptor>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d107      	bne.n	800a78a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a77a:	887b      	ldrh	r3, [r7, #2]
 800a77c:	461a      	mov	r2, r3
 800a77e:	68b9      	ldr	r1, [r7, #8]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 f9af 	bl	800aae4 <USBH_ParseCfgDesc>
 800a786:	4603      	mov	r3, r0
 800a788:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af02      	add	r7, sp, #8
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	607a      	str	r2, [r7, #4]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	72fb      	strb	r3, [r7, #11]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a7a8:	893b      	ldrh	r3, [r7, #8]
 800a7aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7ae:	d802      	bhi.n	800a7b6 <USBH_Get_StringDesc+0x22>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e01c      	b.n	800a7f4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a7ba:	7afb      	ldrb	r3, [r7, #11]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a7c2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a7ca:	893b      	ldrh	r3, [r7, #8]
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f812 	bl	800a7fc <USBH_GetDescriptor>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d107      	bne.n	800a7f2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a7e8:	893a      	ldrh	r2, [r7, #8]
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f000 fb8c 	bl	800af0a <USBH_ParseStringDesc>
  }

  return status;
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	607b      	str	r3, [r7, #4]
 800a806:	460b      	mov	r3, r1
 800a808:	72fb      	strb	r3, [r7, #11]
 800a80a:	4613      	mov	r3, r2
 800a80c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	789b      	ldrb	r3, [r3, #2]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d11c      	bne.n	800a850 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a816:	7afb      	ldrb	r3, [r7, #11]
 800a818:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2206      	movs	r2, #6
 800a826:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	893a      	ldrh	r2, [r7, #8]
 800a82c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a82e:	893b      	ldrh	r3, [r7, #8]
 800a830:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a834:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a838:	d104      	bne.n	800a844 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f240 4209 	movw	r2, #1033	@ 0x409
 800a840:	829a      	strh	r2, [r3, #20]
 800a842:	e002      	b.n	800a84a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8b3a      	ldrh	r2, [r7, #24]
 800a84e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a850:	8b3b      	ldrh	r3, [r7, #24]
 800a852:	461a      	mov	r2, r3
 800a854:	6879      	ldr	r1, [r7, #4]
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 fba4 	bl	800afa4 <USBH_CtlReq>
 800a85c:	4603      	mov	r3, r0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	460b      	mov	r3, r1
 800a870:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	789b      	ldrb	r3, [r3, #2]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d10f      	bne.n	800a89a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2205      	movs	r2, #5
 800a884:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a886:	78fb      	ldrb	r3, [r7, #3]
 800a888:	b29a      	uxth	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a89a:	2200      	movs	r2, #0
 800a89c:	2100      	movs	r1, #0
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fb80 	bl	800afa4 <USBH_CtlReq>
 800a8a4:	4603      	mov	r3, r0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b082      	sub	sp, #8
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	789b      	ldrb	r3, [r3, #2]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d10e      	bne.n	800a8e0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2209      	movs	r2, #9
 800a8cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	887a      	ldrh	r2, [r7, #2]
 800a8d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fb5d 	bl	800afa4 <USBH_CtlReq>
 800a8ea:	4603      	mov	r3, r0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	789b      	ldrb	r3, [r3, #2]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d10f      	bne.n	800a928 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2203      	movs	r2, #3
 800a912:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a928:	2200      	movs	r2, #0
 800a92a:	2100      	movs	r1, #0
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fb39 	bl	800afa4 <USBH_CtlReq>
 800a932:	4603      	mov	r3, r0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	789b      	ldrb	r3, [r3, #2]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d10f      	bne.n	800a970 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a962:	78fb      	ldrb	r3, [r7, #3]
 800a964:	b29a      	uxth	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a970:	2200      	movs	r2, #0
 800a972:	2100      	movs	r1, #0
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fb15 	bl	800afa4 <USBH_CtlReq>
 800a97a:	4603      	mov	r3, r0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a984:	b480      	push	{r7}
 800a986:	b087      	sub	sp, #28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4613      	mov	r3, r2
 800a990:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a998:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	e094      	b.n	800aad2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	785a      	ldrb	r2, [r3, #1]
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	3302      	adds	r3, #2
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	3303      	adds	r3, #3
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	021b      	lsls	r3, r3, #8
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	791a      	ldrb	r2, [r3, #4]
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	795a      	ldrb	r2, [r3, #5]
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	799a      	ldrb	r2, [r3, #6]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	79da      	ldrb	r2, [r3, #7]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d004      	beq.n	800aa06 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d11b      	bne.n	800aa3e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	79db      	ldrb	r3, [r3, #7]
 800aa0a:	2b20      	cmp	r3, #32
 800aa0c:	dc0f      	bgt.n	800aa2e <USBH_ParseDevDesc+0xaa>
 800aa0e:	2b08      	cmp	r3, #8
 800aa10:	db0f      	blt.n	800aa32 <USBH_ParseDevDesc+0xae>
 800aa12:	3b08      	subs	r3, #8
 800aa14:	4a32      	ldr	r2, [pc, #200]	@ (800aae0 <USBH_ParseDevDesc+0x15c>)
 800aa16:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bf14      	ite	ne
 800aa22:	2301      	movne	r3, #1
 800aa24:	2300      	moveq	r3, #0
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d106      	bne.n	800aa3a <USBH_ParseDevDesc+0xb6>
 800aa2c:	e001      	b.n	800aa32 <USBH_ParseDevDesc+0xae>
 800aa2e:	2b40      	cmp	r3, #64	@ 0x40
 800aa30:	d003      	beq.n	800aa3a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	2208      	movs	r2, #8
 800aa36:	71da      	strb	r2, [r3, #7]
        break;
 800aa38:	e000      	b.n	800aa3c <USBH_ParseDevDesc+0xb8>
        break;
 800aa3a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800aa3c:	e00e      	b.n	800aa5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d107      	bne.n	800aa58 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	79db      	ldrb	r3, [r3, #7]
 800aa4c:	2b08      	cmp	r3, #8
 800aa4e:	d005      	beq.n	800aa5c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2208      	movs	r2, #8
 800aa54:	71da      	strb	r2, [r3, #7]
 800aa56:	e001      	b.n	800aa5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800aa5c:	88fb      	ldrh	r3, [r7, #6]
 800aa5e:	2b08      	cmp	r3, #8
 800aa60:	d936      	bls.n	800aad0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	3308      	adds	r3, #8
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	3309      	adds	r3, #9
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	021b      	lsls	r3, r3, #8
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	4313      	orrs	r3, r2
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	330a      	adds	r3, #10
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	461a      	mov	r2, r3
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	330b      	adds	r3, #11
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	021b      	lsls	r3, r3, #8
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	330c      	adds	r3, #12
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	330d      	adds	r3, #13
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	021b      	lsls	r3, r3, #8
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	7b9a      	ldrb	r2, [r3, #14]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	7bda      	ldrb	r2, [r3, #15]
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	7c1a      	ldrb	r2, [r3, #16]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	7c5a      	ldrb	r2, [r3, #17]
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	01000101 	.word	0x01000101

0800aae4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08c      	sub	sp, #48	@ 0x30
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800aaf8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ab12:	2302      	movs	r3, #2
 800ab14:	e0de      	b.n	800acd4 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800ab1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b09      	cmp	r3, #9
 800ab20:	d002      	beq.n	800ab28 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ab22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab24:	2209      	movs	r2, #9
 800ab26:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	781a      	ldrb	r2, [r3, #0]
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	785a      	ldrb	r2, [r3, #1]
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	3303      	adds	r3, #3
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	021b      	lsls	r3, r3, #8
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab52:	bf28      	it	cs
 800ab54:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	791a      	ldrb	r2, [r3, #4]
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	795a      	ldrb	r2, [r3, #5]
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	799a      	ldrb	r2, [r3, #6]
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	79da      	ldrb	r2, [r3, #7]
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	7a1a      	ldrb	r2, [r3, #8]
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	2b09      	cmp	r3, #9
 800ab8a:	f240 80a1 	bls.w	800acd0 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800ab8e:	2309      	movs	r3, #9
 800ab90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab96:	e085      	b.n	800aca4 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab98:	f107 0316 	add.w	r3, r7, #22
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aba0:	f000 f9e6 	bl	800af70 <USBH_GetNextDesc>
 800aba4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800aba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba8:	785b      	ldrb	r3, [r3, #1]
 800abaa:	2b04      	cmp	r3, #4
 800abac:	d17a      	bne.n	800aca4 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800abae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b09      	cmp	r3, #9
 800abb4:	d002      	beq.n	800abbc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800abb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb8:	2209      	movs	r2, #9
 800abba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800abbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abc0:	221a      	movs	r2, #26
 800abc2:	fb02 f303 	mul.w	r3, r2, r3
 800abc6:	3308      	adds	r3, #8
 800abc8:	6a3a      	ldr	r2, [r7, #32]
 800abca:	4413      	add	r3, r2
 800abcc:	3302      	adds	r3, #2
 800abce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800abd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abd2:	69f8      	ldr	r0, [r7, #28]
 800abd4:	f000 f882 	bl	800acdc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800abd8:	2300      	movs	r3, #0
 800abda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800abe2:	e043      	b.n	800ac6c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800abe4:	f107 0316 	add.w	r3, r7, #22
 800abe8:	4619      	mov	r1, r3
 800abea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abec:	f000 f9c0 	bl	800af70 <USBH_GetNextDesc>
 800abf0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800abf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	2b05      	cmp	r3, #5
 800abf8:	d138      	bne.n	800ac6c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	795b      	ldrb	r3, [r3, #5]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d113      	bne.n	800ac2a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d003      	beq.n	800ac12 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	799b      	ldrb	r3, [r3, #6]
 800ac0e:	2b03      	cmp	r3, #3
 800ac10:	d10b      	bne.n	800ac2a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	79db      	ldrb	r3, [r3, #7]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10b      	bne.n	800ac32 <USBH_ParseCfgDesc+0x14e>
 800ac1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	2b09      	cmp	r3, #9
 800ac20:	d007      	beq.n	800ac32 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800ac22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac24:	2209      	movs	r2, #9
 800ac26:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ac28:	e003      	b.n	800ac32 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ac2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2c:	2207      	movs	r2, #7
 800ac2e:	701a      	strb	r2, [r3, #0]
 800ac30:	e000      	b.n	800ac34 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ac32:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ac34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac38:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ac3c:	3201      	adds	r2, #1
 800ac3e:	00d2      	lsls	r2, r2, #3
 800ac40:	211a      	movs	r1, #26
 800ac42:	fb01 f303 	mul.w	r3, r1, r3
 800ac46:	4413      	add	r3, r2
 800ac48:	3308      	adds	r3, #8
 800ac4a:	6a3a      	ldr	r2, [r7, #32]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3304      	adds	r3, #4
 800ac50:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ac52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac54:	69b9      	ldr	r1, [r7, #24]
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f000 f86f 	bl	800ad3a <USBH_ParseEPDesc>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ac62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac66:	3301      	adds	r3, #1
 800ac68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ac6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d80a      	bhi.n	800ac8a <USBH_ParseCfgDesc+0x1a6>
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	791b      	ldrb	r3, [r3, #4]
 800ac78:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d204      	bcs.n	800ac8a <USBH_ParseCfgDesc+0x1a6>
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	885a      	ldrh	r2, [r3, #2]
 800ac84:	8afb      	ldrh	r3, [r7, #22]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d8ac      	bhi.n	800abe4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	791b      	ldrb	r3, [r3, #4]
 800ac8e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d201      	bcs.n	800ac9a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800ac96:	2303      	movs	r3, #3
 800ac98:	e01c      	b.n	800acd4 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800ac9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac9e:	3301      	adds	r3, #1
 800aca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d805      	bhi.n	800acb8 <USBH_ParseCfgDesc+0x1d4>
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	885a      	ldrh	r2, [r3, #2]
 800acb0:	8afb      	ldrh	r3, [r7, #22]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	f63f af70 	bhi.w	800ab98 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800acb8:	6a3b      	ldr	r3, [r7, #32]
 800acba:	791b      	ldrb	r3, [r3, #4]
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	bf28      	it	cs
 800acc0:	2302      	movcs	r3, #2
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800acc8:	429a      	cmp	r2, r3
 800acca:	d201      	bcs.n	800acd0 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800accc:	2303      	movs	r3, #3
 800acce:	e001      	b.n	800acd4 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800acd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3730      	adds	r7, #48	@ 0x30
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	781a      	ldrb	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	785a      	ldrb	r2, [r3, #1]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	789a      	ldrb	r2, [r3, #2]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	78da      	ldrb	r2, [r3, #3]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	791a      	ldrb	r2, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	795a      	ldrb	r2, [r3, #5]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	799a      	ldrb	r2, [r3, #6]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	79da      	ldrb	r2, [r3, #7]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	7a1a      	ldrb	r2, [r3, #8]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	721a      	strb	r2, [r3, #8]
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b087      	sub	sp, #28
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	781a      	ldrb	r2, [r3, #0]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	785a      	ldrb	r2, [r3, #1]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	789a      	ldrb	r2, [r3, #2]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	78da      	ldrb	r2, [r3, #3]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	461a      	mov	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	3305      	adds	r3, #5
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	799a      	ldrb	r2, [r3, #6]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	889b      	ldrh	r3, [r3, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d009      	beq.n	800ada8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ad98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad9c:	d804      	bhi.n	800ada8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ada2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ada6:	d901      	bls.n	800adac <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ada8:	2303      	movs	r3, #3
 800adaa:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d136      	bne.n	800ae24 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	78db      	ldrb	r3, [r3, #3]
 800adba:	f003 0303 	and.w	r3, r3, #3
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d108      	bne.n	800add4 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	889b      	ldrh	r3, [r3, #4]
 800adc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adca:	f240 8097 	bls.w	800aefc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800adce:	2303      	movs	r3, #3
 800add0:	75fb      	strb	r3, [r7, #23]
 800add2:	e093      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	78db      	ldrb	r3, [r3, #3]
 800add8:	f003 0303 	and.w	r3, r3, #3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d107      	bne.n	800adf0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	889b      	ldrh	r3, [r3, #4]
 800ade4:	2b40      	cmp	r3, #64	@ 0x40
 800ade6:	f240 8089 	bls.w	800aefc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800adea:	2303      	movs	r3, #3
 800adec:	75fb      	strb	r3, [r7, #23]
 800adee:	e085      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	78db      	ldrb	r3, [r3, #3]
 800adf4:	f003 0303 	and.w	r3, r3, #3
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d005      	beq.n	800ae08 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	78db      	ldrb	r3, [r3, #3]
 800ae00:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ae04:	2b03      	cmp	r3, #3
 800ae06:	d10a      	bne.n	800ae1e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	799b      	ldrb	r3, [r3, #6]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d003      	beq.n	800ae18 <USBH_ParseEPDesc+0xde>
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	799b      	ldrb	r3, [r3, #6]
 800ae14:	2b10      	cmp	r3, #16
 800ae16:	d970      	bls.n	800aefa <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ae1c:	e06d      	b.n	800aefa <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	75fb      	strb	r3, [r7, #23]
 800ae22:	e06b      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d13c      	bne.n	800aea8 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	78db      	ldrb	r3, [r3, #3]
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d005      	beq.n	800ae46 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	78db      	ldrb	r3, [r3, #3]
 800ae3e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d106      	bne.n	800ae54 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	889b      	ldrh	r3, [r3, #4]
 800ae4a:	2b40      	cmp	r3, #64	@ 0x40
 800ae4c:	d956      	bls.n	800aefc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ae52:	e053      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	78db      	ldrb	r3, [r3, #3]
 800ae58:	f003 0303 	and.w	r3, r3, #3
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d10e      	bne.n	800ae7e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	799b      	ldrb	r3, [r3, #6]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d007      	beq.n	800ae78 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ae6c:	2b10      	cmp	r3, #16
 800ae6e:	d803      	bhi.n	800ae78 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ae74:	2b40      	cmp	r3, #64	@ 0x40
 800ae76:	d941      	bls.n	800aefc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	75fb      	strb	r3, [r7, #23]
 800ae7c:	e03e      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	78db      	ldrb	r3, [r3, #3]
 800ae82:	f003 0303 	and.w	r3, r3, #3
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d10b      	bne.n	800aea2 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	799b      	ldrb	r3, [r3, #6]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d004      	beq.n	800ae9c <USBH_ParseEPDesc+0x162>
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	889b      	ldrh	r3, [r3, #4]
 800ae96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae9a:	d32f      	bcc.n	800aefc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	75fb      	strb	r3, [r7, #23]
 800aea0:	e02c      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aea2:	2303      	movs	r3, #3
 800aea4:	75fb      	strb	r3, [r7, #23]
 800aea6:	e029      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d120      	bne.n	800aef4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	78db      	ldrb	r3, [r3, #3]
 800aeb6:	f003 0303 	and.w	r3, r3, #3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	889b      	ldrh	r3, [r3, #4]
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	d01a      	beq.n	800aefc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aec6:	2303      	movs	r3, #3
 800aec8:	75fb      	strb	r3, [r7, #23]
 800aeca:	e017      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	78db      	ldrb	r3, [r3, #3]
 800aed0:	f003 0303 	and.w	r3, r3, #3
 800aed4:	2b03      	cmp	r3, #3
 800aed6:	d10a      	bne.n	800aeee <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	799b      	ldrb	r3, [r3, #6]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <USBH_ParseEPDesc+0x1ae>
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	889b      	ldrh	r3, [r3, #4]
 800aee4:	2b08      	cmp	r3, #8
 800aee6:	d909      	bls.n	800aefc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aee8:	2303      	movs	r3, #3
 800aeea:	75fb      	strb	r3, [r7, #23]
 800aeec:	e006      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aeee:	2303      	movs	r3, #3
 800aef0:	75fb      	strb	r3, [r7, #23]
 800aef2:	e003      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800aef4:	2303      	movs	r3, #3
 800aef6:	75fb      	strb	r3, [r7, #23]
 800aef8:	e000      	b.n	800aefc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aefa:	bf00      	nop
  }

  return status;
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	371c      	adds	r7, #28
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b087      	sub	sp, #28
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	4613      	mov	r3, r2
 800af16:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3301      	adds	r3, #1
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d120      	bne.n	800af64 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	1e9a      	subs	r2, r3, #2
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	4293      	cmp	r3, r2
 800af2c:	bf28      	it	cs
 800af2e:	4613      	movcs	r3, r2
 800af30:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3302      	adds	r3, #2
 800af36:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800af38:	2300      	movs	r3, #0
 800af3a:	82fb      	strh	r3, [r7, #22]
 800af3c:	e00b      	b.n	800af56 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800af3e:	8afb      	ldrh	r3, [r7, #22]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	4413      	add	r3, r2
 800af44:	781a      	ldrb	r2, [r3, #0]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	701a      	strb	r2, [r3, #0]
      pdest++;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	3301      	adds	r3, #1
 800af4e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800af50:	8afb      	ldrh	r3, [r7, #22]
 800af52:	3302      	adds	r3, #2
 800af54:	82fb      	strh	r3, [r7, #22]
 800af56:	8afa      	ldrh	r2, [r7, #22]
 800af58:	8abb      	ldrh	r3, [r7, #20]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d3ef      	bcc.n	800af3e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]
  }
}
 800af64:	bf00      	nop
 800af66:	371c      	adds	r7, #28
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	7812      	ldrb	r2, [r2, #0]
 800af82:	4413      	add	r3, r2
 800af84:	b29a      	uxth	r2, r3
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4413      	add	r3, r2
 800af94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800af96:	68fb      	ldr	r3, [r7, #12]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	4613      	mov	r3, r2
 800afb0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800afb2:	2301      	movs	r3, #1
 800afb4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	789b      	ldrb	r3, [r3, #2]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d002      	beq.n	800afc4 <USBH_CtlReq+0x20>
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d00f      	beq.n	800afe2 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800afc2:	e027      	b.n	800b014 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	88fa      	ldrh	r2, [r7, #6]
 800afce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2201      	movs	r2, #1
 800afd4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2202      	movs	r2, #2
 800afda:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800afdc:	2301      	movs	r3, #1
 800afde:	75fb      	strb	r3, [r7, #23]
      break;
 800afe0:	e018      	b.n	800b014 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f000 f81c 	bl	800b020 <USBH_HandleControl>
 800afe8:	4603      	mov	r3, r0
 800afea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800afec:	7dfb      	ldrb	r3, [r7, #23]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d002      	beq.n	800aff8 <USBH_CtlReq+0x54>
 800aff2:	7dfb      	ldrb	r3, [r7, #23]
 800aff4:	2b03      	cmp	r3, #3
 800aff6:	d106      	bne.n	800b006 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2201      	movs	r2, #1
 800affc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	761a      	strb	r2, [r3, #24]
      break;
 800b004:	e005      	b.n	800b012 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b006:	7dfb      	ldrb	r3, [r7, #23]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d102      	bne.n	800b012 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2201      	movs	r2, #1
 800b010:	709a      	strb	r2, [r3, #2]
      break;
 800b012:	bf00      	nop
  }
  return status;
 800b014:	7dfb      	ldrb	r3, [r7, #23]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af02      	add	r7, sp, #8
 800b026:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b028:	2301      	movs	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b02c:	2300      	movs	r3, #0
 800b02e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	7e1b      	ldrb	r3, [r3, #24]
 800b034:	3b01      	subs	r3, #1
 800b036:	2b0a      	cmp	r3, #10
 800b038:	f200 8157 	bhi.w	800b2ea <USBH_HandleControl+0x2ca>
 800b03c:	a201      	add	r2, pc, #4	@ (adr r2, 800b044 <USBH_HandleControl+0x24>)
 800b03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b042:	bf00      	nop
 800b044:	0800b071 	.word	0x0800b071
 800b048:	0800b08b 	.word	0x0800b08b
 800b04c:	0800b0f5 	.word	0x0800b0f5
 800b050:	0800b11b 	.word	0x0800b11b
 800b054:	0800b155 	.word	0x0800b155
 800b058:	0800b17f 	.word	0x0800b17f
 800b05c:	0800b1d1 	.word	0x0800b1d1
 800b060:	0800b1f3 	.word	0x0800b1f3
 800b064:	0800b22f 	.word	0x0800b22f
 800b068:	0800b255 	.word	0x0800b255
 800b06c:	0800b293 	.word	0x0800b293
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f103 0110 	add.w	r1, r3, #16
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	795b      	ldrb	r3, [r3, #5]
 800b07a:	461a      	mov	r2, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f945 	bl	800b30c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2202      	movs	r2, #2
 800b086:	761a      	strb	r2, [r3, #24]
      break;
 800b088:	e13a      	b.n	800b300 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	795b      	ldrb	r3, [r3, #5]
 800b08e:	4619      	mov	r1, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fcc7 	bl	800ba24 <USBH_LL_GetURBState>
 800b096:	4603      	mov	r3, r0
 800b098:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d11e      	bne.n	800b0de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	7c1b      	ldrb	r3, [r3, #16]
 800b0a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b0a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	8adb      	ldrh	r3, [r3, #22]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00a      	beq.n	800b0c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b0b2:	7b7b      	ldrb	r3, [r7, #13]
 800b0b4:	2b80      	cmp	r3, #128	@ 0x80
 800b0b6:	d103      	bne.n	800b0c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2203      	movs	r2, #3
 800b0bc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b0be:	e116      	b.n	800b2ee <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2205      	movs	r2, #5
 800b0c4:	761a      	strb	r2, [r3, #24]
      break;
 800b0c6:	e112      	b.n	800b2ee <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800b0c8:	7b7b      	ldrb	r3, [r7, #13]
 800b0ca:	2b80      	cmp	r3, #128	@ 0x80
 800b0cc:	d103      	bne.n	800b0d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2209      	movs	r2, #9
 800b0d2:	761a      	strb	r2, [r3, #24]
      break;
 800b0d4:	e10b      	b.n	800b2ee <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2207      	movs	r2, #7
 800b0da:	761a      	strb	r2, [r3, #24]
      break;
 800b0dc:	e107      	b.n	800b2ee <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	d003      	beq.n	800b0ec <USBH_HandleControl+0xcc>
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	f040 8101 	bne.w	800b2ee <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	220b      	movs	r2, #11
 800b0f0:	761a      	strb	r2, [r3, #24]
      break;
 800b0f2:	e0fc      	b.n	800b2ee <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6899      	ldr	r1, [r3, #8]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	899a      	ldrh	r2, [r3, #12]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	791b      	ldrb	r3, [r3, #4]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f93c 	bl	800b38a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2204      	movs	r2, #4
 800b116:	761a      	strb	r2, [r3, #24]
      break;
 800b118:	e0f2      	b.n	800b300 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	791b      	ldrb	r3, [r3, #4]
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fc7f 	bl	800ba24 <USBH_LL_GetURBState>
 800b126:	4603      	mov	r3, r0
 800b128:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b12a:	7bbb      	ldrb	r3, [r7, #14]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d103      	bne.n	800b138 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2209      	movs	r2, #9
 800b134:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b136:	e0dc      	b.n	800b2f2 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	2b05      	cmp	r3, #5
 800b13c:	d102      	bne.n	800b144 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800b13e:	2303      	movs	r3, #3
 800b140:	73fb      	strb	r3, [r7, #15]
      break;
 800b142:	e0d6      	b.n	800b2f2 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	2b04      	cmp	r3, #4
 800b148:	f040 80d3 	bne.w	800b2f2 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	220b      	movs	r2, #11
 800b150:	761a      	strb	r2, [r3, #24]
      break;
 800b152:	e0ce      	b.n	800b2f2 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6899      	ldr	r1, [r3, #8]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	899a      	ldrh	r2, [r3, #12]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	795b      	ldrb	r3, [r3, #5]
 800b160:	2001      	movs	r0, #1
 800b162:	9000      	str	r0, [sp, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f8eb 	bl	800b340 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b170:	b29a      	uxth	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2206      	movs	r2, #6
 800b17a:	761a      	strb	r2, [r3, #24]
      break;
 800b17c:	e0c0      	b.n	800b300 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	795b      	ldrb	r3, [r3, #5]
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fc4d 	bl	800ba24 <USBH_LL_GetURBState>
 800b18a:	4603      	mov	r3, r0
 800b18c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d103      	bne.n	800b19c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2207      	movs	r2, #7
 800b198:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b19a:	e0ac      	b.n	800b2f6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	2b05      	cmp	r3, #5
 800b1a0:	d105      	bne.n	800b1ae <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	220c      	movs	r2, #12
 800b1a6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ac:	e0a3      	b.n	800b2f6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	d103      	bne.n	800b1bc <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2205      	movs	r2, #5
 800b1b8:	761a      	strb	r2, [r3, #24]
      break;
 800b1ba:	e09c      	b.n	800b2f6 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	2b04      	cmp	r3, #4
 800b1c0:	f040 8099 	bne.w	800b2f6 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	220b      	movs	r2, #11
 800b1c8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ce:	e092      	b.n	800b2f6 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	791b      	ldrb	r3, [r3, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f8d6 	bl	800b38a <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2208      	movs	r2, #8
 800b1ee:	761a      	strb	r2, [r3, #24]

      break;
 800b1f0:	e086      	b.n	800b300 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	791b      	ldrb	r3, [r3, #4]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fc13 	bl	800ba24 <USBH_LL_GetURBState>
 800b1fe:	4603      	mov	r3, r0
 800b200:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b202:	7bbb      	ldrb	r3, [r7, #14]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d105      	bne.n	800b214 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	220d      	movs	r2, #13
 800b20c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b212:	e072      	b.n	800b2fa <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800b214:	7bbb      	ldrb	r3, [r7, #14]
 800b216:	2b04      	cmp	r3, #4
 800b218:	d103      	bne.n	800b222 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	220b      	movs	r2, #11
 800b21e:	761a      	strb	r2, [r3, #24]
      break;
 800b220:	e06b      	b.n	800b2fa <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	2b05      	cmp	r3, #5
 800b226:	d168      	bne.n	800b2fa <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800b228:	2303      	movs	r3, #3
 800b22a:	73fb      	strb	r3, [r7, #15]
      break;
 800b22c:	e065      	b.n	800b2fa <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	795b      	ldrb	r3, [r3, #5]
 800b232:	2201      	movs	r2, #1
 800b234:	9200      	str	r2, [sp, #0]
 800b236:	2200      	movs	r2, #0
 800b238:	2100      	movs	r1, #0
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f880 	bl	800b340 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b246:	b29a      	uxth	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	220a      	movs	r2, #10
 800b250:	761a      	strb	r2, [r3, #24]
      break;
 800b252:	e055      	b.n	800b300 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	795b      	ldrb	r3, [r3, #5]
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fbe2 	bl	800ba24 <USBH_LL_GetURBState>
 800b260:	4603      	mov	r3, r0
 800b262:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b264:	7bbb      	ldrb	r3, [r7, #14]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d105      	bne.n	800b276 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	220d      	movs	r2, #13
 800b272:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b274:	e043      	b.n	800b2fe <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b276:	7bbb      	ldrb	r3, [r7, #14]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d103      	bne.n	800b284 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2209      	movs	r2, #9
 800b280:	761a      	strb	r2, [r3, #24]
      break;
 800b282:	e03c      	b.n	800b2fe <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b284:	7bbb      	ldrb	r3, [r7, #14]
 800b286:	2b04      	cmp	r3, #4
 800b288:	d139      	bne.n	800b2fe <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	220b      	movs	r2, #11
 800b28e:	761a      	strb	r2, [r3, #24]
      break;
 800b290:	e035      	b.n	800b2fe <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	7e5b      	ldrb	r3, [r3, #25]
 800b296:	3301      	adds	r3, #1
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	765a      	strb	r2, [r3, #25]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7e5b      	ldrb	r3, [r3, #25]
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d806      	bhi.n	800b2b4 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b2b2:	e025      	b.n	800b300 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b2ba:	2106      	movs	r1, #6
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	795b      	ldrb	r3, [r3, #5]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f90d 	bl	800b4ec <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	791b      	ldrb	r3, [r3, #4]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f907 	bl	800b4ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2e8:	e00a      	b.n	800b300 <USBH_HandleControl+0x2e0>

    default:
      break;
 800b2ea:	bf00      	nop
 800b2ec:	e008      	b.n	800b300 <USBH_HandleControl+0x2e0>
      break;
 800b2ee:	bf00      	nop
 800b2f0:	e006      	b.n	800b300 <USBH_HandleControl+0x2e0>
      break;
 800b2f2:	bf00      	nop
 800b2f4:	e004      	b.n	800b300 <USBH_HandleControl+0x2e0>
      break;
 800b2f6:	bf00      	nop
 800b2f8:	e002      	b.n	800b300 <USBH_HandleControl+0x2e0>
      break;
 800b2fa:	bf00      	nop
 800b2fc:	e000      	b.n	800b300 <USBH_HandleControl+0x2e0>
      break;
 800b2fe:	bf00      	nop
  }

  return status;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop

0800b30c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af04      	add	r7, sp, #16
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	4613      	mov	r3, r2
 800b318:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b31a:	79f9      	ldrb	r1, [r7, #7]
 800b31c:	2300      	movs	r3, #0
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	2308      	movs	r3, #8
 800b322:	9302      	str	r3, [sp, #8]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	2300      	movs	r3, #0
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	2300      	movs	r3, #0
 800b32e:	2200      	movs	r2, #0
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 fb46 	bl	800b9c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af04      	add	r7, sp, #16
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	4611      	mov	r1, r2
 800b34c:	461a      	mov	r2, r3
 800b34e:	460b      	mov	r3, r1
 800b350:	80fb      	strh	r3, [r7, #6]
 800b352:	4613      	mov	r3, r2
 800b354:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b360:	2300      	movs	r3, #0
 800b362:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b364:	7979      	ldrb	r1, [r7, #5]
 800b366:	7e3b      	ldrb	r3, [r7, #24]
 800b368:	9303      	str	r3, [sp, #12]
 800b36a:	88fb      	ldrh	r3, [r7, #6]
 800b36c:	9302      	str	r3, [sp, #8]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	2301      	movs	r3, #1
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	2300      	movs	r3, #0
 800b378:	2200      	movs	r2, #0
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 fb21 	bl	800b9c2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b088      	sub	sp, #32
 800b38e:	af04      	add	r7, sp, #16
 800b390:	60f8      	str	r0, [r7, #12]
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	4611      	mov	r1, r2
 800b396:	461a      	mov	r2, r3
 800b398:	460b      	mov	r3, r1
 800b39a:	80fb      	strh	r3, [r7, #6]
 800b39c:	4613      	mov	r3, r2
 800b39e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b3a0:	7979      	ldrb	r1, [r7, #5]
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	9303      	str	r3, [sp, #12]
 800b3a6:	88fb      	ldrh	r3, [r7, #6]
 800b3a8:	9302      	str	r3, [sp, #8]
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f000 fb03 	bl	800b9c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b3bc:	2300      	movs	r3, #0

}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b088      	sub	sp, #32
 800b3ca:	af04      	add	r7, sp, #16
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	80fb      	strh	r3, [r7, #6]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b3ea:	7979      	ldrb	r1, [r7, #5]
 800b3ec:	7e3b      	ldrb	r3, [r7, #24]
 800b3ee:	9303      	str	r3, [sp, #12]
 800b3f0:	88fb      	ldrh	r3, [r7, #6]
 800b3f2:	9302      	str	r3, [sp, #8]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	2200      	movs	r2, #0
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 fade 	bl	800b9c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af04      	add	r7, sp, #16
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	4611      	mov	r1, r2
 800b41c:	461a      	mov	r2, r3
 800b41e:	460b      	mov	r3, r1
 800b420:	80fb      	strh	r3, [r7, #6]
 800b422:	4613      	mov	r3, r2
 800b424:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b426:	7979      	ldrb	r1, [r7, #5]
 800b428:	2300      	movs	r3, #0
 800b42a:	9303      	str	r3, [sp, #12]
 800b42c:	88fb      	ldrh	r3, [r7, #6]
 800b42e:	9302      	str	r3, [sp, #8]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	2301      	movs	r3, #1
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	2302      	movs	r3, #2
 800b43a:	2201      	movs	r2, #1
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f000 fac0 	bl	800b9c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b086      	sub	sp, #24
 800b450:	af04      	add	r7, sp, #16
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	4608      	mov	r0, r1
 800b456:	4611      	mov	r1, r2
 800b458:	461a      	mov	r2, r3
 800b45a:	4603      	mov	r3, r0
 800b45c:	70fb      	strb	r3, [r7, #3]
 800b45e:	460b      	mov	r3, r1
 800b460:	70bb      	strb	r3, [r7, #2]
 800b462:	4613      	mov	r3, r2
 800b464:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b466:	7878      	ldrb	r0, [r7, #1]
 800b468:	78ba      	ldrb	r2, [r7, #2]
 800b46a:	78f9      	ldrb	r1, [r7, #3]
 800b46c:	8b3b      	ldrh	r3, [r7, #24]
 800b46e:	9302      	str	r3, [sp, #8]
 800b470:	7d3b      	ldrb	r3, [r7, #20]
 800b472:	9301      	str	r3, [sp, #4]
 800b474:	7c3b      	ldrb	r3, [r7, #16]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	4603      	mov	r3, r0
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fa53 	bl	800b926 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b496:	78fb      	ldrb	r3, [r7, #3]
 800b498:	4619      	mov	r1, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa72 	bl	800b984 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f836 	bl	800b528 <USBH_GetFreePipe>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b4c0:	89fb      	ldrh	r3, [r7, #14]
 800b4c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d00a      	beq.n	800b4e0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b4ca:	78fa      	ldrb	r2, [r7, #3]
 800b4cc:	89fb      	ldrh	r3, [r7, #14]
 800b4ce:	f003 030f 	and.w	r3, r3, #15
 800b4d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b4d6:	6879      	ldr	r1, [r7, #4]
 800b4d8:	33e0      	adds	r3, #224	@ 0xe0
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	440b      	add	r3, r1
 800b4de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b4e0:	89fb      	ldrh	r3, [r7, #14]
 800b4e2:	b2db      	uxtb	r3, r3
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b4f8:	78fb      	ldrb	r3, [r7, #3]
 800b4fa:	2b0f      	cmp	r3, #15
 800b4fc:	d80d      	bhi.n	800b51a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b4fe:	78fb      	ldrb	r3, [r7, #3]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	33e0      	adds	r3, #224	@ 0xe0
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4413      	add	r3, r2
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	78fb      	ldrb	r3, [r7, #3]
 800b50c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b510:	6879      	ldr	r1, [r7, #4]
 800b512:	33e0      	adds	r3, #224	@ 0xe0
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	440b      	add	r3, r1
 800b518:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b534:	2300      	movs	r3, #0
 800b536:	73fb      	strb	r3, [r7, #15]
 800b538:	e00f      	b.n	800b55a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	33e0      	adds	r3, #224	@ 0xe0
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d102      	bne.n	800b554 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	b29b      	uxth	r3, r3
 800b552:	e007      	b.n	800b564 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b554:	7bfb      	ldrb	r3, [r7, #15]
 800b556:	3301      	adds	r3, #1
 800b558:	73fb      	strb	r3, [r7, #15]
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b0f      	cmp	r3, #15
 800b55e:	d9ec      	bls.n	800b53a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b574:	2201      	movs	r2, #1
 800b576:	490e      	ldr	r1, [pc, #56]	@ (800b5b0 <MX_USB_HOST_Init+0x40>)
 800b578:	480e      	ldr	r0, [pc, #56]	@ (800b5b4 <MX_USB_HOST_Init+0x44>)
 800b57a:	f7fe fb0f 	bl	8009b9c <USBH_Init>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b584:	f7f6 f9c4 	bl	8001910 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b588:	490b      	ldr	r1, [pc, #44]	@ (800b5b8 <MX_USB_HOST_Init+0x48>)
 800b58a:	480a      	ldr	r0, [pc, #40]	@ (800b5b4 <MX_USB_HOST_Init+0x44>)
 800b58c:	f7fe fbb1 	bl	8009cf2 <USBH_RegisterClass>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b596:	f7f6 f9bb 	bl	8001910 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b59a:	4806      	ldr	r0, [pc, #24]	@ (800b5b4 <MX_USB_HOST_Init+0x44>)
 800b59c:	f7fe fc35 	bl	8009e0a <USBH_Start>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b5a6:	f7f6 f9b3 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b5aa:	bf00      	nop
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	0800b5d1 	.word	0x0800b5d1
 800b5b4:	20000524 	.word	0x20000524
 800b5b8:	2000000c 	.word	0x2000000c

0800b5bc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b5c0:	4802      	ldr	r0, [pc, #8]	@ (800b5cc <MX_USB_HOST_Process+0x10>)
 800b5c2:	f7fe fc33 	bl	8009e2c <USBH_Process>
}
 800b5c6:	bf00      	nop
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20000524 	.word	0x20000524

0800b5d0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b5dc:	78fb      	ldrb	r3, [r7, #3]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	2b04      	cmp	r3, #4
 800b5e2:	d819      	bhi.n	800b618 <USBH_UserProcess+0x48>
 800b5e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5ec <USBH_UserProcess+0x1c>)
 800b5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ea:	bf00      	nop
 800b5ec:	0800b619 	.word	0x0800b619
 800b5f0:	0800b609 	.word	0x0800b609
 800b5f4:	0800b619 	.word	0x0800b619
 800b5f8:	0800b611 	.word	0x0800b611
 800b5fc:	0800b601 	.word	0x0800b601
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b600:	4b09      	ldr	r3, [pc, #36]	@ (800b628 <USBH_UserProcess+0x58>)
 800b602:	2203      	movs	r2, #3
 800b604:	701a      	strb	r2, [r3, #0]
  break;
 800b606:	e008      	b.n	800b61a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b608:	4b07      	ldr	r3, [pc, #28]	@ (800b628 <USBH_UserProcess+0x58>)
 800b60a:	2202      	movs	r2, #2
 800b60c:	701a      	strb	r2, [r3, #0]
  break;
 800b60e:	e004      	b.n	800b61a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b610:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <USBH_UserProcess+0x58>)
 800b612:	2201      	movs	r2, #1
 800b614:	701a      	strb	r2, [r3, #0]
  break;
 800b616:	e000      	b.n	800b61a <USBH_UserProcess+0x4a>

  default:
  break;
 800b618:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b61a:	bf00      	nop
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	200008fc 	.word	0x200008fc

0800b62c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08a      	sub	sp, #40	@ 0x28
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b634:	f107 0314 	add.w	r3, r7, #20
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	605a      	str	r2, [r3, #4]
 800b63e:	609a      	str	r2, [r3, #8]
 800b640:	60da      	str	r2, [r3, #12]
 800b642:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b64c:	d147      	bne.n	800b6de <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b64e:	2300      	movs	r3, #0
 800b650:	613b      	str	r3, [r7, #16]
 800b652:	4b25      	ldr	r3, [pc, #148]	@ (800b6e8 <HAL_HCD_MspInit+0xbc>)
 800b654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b656:	4a24      	ldr	r2, [pc, #144]	@ (800b6e8 <HAL_HCD_MspInit+0xbc>)
 800b658:	f043 0301 	orr.w	r3, r3, #1
 800b65c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b65e:	4b22      	ldr	r3, [pc, #136]	@ (800b6e8 <HAL_HCD_MspInit+0xbc>)
 800b660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b662:	f003 0301 	and.w	r3, r3, #1
 800b666:	613b      	str	r3, [r7, #16]
 800b668:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b66a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b66e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b670:	2300      	movs	r3, #0
 800b672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b674:	2300      	movs	r3, #0
 800b676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b678:	f107 0314 	add.w	r3, r7, #20
 800b67c:	4619      	mov	r1, r3
 800b67e:	481b      	ldr	r0, [pc, #108]	@ (800b6ec <HAL_HCD_MspInit+0xc0>)
 800b680:	f7f7 fe3e 	bl	8003300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b684:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b68a:	2302      	movs	r3, #2
 800b68c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b68e:	2300      	movs	r3, #0
 800b690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b692:	2300      	movs	r3, #0
 800b694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b696:	230a      	movs	r3, #10
 800b698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b69a:	f107 0314 	add.w	r3, r7, #20
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4812      	ldr	r0, [pc, #72]	@ (800b6ec <HAL_HCD_MspInit+0xc0>)
 800b6a2:	f7f7 fe2d 	bl	8003300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b6a6:	4b10      	ldr	r3, [pc, #64]	@ (800b6e8 <HAL_HCD_MspInit+0xbc>)
 800b6a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6aa:	4a0f      	ldr	r2, [pc, #60]	@ (800b6e8 <HAL_HCD_MspInit+0xbc>)
 800b6ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6b0:	6353      	str	r3, [r2, #52]	@ 0x34
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e8 <HAL_HCD_MspInit+0xbc>)
 800b6b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6ba:	4a0b      	ldr	r2, [pc, #44]	@ (800b6e8 <HAL_HCD_MspInit+0xbc>)
 800b6bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b6c0:	6453      	str	r3, [r2, #68]	@ 0x44
 800b6c2:	4b09      	ldr	r3, [pc, #36]	@ (800b6e8 <HAL_HCD_MspInit+0xbc>)
 800b6c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	2043      	movs	r0, #67	@ 0x43
 800b6d4:	f7f7 f9db 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6d8:	2043      	movs	r0, #67	@ 0x43
 800b6da:	f7f7 f9f4 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6de:	bf00      	nop
 800b6e0:	3728      	adds	r7, #40	@ 0x28
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	40023800 	.word	0x40023800
 800b6ec:	40020000 	.word	0x40020000

0800b6f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe ff6d 	bl	800a5de <USBH_LL_IncTimer>
}
 800b704:	bf00      	nop
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe ffa9 	bl	800a672 <USBH_LL_Connect>
}
 800b720:	bf00      	nop
 800b722:	3708      	adds	r7, #8
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b736:	4618      	mov	r0, r3
 800b738:	f7fe ffb2 	bl	800a6a0 <USBH_LL_Disconnect>
}
 800b73c:	bf00      	nop
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	460b      	mov	r3, r1
 800b74e:	70fb      	strb	r3, [r7, #3]
 800b750:	4613      	mov	r3, r2
 800b752:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe ff5f 	bl	800a632 <USBH_LL_PortEnabled>
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fe ff5f 	bl	800a64e <USBH_LL_PortDisabled>
}
 800b790:	bf00      	nop
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d12a      	bne.n	800b800 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b7aa:	4a18      	ldr	r2, [pc, #96]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a15      	ldr	r2, [pc, #84]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7b6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b7ba:	4b14      	ldr	r3, [pc, #80]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b7c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b7c2:	4b12      	ldr	r3, [pc, #72]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7c4:	2208      	movs	r2, #8
 800b7c6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b7c8:	4b10      	ldr	r3, [pc, #64]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b7ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b7d4:	4b0d      	ldr	r3, [pc, #52]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b7da:	4b0c      	ldr	r3, [pc, #48]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b7e0:	480a      	ldr	r0, [pc, #40]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7e2:	f7f7 ff73 	bl	80036cc <HAL_HCD_Init>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b7ec:	f7f6 f890 	bl	8001910 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b7f0:	4806      	ldr	r0, [pc, #24]	@ (800b80c <USBH_LL_Init+0x74>)
 800b7f2:	f7f8 fbd3 	bl	8003f9c <HAL_HCD_GetCurrentFrame>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7fe fee0 	bl	800a5c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20000900 	.word	0x20000900

0800b810 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b826:	4618      	mov	r0, r3
 800b828:	f7f8 fb40 	bl	8003eac <HAL_HCD_Start>
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b830:	7bfb      	ldrb	r3, [r7, #15]
 800b832:	4618      	mov	r0, r3
 800b834:	f000 f95e 	bl	800baf4 <USBH_Get_USB_Status>
 800b838:	4603      	mov	r3, r0
 800b83a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b83c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7f8 fb48 	bl	8003ef2 <HAL_HCD_Stop>
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b866:	7bfb      	ldrb	r3, [r7, #15]
 800b868:	4618      	mov	r0, r3
 800b86a:	f000 f943 	bl	800baf4 <USBH_Get_USB_Status>
 800b86e:	4603      	mov	r3, r0
 800b870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b872:	7bbb      	ldrb	r3, [r7, #14]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b884:	2301      	movs	r3, #1
 800b886:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b88e:	4618      	mov	r0, r3
 800b890:	f7f8 fb92 	bl	8003fb8 <HAL_HCD_GetCurrentSpeed>
 800b894:	4603      	mov	r3, r0
 800b896:	2b02      	cmp	r3, #2
 800b898:	d00c      	beq.n	800b8b4 <USBH_LL_GetSpeed+0x38>
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d80d      	bhi.n	800b8ba <USBH_LL_GetSpeed+0x3e>
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d002      	beq.n	800b8a8 <USBH_LL_GetSpeed+0x2c>
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d003      	beq.n	800b8ae <USBH_LL_GetSpeed+0x32>
 800b8a6:	e008      	b.n	800b8ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ac:	e008      	b.n	800b8c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b2:	e005      	b.n	800b8c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b8:	e002      	b.n	800b8c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b8be:	bf00      	nop
  }
  return  speed;
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7f8 fb23 	bl	8003f2c <HAL_HCD_ResetPort>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 f901 	bl	800baf4 <USBH_Get_USB_Status>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	460b      	mov	r3, r1
 800b90a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b912:	78fa      	ldrb	r2, [r7, #3]
 800b914:	4611      	mov	r1, r2
 800b916:	4618      	mov	r0, r3
 800b918:	f7f8 fb2b 	bl	8003f72 <HAL_HCD_HC_GetXferCount>
 800b91c:	4603      	mov	r3, r0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b926:	b590      	push	{r4, r7, lr}
 800b928:	b089      	sub	sp, #36	@ 0x24
 800b92a:	af04      	add	r7, sp, #16
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	4608      	mov	r0, r1
 800b930:	4611      	mov	r1, r2
 800b932:	461a      	mov	r2, r3
 800b934:	4603      	mov	r3, r0
 800b936:	70fb      	strb	r3, [r7, #3]
 800b938:	460b      	mov	r3, r1
 800b93a:	70bb      	strb	r3, [r7, #2]
 800b93c:	4613      	mov	r3, r2
 800b93e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b94e:	787c      	ldrb	r4, [r7, #1]
 800b950:	78ba      	ldrb	r2, [r7, #2]
 800b952:	78f9      	ldrb	r1, [r7, #3]
 800b954:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b956:	9302      	str	r3, [sp, #8]
 800b958:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b962:	9300      	str	r3, [sp, #0]
 800b964:	4623      	mov	r3, r4
 800b966:	f7f7 ff18 	bl	800379a <HAL_HCD_HC_Init>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	4618      	mov	r0, r3
 800b972:	f000 f8bf 	bl	800baf4 <USBH_Get_USB_Status>
 800b976:	4603      	mov	r3, r0
 800b978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	bd90      	pop	{r4, r7, pc}

0800b984 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b99e:	78fa      	ldrb	r2, [r7, #3]
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7f7 ffb1 	bl	800390a <HAL_HCD_HC_Halt>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f8a0 	bl	800baf4 <USBH_Get_USB_Status>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b9c2:	b590      	push	{r4, r7, lr}
 800b9c4:	b089      	sub	sp, #36	@ 0x24
 800b9c6:	af04      	add	r7, sp, #16
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	70fb      	strb	r3, [r7, #3]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	70bb      	strb	r3, [r7, #2]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b9ea:	787c      	ldrb	r4, [r7, #1]
 800b9ec:	78ba      	ldrb	r2, [r7, #2]
 800b9ee:	78f9      	ldrb	r1, [r7, #3]
 800b9f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b9f4:	9303      	str	r3, [sp, #12]
 800b9f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b9f8:	9302      	str	r3, [sp, #8]
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	4623      	mov	r3, r4
 800ba06:	f7f7 ffa3 	bl	8003950 <HAL_HCD_HC_SubmitRequest>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 f86f 	bl	800baf4 <USBH_Get_USB_Status>
 800ba16:	4603      	mov	r3, r0
 800ba18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd90      	pop	{r4, r7, pc}

0800ba24 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ba36:	78fa      	ldrb	r2, [r7, #3]
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7f8 fa84 	bl	8003f48 <HAL_HCD_HC_GetURBState>
 800ba40:	4603      	mov	r3, r0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b082      	sub	sp, #8
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	460b      	mov	r3, r1
 800ba54:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d103      	bne.n	800ba68 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 f872 	bl	800bb4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ba68:	20c8      	movs	r0, #200	@ 0xc8
 800ba6a:	f7f6 fb0f 	bl	800208c <HAL_Delay>
  return USBH_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	70fb      	strb	r3, [r7, #3]
 800ba84:	4613      	mov	r3, r2
 800ba86:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ba8e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ba90:	78fa      	ldrb	r2, [r7, #3]
 800ba92:	68f9      	ldr	r1, [r7, #12]
 800ba94:	4613      	mov	r3, r2
 800ba96:	011b      	lsls	r3, r3, #4
 800ba98:	1a9b      	subs	r3, r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	440b      	add	r3, r1
 800ba9e:	3317      	adds	r3, #23
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00a      	beq.n	800babc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800baa6:	78fa      	ldrb	r2, [r7, #3]
 800baa8:	68f9      	ldr	r1, [r7, #12]
 800baaa:	4613      	mov	r3, r2
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	1a9b      	subs	r3, r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	440b      	add	r3, r1
 800bab4:	333c      	adds	r3, #60	@ 0x3c
 800bab6:	78ba      	ldrb	r2, [r7, #2]
 800bab8:	701a      	strb	r2, [r3, #0]
 800baba:	e009      	b.n	800bad0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800babc:	78fa      	ldrb	r2, [r7, #3]
 800babe:	68f9      	ldr	r1, [r7, #12]
 800bac0:	4613      	mov	r3, r2
 800bac2:	011b      	lsls	r3, r3, #4
 800bac4:	1a9b      	subs	r3, r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	440b      	add	r3, r1
 800baca:	333d      	adds	r3, #61	@ 0x3d
 800bacc:	78ba      	ldrb	r2, [r7, #2]
 800bace:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7f6 fad0 	bl	800208c <HAL_Delay>
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	4603      	mov	r3, r0
 800bafc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d817      	bhi.n	800bb38 <USBH_Get_USB_Status+0x44>
 800bb08:	a201      	add	r2, pc, #4	@ (adr r2, 800bb10 <USBH_Get_USB_Status+0x1c>)
 800bb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0e:	bf00      	nop
 800bb10:	0800bb21 	.word	0x0800bb21
 800bb14:	0800bb27 	.word	0x0800bb27
 800bb18:	0800bb2d 	.word	0x0800bb2d
 800bb1c:	0800bb33 	.word	0x0800bb33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]
    break;
 800bb24:	e00b      	b.n	800bb3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bb26:	2302      	movs	r3, #2
 800bb28:	73fb      	strb	r3, [r7, #15]
    break;
 800bb2a:	e008      	b.n	800bb3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb30:	e005      	b.n	800bb3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bb32:	2302      	movs	r3, #2
 800bb34:	73fb      	strb	r3, [r7, #15]
    break;
 800bb36:	e002      	b.n	800bb3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bb38:	2302      	movs	r3, #2
 800bb3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb3c:	bf00      	nop
  }
  return usb_status;
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3714      	adds	r7, #20
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bb5a:	79fb      	ldrb	r3, [r7, #7]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d102      	bne.n	800bb66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]
 800bb64:	e001      	b.n	800bb6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bb66:	2301      	movs	r3, #1
 800bb68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	2101      	movs	r1, #1
 800bb70:	4803      	ldr	r0, [pc, #12]	@ (800bb80 <MX_DriverVbusFS+0x34>)
 800bb72:	f7f7 fd79 	bl	8003668 <HAL_GPIO_WritePin>
}
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	40020800 	.word	0x40020800

0800bb84 <malloc>:
 800bb84:	4b02      	ldr	r3, [pc, #8]	@ (800bb90 <malloc+0xc>)
 800bb86:	4601      	mov	r1, r0
 800bb88:	6818      	ldr	r0, [r3, #0]
 800bb8a:	f000 b82d 	b.w	800bbe8 <_malloc_r>
 800bb8e:	bf00      	nop
 800bb90:	2000002c 	.word	0x2000002c

0800bb94 <free>:
 800bb94:	4b02      	ldr	r3, [pc, #8]	@ (800bba0 <free+0xc>)
 800bb96:	4601      	mov	r1, r0
 800bb98:	6818      	ldr	r0, [r3, #0]
 800bb9a:	f000 b8f5 	b.w	800bd88 <_free_r>
 800bb9e:	bf00      	nop
 800bba0:	2000002c 	.word	0x2000002c

0800bba4 <sbrk_aligned>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	4e0f      	ldr	r6, [pc, #60]	@ (800bbe4 <sbrk_aligned+0x40>)
 800bba8:	460c      	mov	r4, r1
 800bbaa:	6831      	ldr	r1, [r6, #0]
 800bbac:	4605      	mov	r5, r0
 800bbae:	b911      	cbnz	r1, 800bbb6 <sbrk_aligned+0x12>
 800bbb0:	f000 f8ae 	bl	800bd10 <_sbrk_r>
 800bbb4:	6030      	str	r0, [r6, #0]
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4628      	mov	r0, r5
 800bbba:	f000 f8a9 	bl	800bd10 <_sbrk_r>
 800bbbe:	1c43      	adds	r3, r0, #1
 800bbc0:	d103      	bne.n	800bbca <sbrk_aligned+0x26>
 800bbc2:	f04f 34ff 	mov.w	r4, #4294967295
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	bd70      	pop	{r4, r5, r6, pc}
 800bbca:	1cc4      	adds	r4, r0, #3
 800bbcc:	f024 0403 	bic.w	r4, r4, #3
 800bbd0:	42a0      	cmp	r0, r4
 800bbd2:	d0f8      	beq.n	800bbc6 <sbrk_aligned+0x22>
 800bbd4:	1a21      	subs	r1, r4, r0
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	f000 f89a 	bl	800bd10 <_sbrk_r>
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d1f2      	bne.n	800bbc6 <sbrk_aligned+0x22>
 800bbe0:	e7ef      	b.n	800bbc2 <sbrk_aligned+0x1e>
 800bbe2:	bf00      	nop
 800bbe4:	20000ce0 	.word	0x20000ce0

0800bbe8 <_malloc_r>:
 800bbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbec:	1ccd      	adds	r5, r1, #3
 800bbee:	f025 0503 	bic.w	r5, r5, #3
 800bbf2:	3508      	adds	r5, #8
 800bbf4:	2d0c      	cmp	r5, #12
 800bbf6:	bf38      	it	cc
 800bbf8:	250c      	movcc	r5, #12
 800bbfa:	2d00      	cmp	r5, #0
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	db01      	blt.n	800bc04 <_malloc_r+0x1c>
 800bc00:	42a9      	cmp	r1, r5
 800bc02:	d904      	bls.n	800bc0e <_malloc_r+0x26>
 800bc04:	230c      	movs	r3, #12
 800bc06:	6033      	str	r3, [r6, #0]
 800bc08:	2000      	movs	r0, #0
 800bc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bce4 <_malloc_r+0xfc>
 800bc12:	f000 f869 	bl	800bce8 <__malloc_lock>
 800bc16:	f8d8 3000 	ldr.w	r3, [r8]
 800bc1a:	461c      	mov	r4, r3
 800bc1c:	bb44      	cbnz	r4, 800bc70 <_malloc_r+0x88>
 800bc1e:	4629      	mov	r1, r5
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7ff ffbf 	bl	800bba4 <sbrk_aligned>
 800bc26:	1c43      	adds	r3, r0, #1
 800bc28:	4604      	mov	r4, r0
 800bc2a:	d158      	bne.n	800bcde <_malloc_r+0xf6>
 800bc2c:	f8d8 4000 	ldr.w	r4, [r8]
 800bc30:	4627      	mov	r7, r4
 800bc32:	2f00      	cmp	r7, #0
 800bc34:	d143      	bne.n	800bcbe <_malloc_r+0xd6>
 800bc36:	2c00      	cmp	r4, #0
 800bc38:	d04b      	beq.n	800bcd2 <_malloc_r+0xea>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	4630      	mov	r0, r6
 800bc40:	eb04 0903 	add.w	r9, r4, r3
 800bc44:	f000 f864 	bl	800bd10 <_sbrk_r>
 800bc48:	4581      	cmp	r9, r0
 800bc4a:	d142      	bne.n	800bcd2 <_malloc_r+0xea>
 800bc4c:	6821      	ldr	r1, [r4, #0]
 800bc4e:	1a6d      	subs	r5, r5, r1
 800bc50:	4629      	mov	r1, r5
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7ff ffa6 	bl	800bba4 <sbrk_aligned>
 800bc58:	3001      	adds	r0, #1
 800bc5a:	d03a      	beq.n	800bcd2 <_malloc_r+0xea>
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	442b      	add	r3, r5
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	f8d8 3000 	ldr.w	r3, [r8]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	bb62      	cbnz	r2, 800bcc4 <_malloc_r+0xdc>
 800bc6a:	f8c8 7000 	str.w	r7, [r8]
 800bc6e:	e00f      	b.n	800bc90 <_malloc_r+0xa8>
 800bc70:	6822      	ldr	r2, [r4, #0]
 800bc72:	1b52      	subs	r2, r2, r5
 800bc74:	d420      	bmi.n	800bcb8 <_malloc_r+0xd0>
 800bc76:	2a0b      	cmp	r2, #11
 800bc78:	d917      	bls.n	800bcaa <_malloc_r+0xc2>
 800bc7a:	1961      	adds	r1, r4, r5
 800bc7c:	42a3      	cmp	r3, r4
 800bc7e:	6025      	str	r5, [r4, #0]
 800bc80:	bf18      	it	ne
 800bc82:	6059      	strne	r1, [r3, #4]
 800bc84:	6863      	ldr	r3, [r4, #4]
 800bc86:	bf08      	it	eq
 800bc88:	f8c8 1000 	streq.w	r1, [r8]
 800bc8c:	5162      	str	r2, [r4, r5]
 800bc8e:	604b      	str	r3, [r1, #4]
 800bc90:	4630      	mov	r0, r6
 800bc92:	f000 f82f 	bl	800bcf4 <__malloc_unlock>
 800bc96:	f104 000b 	add.w	r0, r4, #11
 800bc9a:	1d23      	adds	r3, r4, #4
 800bc9c:	f020 0007 	bic.w	r0, r0, #7
 800bca0:	1ac2      	subs	r2, r0, r3
 800bca2:	bf1c      	itt	ne
 800bca4:	1a1b      	subne	r3, r3, r0
 800bca6:	50a3      	strne	r3, [r4, r2]
 800bca8:	e7af      	b.n	800bc0a <_malloc_r+0x22>
 800bcaa:	6862      	ldr	r2, [r4, #4]
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	bf0c      	ite	eq
 800bcb0:	f8c8 2000 	streq.w	r2, [r8]
 800bcb4:	605a      	strne	r2, [r3, #4]
 800bcb6:	e7eb      	b.n	800bc90 <_malloc_r+0xa8>
 800bcb8:	4623      	mov	r3, r4
 800bcba:	6864      	ldr	r4, [r4, #4]
 800bcbc:	e7ae      	b.n	800bc1c <_malloc_r+0x34>
 800bcbe:	463c      	mov	r4, r7
 800bcc0:	687f      	ldr	r7, [r7, #4]
 800bcc2:	e7b6      	b.n	800bc32 <_malloc_r+0x4a>
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	d1fb      	bne.n	800bcc4 <_malloc_r+0xdc>
 800bccc:	2300      	movs	r3, #0
 800bcce:	6053      	str	r3, [r2, #4]
 800bcd0:	e7de      	b.n	800bc90 <_malloc_r+0xa8>
 800bcd2:	230c      	movs	r3, #12
 800bcd4:	6033      	str	r3, [r6, #0]
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f000 f80c 	bl	800bcf4 <__malloc_unlock>
 800bcdc:	e794      	b.n	800bc08 <_malloc_r+0x20>
 800bcde:	6005      	str	r5, [r0, #0]
 800bce0:	e7d6      	b.n	800bc90 <_malloc_r+0xa8>
 800bce2:	bf00      	nop
 800bce4:	20000ce4 	.word	0x20000ce4

0800bce8 <__malloc_lock>:
 800bce8:	4801      	ldr	r0, [pc, #4]	@ (800bcf0 <__malloc_lock+0x8>)
 800bcea:	f000 b84b 	b.w	800bd84 <__retarget_lock_acquire_recursive>
 800bcee:	bf00      	nop
 800bcf0:	20000e24 	.word	0x20000e24

0800bcf4 <__malloc_unlock>:
 800bcf4:	4801      	ldr	r0, [pc, #4]	@ (800bcfc <__malloc_unlock+0x8>)
 800bcf6:	f000 b846 	b.w	800bd86 <__retarget_lock_release_recursive>
 800bcfa:	bf00      	nop
 800bcfc:	20000e24 	.word	0x20000e24

0800bd00 <memset>:
 800bd00:	4402      	add	r2, r0
 800bd02:	4603      	mov	r3, r0
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d100      	bne.n	800bd0a <memset+0xa>
 800bd08:	4770      	bx	lr
 800bd0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd0e:	e7f9      	b.n	800bd04 <memset+0x4>

0800bd10 <_sbrk_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d06      	ldr	r5, [pc, #24]	@ (800bd2c <_sbrk_r+0x1c>)
 800bd14:	2300      	movs	r3, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	602b      	str	r3, [r5, #0]
 800bd1c:	f7f6 f8d2 	bl	8001ec4 <_sbrk>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_sbrk_r+0x1a>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_sbrk_r+0x1a>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	20000e20 	.word	0x20000e20

0800bd30 <__errno>:
 800bd30:	4b01      	ldr	r3, [pc, #4]	@ (800bd38 <__errno+0x8>)
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	2000002c 	.word	0x2000002c

0800bd3c <__libc_init_array>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	4d0d      	ldr	r5, [pc, #52]	@ (800bd74 <__libc_init_array+0x38>)
 800bd40:	4c0d      	ldr	r4, [pc, #52]	@ (800bd78 <__libc_init_array+0x3c>)
 800bd42:	1b64      	subs	r4, r4, r5
 800bd44:	10a4      	asrs	r4, r4, #2
 800bd46:	2600      	movs	r6, #0
 800bd48:	42a6      	cmp	r6, r4
 800bd4a:	d109      	bne.n	800bd60 <__libc_init_array+0x24>
 800bd4c:	4d0b      	ldr	r5, [pc, #44]	@ (800bd7c <__libc_init_array+0x40>)
 800bd4e:	4c0c      	ldr	r4, [pc, #48]	@ (800bd80 <__libc_init_array+0x44>)
 800bd50:	f000 f864 	bl	800be1c <_init>
 800bd54:	1b64      	subs	r4, r4, r5
 800bd56:	10a4      	asrs	r4, r4, #2
 800bd58:	2600      	movs	r6, #0
 800bd5a:	42a6      	cmp	r6, r4
 800bd5c:	d105      	bne.n	800bd6a <__libc_init_array+0x2e>
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd64:	4798      	blx	r3
 800bd66:	3601      	adds	r6, #1
 800bd68:	e7ee      	b.n	800bd48 <__libc_init_array+0xc>
 800bd6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd6e:	4798      	blx	r3
 800bd70:	3601      	adds	r6, #1
 800bd72:	e7f2      	b.n	800bd5a <__libc_init_array+0x1e>
 800bd74:	0800be70 	.word	0x0800be70
 800bd78:	0800be70 	.word	0x0800be70
 800bd7c:	0800be70 	.word	0x0800be70
 800bd80:	0800be74 	.word	0x0800be74

0800bd84 <__retarget_lock_acquire_recursive>:
 800bd84:	4770      	bx	lr

0800bd86 <__retarget_lock_release_recursive>:
 800bd86:	4770      	bx	lr

0800bd88 <_free_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	2900      	cmp	r1, #0
 800bd8e:	d041      	beq.n	800be14 <_free_r+0x8c>
 800bd90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd94:	1f0c      	subs	r4, r1, #4
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	bfb8      	it	lt
 800bd9a:	18e4      	addlt	r4, r4, r3
 800bd9c:	f7ff ffa4 	bl	800bce8 <__malloc_lock>
 800bda0:	4a1d      	ldr	r2, [pc, #116]	@ (800be18 <_free_r+0x90>)
 800bda2:	6813      	ldr	r3, [r2, #0]
 800bda4:	b933      	cbnz	r3, 800bdb4 <_free_r+0x2c>
 800bda6:	6063      	str	r3, [r4, #4]
 800bda8:	6014      	str	r4, [r2, #0]
 800bdaa:	4628      	mov	r0, r5
 800bdac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdb0:	f7ff bfa0 	b.w	800bcf4 <__malloc_unlock>
 800bdb4:	42a3      	cmp	r3, r4
 800bdb6:	d908      	bls.n	800bdca <_free_r+0x42>
 800bdb8:	6820      	ldr	r0, [r4, #0]
 800bdba:	1821      	adds	r1, r4, r0
 800bdbc:	428b      	cmp	r3, r1
 800bdbe:	bf01      	itttt	eq
 800bdc0:	6819      	ldreq	r1, [r3, #0]
 800bdc2:	685b      	ldreq	r3, [r3, #4]
 800bdc4:	1809      	addeq	r1, r1, r0
 800bdc6:	6021      	streq	r1, [r4, #0]
 800bdc8:	e7ed      	b.n	800bda6 <_free_r+0x1e>
 800bdca:	461a      	mov	r2, r3
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	b10b      	cbz	r3, 800bdd4 <_free_r+0x4c>
 800bdd0:	42a3      	cmp	r3, r4
 800bdd2:	d9fa      	bls.n	800bdca <_free_r+0x42>
 800bdd4:	6811      	ldr	r1, [r2, #0]
 800bdd6:	1850      	adds	r0, r2, r1
 800bdd8:	42a0      	cmp	r0, r4
 800bdda:	d10b      	bne.n	800bdf4 <_free_r+0x6c>
 800bddc:	6820      	ldr	r0, [r4, #0]
 800bdde:	4401      	add	r1, r0
 800bde0:	1850      	adds	r0, r2, r1
 800bde2:	4283      	cmp	r3, r0
 800bde4:	6011      	str	r1, [r2, #0]
 800bde6:	d1e0      	bne.n	800bdaa <_free_r+0x22>
 800bde8:	6818      	ldr	r0, [r3, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	6053      	str	r3, [r2, #4]
 800bdee:	4408      	add	r0, r1
 800bdf0:	6010      	str	r0, [r2, #0]
 800bdf2:	e7da      	b.n	800bdaa <_free_r+0x22>
 800bdf4:	d902      	bls.n	800bdfc <_free_r+0x74>
 800bdf6:	230c      	movs	r3, #12
 800bdf8:	602b      	str	r3, [r5, #0]
 800bdfa:	e7d6      	b.n	800bdaa <_free_r+0x22>
 800bdfc:	6820      	ldr	r0, [r4, #0]
 800bdfe:	1821      	adds	r1, r4, r0
 800be00:	428b      	cmp	r3, r1
 800be02:	bf04      	itt	eq
 800be04:	6819      	ldreq	r1, [r3, #0]
 800be06:	685b      	ldreq	r3, [r3, #4]
 800be08:	6063      	str	r3, [r4, #4]
 800be0a:	bf04      	itt	eq
 800be0c:	1809      	addeq	r1, r1, r0
 800be0e:	6021      	streq	r1, [r4, #0]
 800be10:	6054      	str	r4, [r2, #4]
 800be12:	e7ca      	b.n	800bdaa <_free_r+0x22>
 800be14:	bd38      	pop	{r3, r4, r5, pc}
 800be16:	bf00      	nop
 800be18:	20000ce4 	.word	0x20000ce4

0800be1c <_init>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	bf00      	nop
 800be20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be22:	bc08      	pop	{r3}
 800be24:	469e      	mov	lr, r3
 800be26:	4770      	bx	lr

0800be28 <_fini>:
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2a:	bf00      	nop
 800be2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2e:	bc08      	pop	{r3}
 800be30:	469e      	mov	lr, r3
 800be32:	4770      	bx	lr
