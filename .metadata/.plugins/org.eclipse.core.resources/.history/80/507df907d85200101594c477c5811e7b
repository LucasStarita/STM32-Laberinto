/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_host.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum  //
{
	izq, der, atras,
} dir_giro;

typedef enum {
	NORTE, SUR, ESTE, OESTE
} direccion_t;

typedef struct {
	int peso;
	bool pared[4]; // NORTE, ESTE, SUR, OESTE
} celda;

typedef struct {
	int x, y;
} punto_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

// Tiempo en ms que permanecen encendidas las luces al iniciar el sistema
#define TENCENDIDO 1000
// Tiempo en ms que permanecen apagadas las luces antes iniciar las transiciones
#define TAPAGADO 1000
// Cantidad de canales que se muestrean
#define CANALES 2
// Cantidad de muestras a promediar por canal
#define MUESTRAS 16
// Tamaño mínimo requerido de buffer
#define BUFFER_MINIMO (MUESTRAS * CANALES)
// Cantidad de buffers mínimos que se emplean
#define CANTIDAD_BUFFER_MINIMO 2
// Tamaño del buffer a imlementar
#define BUFFER_TOTAL (CANTIDAD_BUFFER_MINIMO * BUFFER_MINIMO)
#define SEL_AUTITO 0
#define N 16             // Define el tamaño del mapa (NxN)
#define INF (N+1)         // Valor asignado como peso "inf"
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

UART_HandleTypeDef huart5;

/* USER CODE BEGIN PV */
// Buffer para almacenar las muestras
uint16_t dma_buffer1[BUFFER_TOTAL];
uint16_t dma_buffer2[BUFFER_TOTAL];
// Valor promedio de las muestras del sensor derecho
volatile uint16_t sensor_der_avg;
// Valor promedio de las muestras del sensor izquierdo
volatile uint16_t sensor_izq_avg;
volatile int linea;           // flag de linea
volatile int boton;
volatile int pared;			  // flag de pared
volatile int ENTRE_INT;
volatile int pos;			  //de 0 a 15
volatile int orientacion;			  //norte=0, este=1, sur=2, oeste=3
volatile int paredcita;
dir_giro giro;
dir_giro direccion_de_giro;
GPIO_PinState estado;
celda mapa[N];
int dir_min;
int nogiro;
int cont_posible_linea;
// Umbral de comparación para el centrado
volatile uint16_t UMBRAL_DERECHO;  //1850
volatile uint16_t UMBRAL_IZQUIERDO;  //290
char mensaje[16]; //Variable mensaje (contiene los datos a enviar)
const uint8_t delay = 50; //Retardo a utilizar durante la transmisión

volatile uint16_t contpared;
volatile uint16_t contlinea;
volatile int paredprueba;			  // flag de flag de pared
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_TIM14_Init(void);
static void MX_TIM3_Init(void);
static void MX_UART5_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void Promediar1(uint16_t *buffer); // Calcula el promedio de las muestras
void Promediar2(uint16_t *buffer);
void EncenderLed(int numero);
void ApagarLed(int numero);
void EncenderTodos(void);
void ApagarTodos(void);
void Inicio(void);
void Inicio_Motores(void);
uint16_t Girar(dir_giro giro);
void setVelocidadIzquierda(int duty);
void setVelocidadDerecha(int duty);
bool antirebote(void);
void Avanzar(void);
void Frenar(void);
void Retroceder(void);
void GirarIzq(void);
void GirarDer(void);
void Bailar(void);
void InicializarMapa(celda *mapa);
void posicion(void);
void calcular_orientacion(dir_giro girohecho);
void detectorParedes(celda *mapa);
void ActualizarPesos(celda *mapa);
void ActualizarPesos10(celda *mapa);
int DirMin(celda *mapa);
void Centrado(void);
dir_giro PrioridadDeGiro(int dir_min1);
void Calibrar_Sensores(void);
GPIO_PinState haypared;



//mayonesa
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Transmision() { //Envia un mensaje a través de la UART
strcat(mensaje, "\r\n"); //Agrega instrucciones de retorno de carro y avance de línea al mensaje
HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, strlen(mensaje), delay); //Transmisión del mensaje

}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_USB_HOST_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  MX_TIM14_Init();
  MX_TIM3_Init();
  MX_UART5_Init();
  /* USER CODE BEGIN 2 */

	Inicio(); // Probamos los LED e Inicializamos
	Inicio_Motores();
	// Iniciar PWM en canales 3 y 4 de TIM3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */




/*
    while(pos==15){
		Bailar();
	}
*/

    while (pos==0){
    				Frenar();
    			}


// CONTROL FINAL -------------------------------------


    		if (linea == 1) {

			cont_posible_linea++;

			if (antirebote()) {
				contlinea++;
				posicion();
				dir_min = DirMin(mapa);
				linea = 0;
				Avanzar();
				HAL_Delay(100);

			}
			else
				linea = 0;

		}

    		haypared=HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6)==GPIO_PIN_RESET && nogiro) {
			contpared++;
			detectorParedes(mapa);                              //mayonesa
			ActualizarPesos10(mapa);
			dir_min = DirMin(mapa);
			nogiro=0;
		}

		if (orientacion == dir_min)
			Centrado();
		else {
			direccion_de_giro = PrioridadDeGiro(dir_min);
			Girar(direccion_de_giro);
			calcular_orientacion(direccion_de_giro);
			Frenar();
			HAL_Delay(200);
			nogiro=1;
//			Retroceder();
//			HAL_Delay(200);
//			Avanzar();
//			pared=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
			}
		}

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = ENABLE;
  hadc2.Init.ContinuousConvMode = ENABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 63999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
  htim14.Init.Prescaler = 41999;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 199;
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mi0_Pin|mi1_Pin|md0_Pin|md1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|LED_VERDE_Pin|LD3_Pin|LED_ROJO_Pin
                          |LED_AZUL_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : boton_azul_Pin */
  GPIO_InitStruct.Pin = boton_azul_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(boton_azul_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : mi0_Pin mi1_Pin md0_Pin md1_Pin */
  GPIO_InitStruct.Pin = mi0_Pin|mi1_Pin|md0_Pin|md1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PD11 LED_VERDE_Pin LD3_Pin LED_ROJO_Pin
                           LED_AZUL_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|LED_VERDE_Pin|LD3_Pin|LED_ROJO_Pin
                          |LED_AZUL_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : pared_delante_Pin sensor_linea_Pin */
  GPIO_InitStruct.Pin = pared_delante_Pin|sensor_linea_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void Inicio(void) {
// Encendemos todos los LED y esperamos un tiempo
	EncenderTodos();
	HAL_Delay(TENCENDIDO);
// Apagamos todos los LED y esperamos un tiempo
	ApagarTodos();
	HAL_Delay(TAPAGADO);
// Iniciamos las conversiones
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer1, BUFFER_TOTAL);
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) dma_buffer2, BUFFER_TOTAL);
// Setea los PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PC8 - Velocidad izquierda
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PC9 - Velocidad derecha
	setVelocidadIzquierda(75);  // 75% al motor izquierdo
	setVelocidadDerecha(75);    // 75% al motor derecho
	InicializarMapa(mapa);     // Inicializa la matriz de pesos y paredes
	ActualizarPesos(mapa);
	linea = 0;
	pared = 0; //inicializar variables de interrupcion
	orientacion = 0;
	pos = 15;
	dir_min = 0;
	UMBRAL_DERECHO=1700;
	UMBRAL_IZQUIERDO=3700;
	Calibrar_Sensores();
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
		EncenderLed(1);
	HAL_Delay(100);
	ApagarLed(1);
	HAL_Delay(100);
	}
	HAL_Delay(1000);
	linea=0;
	pared=0;
	contpared = 0;
	contlinea = 0;
	paredprueba = 0;
	nogiro=1;

}

void Inicio_Motores(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
}

void setMotorSpeed(int duty) {
	if (duty > 100)
		duty = 100;

	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3) + 1;
	uint32_t pulse = (duty * arr) / 100;

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse); // VelI - PC8
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pulse); // VelD - PC9
}

// Sección Velocidad de ruedas PWM

//Si quiero manejar la velocidad de cada rueda por separado

/**
 * @brief Establece la velocidad del motor izquierdo (PC8 - TIM3_CH3)
 * @param duty Duty cycle (0 a 100%)
 */

void setVelocidadIzquierda(int duty) {
	if (duty > 100)
		duty = 100;

	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3) + 1;
	uint32_t pulse = (duty * arr) / 100;

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse); // Motor izquierdo
}

/**
 * @brief Establece la velocidad del motor derecho (PC9 - TIM3_CH4)
 * @param duty Duty cycle (0 a 100%)
 */

void setVelocidadDerecha(int duty) {
	if (duty > 100)
		duty = 100;

	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3) + 1;
	uint32_t pulse = (duty * arr) / 100;

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pulse); // Motor derecho
}

int Sensor_Linea(void) {
	return (HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin)
			== GPIO_PIN_SET) ? 1 : 0;
}

bool antirebote(void) {
	int es_linea = 0;

	HAL_Delay(5); //5ms de delay
	if (Sensor_Linea() == 1)
		return false;
	HAL_Delay(5); //5ms de delay
	if (Sensor_Linea() == 1)
		return false;
	HAL_Delay(5); //5ms de delay
	if (Sensor_Linea() == 1)
		return false;
	es_linea = 1;

	while (es_linea == 1) {
		while (Sensor_Linea() == 0)
			Avanzar();

		if (Sensor_Linea() == 1)
			HAL_Delay(5); //5ms de delay
		if (Sensor_Linea() == 1)
			return true;
	}
	return false; //no deberia pasar nunca, en caso de falla
}

void Centrado(void) {

	if ((sensor_der_avg < UMBRAL_DERECHO)
			&& (sensor_izq_avg > UMBRAL_IZQUIERDO)) {
		EncenderLed(1);
		ApagarLed(2);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
	} else if ((sensor_der_avg > UMBRAL_DERECHO)
			&& (sensor_izq_avg < UMBRAL_IZQUIERDO)) {
		EncenderLed(2);
		ApagarLed(1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);   // MD0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1

	} else {
		ApagarLed(2);
		ApagarLed(1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
	}
}

void Bailar(void){

	for (int x = 0; x < 4; x++) {
	Avanzar();
	HAL_Delay(200);
	Retroceder();
	HAL_Delay(150);
	}
	for (int x = 0; x < 4; x++) {
	GirarIzq();
	HAL_Delay(200);
	GirarDer();
	HAL_Delay(150);
	}
}

void Avanzar(void) {

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // MI0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
}

void Frenar(void) {

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // MI1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);   // MD0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
}

void Retroceder(void) {

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // MI1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);   // MD0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // MD1
}

void GirarIzq(void) {

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // MI1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
}

void GirarDer(void) {

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   // MI0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // MI1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // MD0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // MD1
}

uint16_t Girar(dir_giro giro) {
	uint16_t duracion_ms = 525;

	if ((giro) == (dir_giro) (izq)) {
		// Girar a la izquierda
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // MI1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1

		//duracion_ms = 700;

	} else if ((giro) == (dir_giro) (der)) {
		// Girar a la derecha
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   // MI0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // MI1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // MD0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // MD1

		//duracion_ms = 700;

	} else if ((giro) == (dir_giro) (atras)) {
		// Girar 180°
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // MI1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // MD0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1
		//duracion_ms = 800;

	} else {
		return 1; // Comando inválido
	}

	HAL_Delay(duracion_ms); // Espera el tiempo necesario

	// Desactiva todos los pines (frena)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // MI0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // MI1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // MD0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // MD1

	return 0; // Éxito
}

void calcular_orientacion(dir_giro girohecho) {

	if (girohecho == izq)
		orientacion = (orientacion + 3) % 4;
	else if (girohecho == der)
		orientacion = (orientacion + 1) % 4;
	else if (girohecho == atras) {
		orientacion = (orientacion + 2) % 4;

	}
}

void posicion(void) { //norte=0, este=1, sur=2, oeste=

	if (orientacion == 0 && pos > 3)
		pos = (pos - 4);
	else if (orientacion == 1 && (pos % 4 != 3))
		pos = (pos + 1);
	else if (orientacion == 2 && pos < 12)
		pos = (pos + 4);
	else if (orientacion == 3 && (pos % 4 != 0))
		pos = (pos - 1);
	sprintf(mensaje, "%d", pos); //Convierte la variable numérica contador en un string
	Transmision(); //Ejecuta la función de transmisión
}

void detectorParedes(celda *mapa) {

	mapa[pos].pared[orientacion] = true;

	if (orientacion == 0 && pos > 3)
		mapa[pos - 4].pared[orientacion + 2] = true;

	if (orientacion == 2 && pos < 12)
		mapa[pos + 4].pared[orientacion - 2] = true;

	if (orientacion == 3 && (pos % 4 != 0))
		mapa[pos - 1].pared[orientacion - 2] = true;

	if (orientacion == 1 && (pos % 4 != 3))
		mapa[pos + 1].pared[orientacion + 2] = true;
}

void InicializarMapa(celda *mapa) {

	for (int x = 0; x < 16; x++) {

		mapa[x].peso = 15;
		for (int d = 0; d < 4; d++) {
			mapa[x].pared[d] = false;

			if (x < 4)                          // estoy en borde superior
				mapa[x].pared[0] = true;
			if (x > 11)                         // estoy en borde inferior
				mapa[x].pared[2] = true;
			if (x % 4 == 3)                  // estoy en borde derecho
				mapa[x].pared[1] = true;
			if (x % 4 == 0)                  // estoy en borde izquierdo
				mapa[x].pared[3] = true;
		}

	}
	mapa[0].peso = 0;
}

void ActualizarPesos(celda *mapa) {
	int peso_min_vecino = INF;
	int offset[4] = { -4, 1, +4, -1 }; // norte=0 offset con el vecino -4, este=0 offset con el vecino +1

	for (int i = 1; i < 16; i++) {           //elijo casilla
		for (int j = 0; j < 4; j++) {          //elijo dir
			if (!mapa[i].pared[j] && peso_min_vecino > mapa[i + offset[j]].peso) { // si no hay pared en esa dir y peso en esa dir es menor que el minimo actual de los vecinos
				peso_min_vecino = mapa[i + offset[j]].peso;
			}

		}
		mapa[i].peso = peso_min_vecino + 1;
		peso_min_vecino = INF;
	}
}

void ActualizarPesos10(celda *mapa) {
	int i = 0;
	while (i < 6) {
		ActualizarPesos(mapa);
		i++;
	}
}

dir_giro PrioridadDeGiro(int dir_min1) {
	dir_giro aux;//inicializo auxiliar
	if (orientacion == 0 && dir_min == 3)
		aux = izq;
	else if (orientacion == 3 && dir_min == 0)
		aux = der;
	else if (orientacion < dir_min)
		aux = der;
	else if (orientacion > dir_min)
		aux = izq;
	return aux;
}


void Calibrar_Sensores(void){
	                                      //caca

while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
	EncenderLed(2);
HAL_Delay(100);
ApagarLed(2);
HAL_Delay(100);
}


UMBRAL_DERECHO=sensor_der_avg;
HAL_Delay(3000);


while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
	EncenderLed(2);
HAL_Delay(100);
ApagarLed(2);
HAL_Delay(100);
}

UMBRAL_IZQUIERDO=sensor_izq_avg;

HAL_Delay(2000);
}



int DirMin(celda *mapa) {
	int minimo = 0;   //orientacion final
	int pesos[4];   //orden intermedio antes de fijar muros
	int i;   //variable auxiliar

	////sujeto a variar con eleccion
	pesos[0] = mapa[pos - 4].peso;   //inicializo variable peso norte
	pesos[1] = mapa[pos + 1].peso;   //inicializo variable peso este
	pesos[2] = mapa[pos + 4].peso;   //inicializo variable peso sur
	pesos[3] = mapa[pos - 1].peso;   //inicializo variable peso oeste
	for (i = 0; i <= 3; i++)   //miro paredes
		if (mapa[pos].pared[i])
			pesos[i] = 15;
	//////////////////
	int pesominimo = pesos[0];
	for (i = 0; i < 3; i++) //para buscar el peso minimo (se puede invertir la prioridad de NESO a OSEN con cambiar de > a >=)
		if (pesominimo > pesos[i + 1])
			minimo = i + 1;

	return minimo;
}

// rutina de atencion de interrupciones

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	ENTRE_INT=1;



	if (GPIO_Pin == GPIO_PIN_7) {

		linea = 1;

}
}

// Rutina de antención a la interrupción de buffer a mitad
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	if (hadc->Instance == ADC1) {
		Promediar1(&dma_buffer1[0]);
	} else if (hadc->Instance == ADC2) {
		Promediar2(&dma_buffer2[0]);
	}
}
// Rutina de antención a la interrupción de buffer a tope
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	if (hadc->Instance == ADC1) {
		Promediar1(&dma_buffer1[BUFFER_MINIMO]);
	} else if (hadc->Instance == ADC2) {
		Promediar2(&dma_buffer2[BUFFER_MINIMO]);
	}
}

// Calcula los promedios de ADC1
void Promediar1(uint16_t *buffer) {
// Inicializamos variables para acumular la suma de las muestras
	uint32_t sum = 0;
// Ralizamos la suma incrementando el puntero a las muestras
	for (int i = 0; i < MUESTRAS; ++i) {
		sum += buffer[0];
		buffer += 1;
	}
// Dividimos las sumas para obtener el promedio
#if SEL_AUTITO == 1
	sensor_der_avg = sum / MUESTRAS;
#else
		sensor_izq_avg = sum / MUESTRAS;
	#endif
}

// Calcula los promedios de ADC2
void Promediar2(uint16_t *buffer) {
// Inicializamos variables para acumular la suma de las muestras
	uint32_t sum = 0;
// Ralizamos la suma incrementando el puntero a las muestras
	for (int i = 0; i < MUESTRAS; ++i) {
		sum += buffer[0];
		buffer += 1;
	}
// Dividimos las sumas para obtener el promedio

#if SEL_AUTITO == 1
	sensor_izq_avg = sum / MUESTRAS;
#else
		sensor_der_avg = sum / MUESTRAS;
	#endif
}

void EncenderTodos(void) {
	HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
}

void ApagarTodos(void) {
	HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
}

void EncenderLed(int numero) {
	switch (numero) {
	case 1:
		HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_SET);
		break;
	case 2:
		HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_SET);
		break;
	case 3:
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
		break;
	default:
		// Número inválido
		break;
	}
}

void ApagarLed(int numero) {
	switch (numero) {
	case 1:
		HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, GPIO_PIN_RESET);
		break;
	case 2:
		HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_RESET);
		break;
	case 3:
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
		break;
	default:
		// Número inválido
		break;
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
